
uTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f4  00802000  00002216  000022aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000012c6  008022f4  008022f4  0000259e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061e4  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012cb  00000000  00000000  00008c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027d4  00000000  00000000  00009ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a64  00000000  00000000  0000c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022a1  00000000  00000000  0000d104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f68  00000000  00000000  0000f3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0001230d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_14>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_20>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_25>
      68:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_26>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_task_test_func2>
     1cc:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <_task_test_func3>
     1d0:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <test_create_task>
     1d4:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <test_tick>
     1d8:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_task_test_post_func>
     1dc:	0c 94 be 0b 	jmp	0x177c	; 0x177c <_task_test_func1>
     1e0:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <test_timer>
     1e4:	0c 94 18 07 	jmp	0xe30	; 0xe30 <kernel_catch_task_return>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df e5       	ldi	r29, 0x5F	; 95
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	12 e2       	ldi	r17, 0x22	; 34
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e6 e1       	ldi	r30, 0x16	; 22
     200:	f2 e2       	ldi	r31, 0x22	; 34
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a4 3f       	cpi	r26, 0xF4	; 244
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	25 e3       	ldi	r18, 0x35	; 53
     214:	a4 ef       	ldi	r26, 0xF4	; 244
     216:	b2 e2       	ldi	r27, 0x22	; 34
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	aa 3b       	cpi	r26, 0xBA	; 186
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <main>
     226:	0c 94 09 11 	jmp	0x2212	; 0x2212 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <combine_unused_blocks>:
	totalAllocatedMemory -= blk;
	totalNumBlocks--;
	CRITICAL_SYNC_END();
}

void combine_unused_blocks(uint16_t index) {
     22e:	bc 01       	movw	r22, r24
	uint8_t inUse = 0;
	uint16_t nextBlk, blkSize = 0;
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
	totalNumBlocks--;
	CRITICAL_SYNC_END();
}

void combine_unused_blocks(uint16_t index) {
	uint8_t inUse = 0;
     234:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t nextBlk, blkSize = 0;

	while (inUse == 0 && index + blkSize < MEMORY_SIZE) {
     236:	14 c0       	rjmp	.+40     	; 0x260 <combine_unused_blocks+0x32>
		memcpy(&nextBlk, &memory[index] + blkSize, HEADER_SIZE);
     238:	fb 01       	movw	r30, r22
     23a:	eb 50       	subi	r30, 0x0B	; 11
     23c:	fd 4d       	sbci	r31, 0xDD	; 221
     23e:	df 01       	movw	r26, r30
     240:	a2 0f       	add	r26, r18
     242:	b3 1f       	adc	r27, r19
     244:	4d 91       	ld	r20, X+
     246:	5c 91       	ld	r21, X
		if (nextBlk == 0)
     248:	41 15       	cp	r20, r1
     24a:	51 05       	cpc	r21, r1
     24c:	89 f0       	breq	.+34     	; 0x270 <combine_unused_blocks+0x42>
			break;
		inUse = (nextBlk & IN_USE_bm) >> 8;
     24e:	ca 01       	movw	r24, r20
     250:	88 27       	eor	r24, r24
     252:	90 78       	andi	r25, 0x80	; 128
		if (!inUse) {
     254:	91 11       	cpse	r25, r1
     256:	04 c0       	rjmp	.+8      	; 0x260 <combine_unused_blocks+0x32>
			blkSize += nextBlk;
     258:	24 0f       	add	r18, r20
     25a:	35 1f       	adc	r19, r21
			memcpy(&memory[index], &blkSize, HEADER_SIZE);
     25c:	20 83       	st	Z, r18
     25e:	31 83       	std	Z+1, r19	; 0x01

void combine_unused_blocks(uint16_t index) {
	uint8_t inUse = 0;
	uint16_t nextBlk, blkSize = 0;

	while (inUse == 0 && index + blkSize < MEMORY_SIZE) {
     260:	91 11       	cpse	r25, r1
     262:	06 c0       	rjmp	.+12     	; 0x270 <combine_unused_blocks+0x42>
     264:	cb 01       	movw	r24, r22
     266:	82 0f       	add	r24, r18
     268:	93 1f       	adc	r25, r19
     26a:	81 15       	cp	r24, r1
     26c:	90 41       	sbci	r25, 0x10	; 16
     26e:	20 f3       	brcs	.-56     	; 0x238 <combine_unused_blocks+0xa>
     270:	08 95       	ret

00000272 <internal_malloc>:
uint16_t totalAllocatedMemory;
uint16_t totalNumBlocks;

void combine_unused_blocks(uint16_t index);

mem_loc* internal_malloc(uint16_t size) {
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
	uint8_t inUse;

	if (size > MEMORY_SIZE - HEADER_SIZE || MEMORY_SIZE - totalAllocatedMemory < size + HEADER_SIZE)
     27a:	8f 3f       	cpi	r24, 0xFF	; 255
     27c:	2f e0       	ldi	r18, 0x0F	; 15
     27e:	92 07       	cpc	r25, r18
     280:	08 f0       	brcs	.+2      	; 0x284 <internal_malloc+0x12>
     282:	80 c0       	rjmp	.+256    	; 0x384 <internal_malloc+0x112>
     284:	40 91 76 33 	lds	r20, 0x3376	; 0x803376 <totalAllocatedMemory>
     288:	50 91 77 33 	lds	r21, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e1       	ldi	r19, 0x10	; 16
     290:	24 1b       	sub	r18, r20
     292:	35 0b       	sbc	r19, r21
     294:	8c 01       	movw	r16, r24
     296:	0e 5f       	subi	r16, 0xFE	; 254
     298:	1f 4f       	sbci	r17, 0xFF	; 255
     29a:	20 17       	cp	r18, r16
     29c:	31 07       	cpc	r19, r17
     29e:	08 f4       	brcc	.+2      	; 0x2a2 <internal_malloc+0x30>
     2a0:	74 c0       	rjmp	.+232    	; 0x38a <internal_malloc+0x118>
		return NULL;

	CRITICAL_SYNC_START();
     2a2:	20 91 f4 22 	lds	r18, 0x22F4	; 0x8022f4 <__data_end>
     2a6:	31 e0       	ldi	r19, 0x01	; 1
     2a8:	32 0f       	add	r19, r18
     2aa:	30 93 f4 22 	sts	0x22F4, r19	; 0x8022f4 <__data_end>
     2ae:	21 11       	cpse	r18, r1
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <internal_malloc+0x48>
     2b2:	2f b7       	in	r18, 0x3f	; 63
     2b4:	20 93 75 33 	sts	0x3375, r18	; 0x803375 <_sreg>
     2b8:	f8 94       	cli
     2ba:	ec 01       	movw	r28, r24
	4 bytes
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 17 01 	call	0x22e	; 0x22e <combine_unused_blocks>

void combine_unused_blocks(uint16_t index);

mem_loc* internal_malloc(uint16_t size) {
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
uint16_t totalNumBlocks;

void combine_unused_blocks(uint16_t index);

mem_loc* internal_malloc(uint16_t size) {
	uint16_t index = 0;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
	while (index < MEMORY_SIZE) {
     2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <internal_malloc+0x7e>
		memcpy(&blkSize, &memory[index], HEADER_SIZE);
     2ce:	fc 01       	movw	r30, r24
     2d0:	eb 50       	subi	r30, 0x0B	; 11
     2d2:	fd 4d       	sbci	r31, 0xDD	; 221
     2d4:	40 81       	ld	r20, Z
     2d6:	51 81       	ldd	r21, Z+1	; 0x01
		inUse = (blkSize & IN_USE_bm) > 0;
		blkSize &= ~IN_USE_bm;
     2d8:	9a 01       	movw	r18, r20
     2da:	3f 77       	andi	r19, 0x7F	; 127

		if (inUse == 0 && (blkSize == 0 || blkSize >= intSize))
     2dc:	55 23       	and	r21, r21
     2de:	34 f0       	brlt	.+12     	; 0x2ec <internal_malloc+0x7a>
     2e0:	21 15       	cp	r18, r1
     2e2:	31 05       	cpc	r19, r1
     2e4:	49 f0       	breq	.+18     	; 0x2f8 <internal_malloc+0x86>
     2e6:	20 17       	cp	r18, r16
     2e8:	31 07       	cpc	r19, r17
     2ea:	30 f4       	brcc	.+12     	; 0x2f8 <internal_malloc+0x86>
			break;
		index += blkSize;
     2ec:	82 0f       	add	r24, r18
     2ee:	93 1f       	adc	r25, r19
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
	while (index < MEMORY_SIZE) {
     2f0:	81 15       	cp	r24, r1
     2f2:	40 e1       	ldi	r20, 0x10	; 16
     2f4:	94 07       	cpc	r25, r20
     2f6:	58 f3       	brcs	.-42     	; 0x2ce <internal_malloc+0x5c>
			break;
		index += blkSize;
	}

	// found a block that was freed that we can re-purpose
	if (index < MEMORY_SIZE && blkSize > 0)
     2f8:	81 15       	cp	r24, r1
     2fa:	40 e1       	ldi	r20, 0x10	; 16
     2fc:	94 07       	cpc	r25, r20
     2fe:	48 f4       	brcc	.+18     	; 0x312 <internal_malloc+0xa0>
     300:	23 2b       	or	r18, r19
     302:	39 f0       	breq	.+14     	; 0x312 <internal_malloc+0xa0>
		return internal_realloc(&memory[index], size, false);
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	be 01       	movw	r22, r28
     308:	8b 50       	subi	r24, 0x0B	; 11
     30a:	9d 4d       	sbci	r25, 0xDD	; 221
     30c:	0e 94 cf 01 	call	0x39e	; 0x39e <internal_realloc>
     310:	41 c0       	rjmp	.+130    	; 0x394 <internal_malloc+0x122>

	if (index >= MEMORY_SIZE) {
     312:	81 15       	cp	r24, r1
     314:	20 e1       	ldi	r18, 0x10	; 16
     316:	92 07       	cpc	r25, r18
     318:	68 f0       	brcs	.+26     	; 0x334 <internal_malloc+0xc2>
		CRITICAL_SYNC_END();
     31a:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     31e:	81 50       	subi	r24, 0x01	; 1
     320:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     324:	81 11       	cpse	r24, r1
     326:	34 c0       	rjmp	.+104    	; 0x390 <internal_malloc+0x11e>
     328:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     32c:	8f bf       	out	0x3f, r24	; 63
		return NULL;
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	30 c0       	rjmp	.+96     	; 0x394 <internal_malloc+0x122>
	}

	intSize |= IN_USE_bm;
     334:	10 68       	ori	r17, 0x80	; 128
	memcpy(&memory[index], &intSize, HEADER_SIZE);
     336:	fc 01       	movw	r30, r24
     338:	eb 50       	subi	r30, 0x0B	; 11
     33a:	fd 4d       	sbci	r31, 0xDD	; 221
     33c:	00 83       	st	Z, r16
     33e:	11 83       	std	Z+1, r17	; 0x01
	totalAllocatedMemory += size + HEADER_SIZE;
     340:	20 91 76 33 	lds	r18, 0x3376	; 0x803376 <totalAllocatedMemory>
     344:	30 91 77 33 	lds	r19, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     348:	c2 0f       	add	r28, r18
     34a:	d3 1f       	adc	r29, r19
     34c:	22 96       	adiw	r28, 0x02	; 2
     34e:	c0 93 76 33 	sts	0x3376, r28	; 0x803376 <totalAllocatedMemory>
     352:	d0 93 77 33 	sts	0x3377, r29	; 0x803377 <totalAllocatedMemory+0x1>
	totalNumBlocks++;
     356:	20 91 78 33 	lds	r18, 0x3378	; 0x803378 <totalNumBlocks>
     35a:	30 91 79 33 	lds	r19, 0x3379	; 0x803379 <totalNumBlocks+0x1>
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	20 93 78 33 	sts	0x3378, r18	; 0x803378 <totalNumBlocks>
     366:	30 93 79 33 	sts	0x3379, r19	; 0x803379 <totalNumBlocks+0x1>

	CRITICAL_SYNC_END();
     36a:	20 91 f4 22 	lds	r18, 0x22F4	; 0x8022f4 <__data_end>
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	20 93 f4 22 	sts	0x22F4, r18	; 0x8022f4 <__data_end>
     374:	21 11       	cpse	r18, r1
     376:	03 c0       	rjmp	.+6      	; 0x37e <internal_malloc+0x10c>
     378:	20 91 75 33 	lds	r18, 0x3375	; 0x803375 <_sreg>
     37c:	2f bf       	out	0x3f, r18	; 63
	return &memory[index + HEADER_SIZE];
     37e:	89 50       	subi	r24, 0x09	; 9
     380:	9d 4d       	sbci	r25, 0xDD	; 221
     382:	08 c0       	rjmp	.+16     	; 0x394 <internal_malloc+0x122>
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
	uint8_t inUse;

	if (size > MEMORY_SIZE - HEADER_SIZE || MEMORY_SIZE - totalAllocatedMemory < size + HEADER_SIZE)
		return NULL;
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	05 c0       	rjmp	.+10     	; 0x394 <internal_malloc+0x122>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <internal_malloc+0x122>
	if (index < MEMORY_SIZE && blkSize > 0)
		return internal_realloc(&memory[index], size, false);

	if (index >= MEMORY_SIZE) {
		CRITICAL_SYNC_END();
		return NULL;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
	totalAllocatedMemory += size + HEADER_SIZE;
	totalNumBlocks++;

	CRITICAL_SYNC_END();
	return &memory[index + HEADER_SIZE];
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <internal_realloc>:
	memset(ptr, 0, size);
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
     39e:	2f 92       	push	r2
     3a0:	3f 92       	push	r3
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     3c2:	c5 ef       	ldi	r28, 0xF5	; 245
     3c4:	d2 e2       	ldi	r29, 0x22	; 34
	mem_loc retPtr = 0;

	if (size > MEMORY_SIZE - HEADER_SIZE || ptr < memory || ptr >= memory + MEMORY_SIZE)
     3c6:	6f 3f       	cpi	r22, 0xFF	; 255
     3c8:	2f e0       	ldi	r18, 0x0F	; 15
     3ca:	72 07       	cpc	r23, r18
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <internal_realloc+0x32>
     3ce:	4e c1       	rjmp	.+668    	; 0x66c <__FUSE_REGION_LENGTH__+0x26c>
     3d0:	8c 17       	cp	r24, r28
     3d2:	9d 07       	cpc	r25, r29
     3d4:	08 f4       	brcc	.+2      	; 0x3d8 <internal_realloc+0x3a>
     3d6:	4d c1       	rjmp	.+666    	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
     3d8:	f2 e3       	ldi	r31, 0x32	; 50
     3da:	85 3f       	cpi	r24, 0xF5	; 245
     3dc:	9f 07       	cpc	r25, r31
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <internal_realloc+0x44>
     3e0:	4b c1       	rjmp	.+662    	; 0x678 <__FUSE_REGION_LENGTH__+0x278>
     3e2:	6b 01       	movw	r12, r22
     3e4:	3c 01       	movw	r6, r24
		return NULL;

	if (ptr == NULL)
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	21 f4       	brne	.+8      	; 0x3f2 <internal_realloc+0x54>
		return m_malloc(size);
     3ea:	cb 01       	movw	r24, r22
     3ec:	0e 94 39 01 	call	0x272	; 0x272 <internal_malloc>
     3f0:	50 c1       	rjmp	.+672    	; 0x692 <__FUSE_REGION_LENGTH__+0x292>

	retPtr = ptr;
	retPtr -= HEADER_SIZE;
     3f2:	8c 01       	movw	r16, r24
     3f4:	02 50       	subi	r16, 0x02	; 2
     3f6:	11 09       	sbc	r17, r1
	memcpy(&blk, retPtr, HEADER_SIZE);
     3f8:	28 01       	movw	r4, r16
     3fa:	f8 01       	movw	r30, r16
     3fc:	e0 80       	ld	r14, Z
     3fe:	f1 80       	ldd	r15, Z+1	; 0x01
	if (verifyIsAllocated && (blk & IN_USE_bm) == 0)
     400:	44 23       	and	r20, r20
     402:	19 f0       	breq	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     404:	ff 20       	and	r15, r15
     406:	0c f0       	brlt	.+2      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     408:	3a c1       	rjmp	.+628    	; 0x67e <__FUSE_REGION_LENGTH__+0x27e>
		return NULL;

	origBlkSize = blkSize = blk & ~IN_USE_bm;
     40a:	57 01       	movw	r10, r14
     40c:	e8 94       	clt
     40e:	b7 f8       	bld	r11, 7

	// remaining the same size
	if (blkSize == size + HEADER_SIZE)
     410:	46 01       	movw	r8, r12
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	8f 0e       	add	r8, r31
     416:	91 1c       	adc	r9, r1
     418:	a8 14       	cp	r10, r8
     41a:	b9 04       	cpc	r11, r9
     41c:	09 f4       	brne	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     41e:	32 c1       	rjmp	.+612    	; 0x684 <__FUSE_REGION_LENGTH__+0x284>
		return ptr;

	CRITICAL_SYNC_START();
     420:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	98 0f       	add	r25, r24
     428:	90 93 f4 22 	sts	0x22F4, r25	; 0x8022f4 <__data_end>
     42c:	81 11       	cpse	r24, r1
     42e:	04 c0       	rjmp	.+8      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
     430:	8f b7       	in	r24, 0x3f	; 63
     432:	80 93 75 33 	sts	0x3375, r24	; 0x803375 <_sreg>
     436:	f8 94       	cli

	combine_unused_blocks(0);
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 17 01 	call	0x22e	; 0x22e <combine_unused_blocks>
	// grab the previous block
	if (retPtr != memory) {
     440:	25 ef       	ldi	r18, 0xF5	; 245
     442:	42 16       	cp	r4, r18
     444:	22 e2       	ldi	r18, 0x22	; 34
     446:	52 06       	cpc	r5, r18
     448:	89 f4       	brne	.+34     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     44a:	e5 ef       	ldi	r30, 0xF5	; 245
     44c:	f2 e2       	ldi	r31, 0x22	; 34
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	17 c0       	rjmp	.+46     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>

	combine_unused_blocks(0);
	// grab the previous block
	if (retPtr != memory) {
		while (nextAddr != retPtr && nextAddr < memory + MEMORY_SIZE) {
			memcpy(&prevBlk, nextAddr, HEADER_SIZE);
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
			prevBlkSize = prevBlk & ~IN_USE_bm;
     460:	c9 01       	movw	r24, r18
     462:	9f 77       	andi	r25, 0x7F	; 127
			prevAddr = nextAddr;
     464:	bf 01       	movw	r22, r30
			nextAddr += prevBlkSize;
     466:	e8 0f       	add	r30, r24
     468:	f9 1f       	adc	r31, r25
     46a:	08 c0       	rjmp	.+16     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46c:	e5 ef       	ldi	r30, 0xF5	; 245
     46e:	f2 e2       	ldi	r31, 0x22	; 34
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
	CRITICAL_SYNC_START();

	combine_unused_blocks(0);
	// grab the previous block
	if (retPtr != memory) {
		while (nextAddr != retPtr && nextAddr < memory + MEMORY_SIZE) {
     47c:	e0 17       	cp	r30, r16
     47e:	f1 07       	cpc	r31, r17
     480:	21 f0       	breq	.+8      	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
     482:	42 e3       	ldi	r20, 0x32	; 50
     484:	e5 3f       	cpi	r30, 0xF5	; 245
     486:	f4 07       	cpc	r31, r20
     488:	48 f3       	brcs	.-46     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
			nextAddr += prevBlkSize;
		}
	}

	// grab the next block
	if (retPtr + blkSize < memory + MEMORY_SIZE) {
     48a:	d8 01       	movw	r26, r16
     48c:	aa 0d       	add	r26, r10
     48e:	bb 1d       	adc	r27, r11
     490:	42 e3       	ldi	r20, 0x32	; 50
     492:	a5 3f       	cpi	r26, 0xF5	; 245
     494:	b4 07       	cpc	r27, r20
     496:	38 f4       	brcc	.+14     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
		memcpy(&nextBlk, retPtr + blkSize, HEADER_SIZE);
     498:	2d 90       	ld	r2, X+
     49a:	3c 90       	ld	r3, X
     49c:	11 97       	sbiw	r26, 0x01	; 1
		nextBlkSize = nextBlk & ~IN_USE_bm;
     49e:	a1 01       	movw	r20, r2
     4a0:	5f 77       	andi	r21, 0x7F	; 127
		nextAddr = retPtr + blkSize;
     4a2:	fd 01       	movw	r30, r26
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
     4a6:	21 2c       	mov	r2, r1
     4a8:	31 2c       	mov	r3, r1
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
		nextBlkSize = nextBlk & ~IN_USE_bm;
		nextAddr = retPtr + blkSize;
	}

	// shrinking
	if (size < blkSize) {
     4ae:	ca 14       	cp	r12, r10
     4b0:	db 04       	cpc	r13, r11
     4b2:	a0 f4       	brcc	.+40     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
		if (blkSize - size < HEADER_SIZE)
     4b4:	75 01       	movw	r14, r10
     4b6:	ec 18       	sub	r14, r12
     4b8:	fd 08       	sbc	r15, r13
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	e8 16       	cp	r14, r24
     4be:	f1 04       	cpc	r15, r1
     4c0:	08 f4       	brcc	.+2      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c2:	c4 c0       	rjmp	.+392    	; 0x64c <__FUSE_REGION_LENGTH__+0x24c>
			goto realloc_end;

		space = blkSize - size - HEADER_SIZE;
     4c4:	e2 e0       	ldi	r30, 0x02	; 2
     4c6:	ee 1a       	sub	r14, r30
     4c8:	f1 08       	sbc	r15, r1
		blkSize = size + HEADER_SIZE;
		blk = blkSize | IN_USE_bm;
     4ca:	24 01       	movw	r4, r8
     4cc:	68 94       	set
     4ce:	57 f8       	bld	r5, 7
		if ((nextBlk & IN_USE_bm) == 0)
     4d0:	33 20       	and	r3, r3
     4d2:	0c f4       	brge	.+2      	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
     4d4:	52 c0       	rjmp	.+164    	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
			space += nextBlkSize;
     4d6:	e4 0e       	add	r14, r20
     4d8:	f5 1e       	adc	r15, r21
     4da:	4f c0       	rjmp	.+158    	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
		addr = retPtr;
		if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
     4dc:	33 23       	and	r19, r19
     4de:	3c f0       	brlt	.+14     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
     4e0:	61 15       	cp	r22, r1
     4e2:	71 05       	cpc	r23, r1
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
			space += prevBlkSize;
     4e6:	8a 0d       	add	r24, r10
     4e8:	9b 1d       	adc	r25, r11
			addr = prevAddr;
     4ea:	db 01       	movw	r26, r22
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
		addr = retPtr;
     4ee:	d8 01       	movw	r26, r16
	}
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
     4f0:	c5 01       	movw	r24, r10
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
		addr = retPtr;
     4f4:	d8 01       	movw	r26, r16
	}
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
     4f6:	c5 01       	movw	r24, r10
		addr = retPtr;
		if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
			space += prevBlkSize;
			addr = prevAddr;
		}
		if ((nextBlk & IN_USE_bm) == 0 && nextAddr != NULL)
     4f8:	33 20       	and	r3, r3
     4fa:	24 f0       	brlt	.+8      	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
     4fc:	ef 2b       	or	r30, r31
     4fe:	11 f0       	breq	.+4      	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
			space += nextBlkSize;
     500:	84 0f       	add	r24, r20
     502:	95 1f       	adc	r25, r21

		if (space >= size && addr + size + HEADER_SIZE <= memory + MEMORY_SIZE) {
     504:	8c 15       	cp	r24, r12
     506:	9d 05       	cpc	r25, r13
     508:	08 f4       	brcc	.+2      	; 0x50c <__FUSE_REGION_LENGTH__+0x10c>
     50a:	5b c0       	rjmp	.+182    	; 0x5c2 <__FUSE_REGION_LENGTH__+0x1c2>
     50c:	ad 01       	movw	r20, r26
     50e:	4c 0d       	add	r20, r12
     510:	5d 1d       	adc	r21, r13
     512:	4e 5f       	subi	r20, 0xFE	; 254
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	45 5f       	subi	r20, 0xF5	; 245
     518:	52 43       	sbci	r21, 0x32	; 50
     51a:	11 f0       	breq	.+4      	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
     51c:	08 f0       	brcs	.+2      	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
     51e:	53 c0       	rjmp	.+166    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
     520:	eb 01       	movw	r28, r22
     522:	03 c0       	rjmp	.+6      	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
				CRITICAL_SYNC_END();
				return NULL;
			}

			// found a spot we can use
			prevBlk = blk;
     524:	97 01       	movw	r18, r14
     526:	01 c0       	rjmp	.+2      	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
     528:	97 01       	movw	r18, r14
			space += nextBlkSize;

		if (space >= size && addr + size + HEADER_SIZE <= memory + MEMORY_SIZE) {
			move_block:

			blk = (size | IN_USE_bm) + HEADER_SIZE;
     52a:	26 01       	movw	r4, r12
     52c:	68 94       	set
     52e:	57 f8       	bld	r5, 7
     530:	42 e0       	ldi	r20, 0x02	; 2
     532:	44 0e       	add	r4, r20
     534:	51 1c       	adc	r5, r1
			space = size + HEADER_SIZE > space ? 0 : space - size - HEADER_SIZE;
     536:	88 15       	cp	r24, r8
     538:	99 05       	cpc	r25, r9
     53a:	38 f0       	brcs	.+14     	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
     53c:	8c 19       	sub	r24, r12
     53e:	9d 09       	sbc	r25, r13
     540:	7c 01       	movw	r14, r24
     542:	e2 e0       	ldi	r30, 0x02	; 2
     544:	ee 1a       	sub	r14, r30
     546:	f1 08       	sbc	r15, r1
     548:	02 c0       	rjmp	.+4      	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
     54a:	e1 2c       	mov	r14, r1
     54c:	f1 2c       	mov	r15, r1

			if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
     54e:	33 23       	and	r19, r19
     550:	a4 f0       	brlt	.+40     	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
     552:	20 97       	sbiw	r28, 0x00	; 0
     554:	91 f0       	breq	.+36     	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
				memcpy(prevAddr + HEADER_SIZE, retPtr + HEADER_SIZE, blkSize - HEADER_SIZE);
     556:	a5 01       	movw	r20, r10
     558:	42 50       	subi	r20, 0x02	; 2
     55a:	51 09       	sbc	r21, r1
     55c:	b3 01       	movw	r22, r6
     55e:	ce 01       	movw	r24, r28
     560:	02 96       	adiw	r24, 0x02	; 2
     562:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <memcpy>
				memset(retPtr + 1, 0, blkSize - 1);
     566:	a5 01       	movw	r20, r10
     568:	41 50       	subi	r20, 0x01	; 1
     56a:	51 09       	sbc	r21, r1
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	c3 01       	movw	r24, r6
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <memset>
				retPtr = prevAddr;
     578:	8e 01       	movw	r16, r28
			}
		
			link_block:
			// if there's not enough room for a header after we expand this block, simply claim the extra space
			if (space < HEADER_SIZE)
     57a:	f2 e0       	ldi	r31, 0x02	; 2
     57c:	ef 16       	cp	r14, r31
     57e:	f1 04       	cpc	r15, r1
     580:	18 f4       	brcc	.+6      	; 0x588 <__FUSE_REGION_LENGTH__+0x188>
				blk += space;
     582:	4e 0c       	add	r4, r14
     584:	5f 1c       	adc	r5, r15
     586:	08 c0       	rjmp	.+16     	; 0x598 <__FUSE_REGION_LENGTH__+0x198>
			// otherwise create a free'd header for the next block
			else {
				blkSize = blk & ~IN_USE_bm;
     588:	f2 01       	movw	r30, r4
     58a:	ff 77       	andi	r31, 0x7F	; 127
				nextAddr = retPtr + blkSize;
     58c:	e0 0f       	add	r30, r16
     58e:	f1 1f       	adc	r31, r17
				nextBlkSize = space;
				nextBlk = nextBlkSize;
				memcpy(nextAddr, &nextBlk, HEADER_SIZE);
     590:	e0 82       	st	Z, r14
     592:	f1 82       	std	Z+1, r15	; 0x01
				space = 0;
     594:	e1 2c       	mov	r14, r1
     596:	f1 2c       	mov	r15, r1
			}

			memcpy(retPtr, &blk, HEADER_SIZE);
     598:	f8 01       	movw	r30, r16
     59a:	40 82       	st	Z, r4
     59c:	51 82       	std	Z+1, r5	; 0x01

			goto move_block;
		}
	}

	if (size + HEADER_SIZE > origBlkSize)
     59e:	a8 14       	cp	r10, r8
     5a0:	b9 04       	cpc	r11, r9
     5a2:	98 f1       	brcs	.+102    	; 0x60a <__FUSE_REGION_LENGTH__+0x20a>
     5a4:	44 c0       	rjmp	.+136    	; 0x62e <__FUSE_REGION_LENGTH__+0x22e>
		// the only possible option at this point is to find a free block with equal
		// or lesser size than the desired size since we already combined unused blocks
		else {
			addr = memory;
			while (addr < memory + MEMORY_SIZE) {
				memcpy(&blk, addr, HEADER_SIZE);
     5a6:	e8 80       	ld	r14, Y
     5a8:	f9 80       	ldd	r15, Y+1	; 0x01
				blkSize = blk & ~IN_USE_bm;
     5aa:	c7 01       	movw	r24, r14
     5ac:	9f 77       	andi	r25, 0x7F	; 127

				if ((blk & IN_USE_bm) == 0 && (blkSize == 0 || blkSize >= size + HEADER_SIZE))
     5ae:	ff 20       	and	r15, r15
     5b0:	2c f0       	brlt	.+10     	; 0x5bc <__FUSE_REGION_LENGTH__+0x1bc>
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	71 f0       	breq	.+28     	; 0x5d2 <__FUSE_REGION_LENGTH__+0x1d2>
     5b6:	88 15       	cp	r24, r8
     5b8:	99 05       	cpc	r25, r9
     5ba:	58 f4       	brcc	.+22     	; 0x5d2 <__FUSE_REGION_LENGTH__+0x1d2>
					break;
				addr += blkSize;
     5bc:	c8 0f       	add	r28, r24
     5be:	d9 1f       	adc	r29, r25
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <__FUSE_REGION_LENGTH__+0x1c8>
     5c2:	c5 01       	movw	r24, r10
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <__FUSE_REGION_LENGTH__+0x1c8>
     5c6:	c5 01       	movw	r24, r10
		// no room to expand in-place, try looking elsewhere for an available block
		// the only possible option at this point is to find a free block with equal
		// or lesser size than the desired size since we already combined unused blocks
		else {
			addr = memory;
			while (addr < memory + MEMORY_SIZE) {
     5c8:	9e 01       	movw	r18, r28
     5ca:	f2 e3       	ldi	r31, 0x32	; 50
     5cc:	c5 3f       	cpi	r28, 0xF5	; 245
     5ce:	df 07       	cpc	r29, r31
     5d0:	50 f3       	brcs	.-44     	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>
				if ((blk & IN_USE_bm) == 0 && (blkSize == 0 || blkSize >= size + HEADER_SIZE))
					break;
				addr += blkSize;
			}
			// if no space left
			if (addr >= memory + MEMORY_SIZE || (blkSize == 0 && addr + size + HEADER_SIZE >= memory + MEMORY_SIZE)) {
     5d2:	25 5f       	subi	r18, 0xF5	; 245
     5d4:	32 43       	sbci	r19, 0x32	; 50
     5d6:	60 f4       	brcc	.+24     	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	09 f0       	breq	.+2      	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
     5dc:	a3 cf       	rjmp	.-186    	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
     5de:	9e 01       	movw	r18, r28
     5e0:	2c 0d       	add	r18, r12
     5e2:	3d 1d       	adc	r19, r13
     5e4:	2e 5f       	subi	r18, 0xFE	; 254
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	25 5f       	subi	r18, 0xF5	; 245
     5ea:	32 43       	sbci	r19, 0x32	; 50
     5ec:	08 f4       	brcc	.+2      	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5ee:	9c cf       	rjmp	.-200    	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
				CRITICAL_SYNC_END();
     5f0:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     5fa:	81 11       	cpse	r24, r1
     5fc:	45 c0       	rjmp	.+138    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
     5fe:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     602:	8f bf       	out	0x3f, r24	; 63
				return NULL;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	44 c0       	rjmp	.+136    	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
			goto move_block;
		}
	}

	if (size + HEADER_SIZE > origBlkSize)
		totalAllocatedMemory += (size + HEADER_SIZE) - origBlkSize + space;
     60a:	ca 18       	sub	r12, r10
     60c:	db 08       	sbc	r13, r11
     60e:	ec 0c       	add	r14, r12
     610:	fd 1c       	adc	r15, r13
     612:	20 91 76 33 	lds	r18, 0x3376	; 0x803376 <totalAllocatedMemory>
     616:	30 91 77 33 	lds	r19, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     61a:	e2 0e       	add	r14, r18
     61c:	f3 1e       	adc	r15, r19
     61e:	f2 e0       	ldi	r31, 0x02	; 2
     620:	ef 0e       	add	r14, r31
     622:	f1 1c       	adc	r15, r1
     624:	e0 92 76 33 	sts	0x3376, r14	; 0x803376 <totalAllocatedMemory>
     628:	f0 92 77 33 	sts	0x3377, r15	; 0x803377 <totalAllocatedMemory+0x1>
     62c:	0f c0       	rjmp	.+30     	; 0x64c <__FUSE_REGION_LENGTH__+0x24c>
	else
		totalAllocatedMemory -= origBlkSize - size - HEADER_SIZE;
     62e:	ca 18       	sub	r12, r10
     630:	db 08       	sbc	r13, r11
     632:	60 91 76 33 	lds	r22, 0x3376	; 0x803376 <totalAllocatedMemory>
     636:	70 91 77 33 	lds	r23, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     63a:	c6 0e       	add	r12, r22
     63c:	d7 1e       	adc	r13, r23
     63e:	22 e0       	ldi	r18, 0x02	; 2
     640:	c2 0e       	add	r12, r18
     642:	d1 1c       	adc	r13, r1
     644:	c0 92 76 33 	sts	0x3376, r12	; 0x803376 <totalAllocatedMemory>
     648:	d0 92 77 33 	sts	0x3377, r13	; 0x803377 <totalAllocatedMemory+0x1>

	realloc_end:
	CRITICAL_SYNC_END();
     64c:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     650:	81 50       	subi	r24, 0x01	; 1
     652:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     656:	81 11       	cpse	r24, r1
     658:	03 c0       	rjmp	.+6      	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
     65a:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     65e:	8f bf       	out	0x3f, r24	; 63
	return retPtr == 0 ? 0 : retPtr + HEADER_SIZE;
     660:	01 15       	cp	r16, r1
     662:	11 05       	cpc	r17, r1
     664:	a1 f0       	breq	.+40     	; 0x68e <__FUSE_REGION_LENGTH__+0x28e>
     666:	c8 01       	movw	r24, r16
     668:	02 96       	adiw	r24, 0x02	; 2
     66a:	13 c0       	rjmp	.+38     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
	mem_loc retPtr = 0;

	if (size > MEMORY_SIZE - HEADER_SIZE || ptr < memory || ptr >= memory + MEMORY_SIZE)
		return NULL;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	10 c0       	rjmp	.+32     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0d c0       	rjmp	.+26     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0a c0       	rjmp	.+20     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>

	retPtr = ptr;
	retPtr -= HEADER_SIZE;
	memcpy(&blk, retPtr, HEADER_SIZE);
	if (verifyIsAllocated && (blk & IN_USE_bm) == 0)
		return NULL;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	07 c0       	rjmp	.+14     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>

	origBlkSize = blkSize = blk & ~IN_USE_bm;

	// remaining the same size
	if (blkSize == size + HEADER_SIZE)
		return ptr;
     684:	c3 01       	movw	r24, r6
     686:	05 c0       	rjmp	.+10     	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
				addr += blkSize;
			}
			// if no space left
			if (addr >= memory + MEMORY_SIZE || (blkSize == 0 && addr + size + HEADER_SIZE >= memory + MEMORY_SIZE)) {
				CRITICAL_SYNC_END();
				return NULL;
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 c0       	rjmp	.+4      	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
	else
		totalAllocatedMemory -= origBlkSize - size - HEADER_SIZE;

	realloc_end:
	CRITICAL_SYNC_END();
	return retPtr == 0 ? 0 : retPtr + HEADER_SIZE;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	bf 90       	pop	r11
     6a4:	af 90       	pop	r10
     6a6:	9f 90       	pop	r9
     6a8:	8f 90       	pop	r8
     6aa:	7f 90       	pop	r7
     6ac:	6f 90       	pop	r6
     6ae:	5f 90       	pop	r5
     6b0:	4f 90       	pop	r4
     6b2:	3f 90       	pop	r3
     6b4:	2f 90       	pop	r2
     6b6:	08 95       	ret

000006b8 <tick_init>:
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

void tick_trigger_interrupt(void) {
	TCC0_OVF_vect ();
     6b8:	e0 e0       	ldi	r30, 0x00	; 0
     6ba:	f8 e0       	ldi	r31, 0x08	; 8
     6bc:	8f e8       	ldi	r24, 0x8F	; 143
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	86 a3       	std	Z+38, r24	; 0x26
     6c2:	97 a3       	std	Z+39, r25	; 0x27
     6c4:	97 e0       	ldi	r25, 0x07	; 7
     6c6:	90 83       	st	Z, r25
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	86 83       	std	Z+6, r24	; 0x06
     6cc:	e0 e4       	ldi	r30, 0x40	; 64
     6ce:	f8 e0       	ldi	r31, 0x08	; 8
     6d0:	26 e6       	ldi	r18, 0x66	; 102
     6d2:	36 e0       	ldi	r19, 0x06	; 6
     6d4:	26 a3       	std	Z+38, r18	; 0x26
     6d6:	37 a3       	std	Z+39, r19	; 0x27
     6d8:	90 83       	st	Z, r25
     6da:	86 83       	std	Z+6, r24	; 0x06
     6dc:	08 95       	ret

000006de <__vector_14>:
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	0f 92       	push	r0
     6e6:	08 b6       	in	r0, 0x38	; 56
     6e8:	0f 92       	push	r0
     6ea:	09 b6       	in	r0, 0x39	; 57
     6ec:	0f 92       	push	r0
     6ee:	0a b6       	in	r0, 0x3a	; 58
     6f0:	0f 92       	push	r0
     6f2:	0b b6       	in	r0, 0x3b	; 59
     6f4:	0f 92       	push	r0
     6f6:	1f 92       	push	r1
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	2f 93       	push	r18
     71c:	3f 93       	push	r19
     71e:	4f 93       	push	r20
     720:	5f 93       	push	r21
     722:	6f 93       	push	r22
     724:	7f 93       	push	r23
     726:	8f 93       	push	r24
     728:	9f 93       	push	r25
     72a:	af 93       	push	r26
     72c:	bf 93       	push	r27
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	a0 91 7c 33 	lds	r26, 0x337C	; 0x80337c <ptrStackP>
     73a:	b0 91 7d 33 	lds	r27, 0x337D	; 0x80337d <ptrStackP+0x1>
     73e:	0d b6       	in	r0, 0x3d	; 61
     740:	0d 92       	st	X+, r0
     742:	0e b6       	in	r0, 0x3e	; 62
     744:	0d 92       	st	X+, r0
     746:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     74a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     74e:	0e 94 b0 06 	call	0xd60	; 0xd60 <kernel_process_all_tasks>
     752:	a0 91 7c 33 	lds	r26, 0x337C	; 0x80337c <ptrStackP>
     756:	b0 91 7d 33 	lds	r27, 0x337D	; 0x80337d <ptrStackP+0x1>
     75a:	0d 90       	ld	r0, X+
     75c:	1c 90       	ld	r1, X
     75e:	0d be       	out	0x3d, r0	; 61
     760:	1e be       	out	0x3e, r1	; 62
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	bf 90       	pop	r11
     78c:	af 90       	pop	r10
     78e:	9f 90       	pop	r9
     790:	8f 90       	pop	r8
     792:	7f 90       	pop	r7
     794:	6f 90       	pop	r6
     796:	5f 90       	pop	r5
     798:	4f 90       	pop	r4
     79a:	3f 90       	pop	r3
     79c:	2f 90       	pop	r2
     79e:	1f 90       	pop	r1
     7a0:	0f 90       	pop	r0
     7a2:	0b be       	out	0x3b, r0	; 59
     7a4:	0f 90       	pop	r0
     7a6:	0a be       	out	0x3a, r0	; 58
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	18 95       	reti

000007b8 <__vector_20>:
	portRESTORE_CONTEXT();
	reti();
}

void TCC1_OVF_vect (void) __attribute__ ((signal, __INTR_ATTRS));
void TCC1_OVF_vect (void) {
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	0b b6       	in	r0, 0x3b	; 59
     7c4:	0f 92       	push	r0
     7c6:	2f 93       	push	r18
     7c8:	3f 93       	push	r19
     7ca:	4f 93       	push	r20
     7cc:	5f 93       	push	r21
     7ce:	6f 93       	push	r22
     7d0:	7f 93       	push	r23
     7d2:	8f 93       	push	r24
     7d4:	9f 93       	push	r25
     7d6:	af 93       	push	r26
     7d8:	bf 93       	push	r27
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
	onTimerTick();
     7de:	0e 94 07 0b 	call	0x160e	; 0x160e <onTimerTick>
#if TEST_MODULES
	test_tick_callback();
     7e2:	0e 94 86 0c 	call	0x190c	; 0x190c <test_tick_callback>
#endif
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	0b be       	out	0x3b, r0	; 59
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__m_assert>:
 #include <stdio.h>
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
     80c:	e0 e0       	ldi	r30, 0x00	; 0
     80e:	f0 e0       	ldi	r31, 0x00	; 0
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     810:	01 c0       	rjmp	.+2      	; 0x814 <__m_assert+0x8>
		prefix++;
     812:	31 96       	adiw	r30, 0x01	; 1
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     814:	db 01       	movw	r26, r22
     816:	ae 0f       	add	r26, r30
     818:	bf 1f       	adc	r27, r31
     81a:	8c 91       	ld	r24, X
     81c:	8e 52       	subi	r24, 0x2E	; 46
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	c0 f3       	brcs	.-16     	; 0x812 <__m_assert+0x6>
		prefix++;
	 sprintf(gStrBuf, "Assert failure!\n\rFile: %s\n\rLine: %d\n\rExp: %s\n\r", __file + prefix, __lineno, __sexp);
     822:	3f 93       	push	r19
     824:	2f 93       	push	r18
     826:	5f 93       	push	r21
     828:	4f 93       	push	r20
     82a:	bf 93       	push	r27
     82c:	af 93       	push	r26
     82e:	8c e0       	ldi	r24, 0x0C	; 12
     830:	90 e2       	ldi	r25, 0x20	; 32
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	85 ef       	ldi	r24, 0xF5	; 245
     838:	92 e3       	ldi	r25, 0x32	; 50
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <sprintf>
	 serial_send_string(gStrBuf);
     842:	85 ef       	ldi	r24, 0xF5	; 245
     844:	92 e3       	ldi	r25, 0x32	; 50
     846:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
#endif
	kernel_disable_scheduler();
     84a:	0e 94 82 07 	call	0xf04	; 0xf04 <kernel_disable_scheduler>
	 return false;
     84e:	8d b7       	in	r24, 0x3d	; 61
     850:	9e b7       	in	r25, 0x3e	; 62
     852:	0a 96       	adiw	r24, 0x0a	; 10
     854:	8d bf       	out	0x3d, r24	; 61
     856:	9e bf       	out	0x3e, r25	; 62
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret

0000085c <kernel_init>:
 void kernel_catch_task_return(void);
 Context* kernel_find_highest_priority_ready_task(void);
 void kernel_swap_task(void);

 void kernel_init(void) {
	ptrStackP = &defaultStackP;
     85c:	8a e7       	ldi	r24, 0x7A	; 122
     85e:	93 e3       	ldi	r25, 0x33	; 51
     860:	80 93 7c 33 	sts	0x337C, r24	; 0x80337c <ptrStackP>
     864:	90 93 7d 33 	sts	0x337D, r25	; 0x80337d <ptrStackP+0x1>
     868:	08 95       	ret

0000086a <kernel_init_stack>:
	queue_add_with_priority(&contextList[priority], c, 0);

	return c;
 }

 void kernel_init_stack(Context *c) {
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 d0       	rcall	.+0      	; 0x874 <kernel_init_stack+0xa>
     874:	1f 92       	push	r1
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	dc 01       	movw	r26, r24
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
     87c:	48 e1       	ldi	r20, 0x18	; 24
     87e:	57 e0       	ldi	r21, 0x07	; 7
     880:	05 2e       	mov	r0, r21
     882:	00 0c       	add	r0, r0
     884:	66 0b       	sbc	r22, r22
     886:	77 0b       	sbc	r23, r23
     888:	49 83       	std	Y+1, r20	; 0x01
     88a:	5a 83       	std	Y+2, r21	; 0x02
     88c:	6b 83       	std	Y+3, r22	; 0x03
     88e:	7c 83       	std	Y+4, r23	; 0x04
	for (i = j = 0; i < 4; i++)
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	22 c0       	rjmp	.+68     	; 0x8de <kernel_init_stack+0x74>
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
     89a:	4d 91       	ld	r20, X+
     89c:	5c 91       	ld	r21, X
     89e:	11 97       	sbiw	r26, 0x01	; 1
     8a0:	17 96       	adiw	r26, 0x07	; 7
     8a2:	ed 91       	ld	r30, X+
     8a4:	fc 91       	ld	r31, X
     8a6:	18 97       	sbiw	r26, 0x08	; 8
     8a8:	e2 1b       	sub	r30, r18
     8aa:	f3 0b       	sbc	r31, r19
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	e4 0f       	add	r30, r20
     8b0:	f5 1f       	adc	r31, r21
     8b2:	49 81       	ldd	r20, Y+1	; 0x01
     8b4:	5a 81       	ldd	r21, Y+2	; 0x02
     8b6:	6b 81       	ldd	r22, Y+3	; 0x03
     8b8:	7c 81       	ldd	r23, Y+4	; 0x04
     8ba:	8c 01       	movw	r16, r24
     8bc:	00 0f       	add	r16, r16
     8be:	11 1f       	adc	r17, r17
     8c0:	00 0f       	add	r16, r16
     8c2:	11 1f       	adc	r17, r17
     8c4:	00 0f       	add	r16, r16
     8c6:	11 1f       	adc	r17, r17
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <kernel_init_stack+0x68>
     8ca:	76 95       	lsr	r23
     8cc:	67 95       	ror	r22
     8ce:	57 95       	ror	r21
     8d0:	47 95       	ror	r20
     8d2:	0a 95       	dec	r16
     8d4:	d2 f7       	brpl	.-12     	; 0x8ca <kernel_init_stack+0x60>
     8d6:	40 83       	st	Z, r20
 }

 void kernel_init_stack(Context *c) {
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
     8d8:	01 96       	adiw	r24, 0x01	; 1
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
 }

 void kernel_init_stack(Context *c) {
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
     8de:	84 30       	cpi	r24, 0x04	; 4
     8e0:	91 05       	cpc	r25, r1
     8e2:	d8 f2       	brcs	.-74     	; 0x89a <kernel_init_stack+0x30>
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
     8e4:	1a 96       	adiw	r26, 0x0a	; 10
     8e6:	4d 91       	ld	r20, X+
     8e8:	5c 91       	ld	r21, X
     8ea:	1b 97       	sbiw	r26, 0x0b	; 11
     8ec:	05 2e       	mov	r0, r21
     8ee:	00 0c       	add	r0, r0
     8f0:	66 0b       	sbc	r22, r22
     8f2:	77 0b       	sbc	r23, r23
     8f4:	49 83       	std	Y+1, r20	; 0x01
     8f6:	5a 83       	std	Y+2, r21	; 0x02
     8f8:	6b 83       	std	Y+3, r22	; 0x03
     8fa:	7c 83       	std	Y+4, r23	; 0x04
	for (i = 0; i < 4; i++)
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	21 c0       	rjmp	.+66     	; 0x944 <kernel_init_stack+0xda>
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;
     902:	4d 91       	ld	r20, X+
     904:	5c 91       	ld	r21, X
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	17 96       	adiw	r26, 0x07	; 7
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	18 97       	sbiw	r26, 0x08	; 8
     910:	e2 1b       	sub	r30, r18
     912:	f3 0b       	sbc	r31, r19
     914:	e4 0f       	add	r30, r20
     916:	f5 1f       	adc	r31, r21
     918:	49 81       	ldd	r20, Y+1	; 0x01
     91a:	5a 81       	ldd	r21, Y+2	; 0x02
     91c:	6b 81       	ldd	r22, Y+3	; 0x03
     91e:	7c 81       	ldd	r23, Y+4	; 0x04
     920:	8c 01       	movw	r16, r24
     922:	00 0f       	add	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	00 0f       	add	r16, r16
     928:	11 1f       	adc	r17, r17
     92a:	00 0f       	add	r16, r16
     92c:	11 1f       	adc	r17, r17
     92e:	04 c0       	rjmp	.+8      	; 0x938 <kernel_init_stack+0xce>
     930:	76 95       	lsr	r23
     932:	67 95       	ror	r22
     934:	57 95       	ror	r21
     936:	47 95       	ror	r20
     938:	0a 95       	dec	r16
     93a:	d2 f7       	brpl	.-12     	; 0x930 <kernel_init_stack+0xc6>
     93c:	40 83       	st	Z, r20
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
	for (i = 0; i < 4; i++)
     93e:	01 96       	adiw	r24, 0x01	; 1
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
	for (i = 0; i < 4; i++)
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	91 05       	cpc	r25, r1
     948:	e0 f2       	brcs	.-72     	; 0x902 <kernel_init_stack+0x98>
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;

	c->stack[c->stackSize - j] = 0x80; // global interrupt enable
     94a:	8d 91       	ld	r24, X+
     94c:	9c 91       	ld	r25, X
     94e:	11 97       	sbiw	r26, 0x01	; 1
     950:	17 96       	adiw	r26, 0x07	; 7
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	18 97       	sbiw	r26, 0x08	; 8
     958:	e2 1b       	sub	r30, r18
     95a:	f3 0b       	sbc	r31, r19
     95c:	e8 0f       	add	r30, r24
     95e:	f9 1f       	adc	r31, r25
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
	c->stackPointer = &c->stack[c->stackSize - j - 36]; // 37 pops in RESTORE_CONTEXT
     964:	4d 91       	ld	r20, X+
     966:	5c 91       	ld	r21, X
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	17 96       	adiw	r26, 0x07	; 7
     96c:	8d 91       	ld	r24, X+
     96e:	9c 91       	ld	r25, X
     970:	18 97       	sbiw	r26, 0x08	; 8
     972:	82 1b       	sub	r24, r18
     974:	93 0b       	sbc	r25, r19
     976:	84 97       	sbiw	r24, 0x24	; 36
     978:	84 0f       	add	r24, r20
     97a:	95 1f       	adc	r25, r21
     97c:	12 96       	adiw	r26, 0x02	; 2
     97e:	8d 93       	st	X+, r24
     980:	9c 93       	st	X, r25
     982:	13 97       	sbiw	r26, 0x03	; 3
 }
     984:	24 96       	adiw	r28, 0x04	; 4
     986:	cd bf       	out	0x3d, r28	; 61
     988:	de bf       	out	0x3e, r29	; 62
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <kernel_create_task>:

 void kernel_init(void) {
	ptrStackP = &defaultStackP;
 }

 Context* kernel_create_task(void (*task)(void), uint8_t priority, const char *taskName, uint16_t stackSize) {
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	d6 2e       	mov	r13, r22
     9aa:	7a 01       	movw	r14, r20
     9ac:	89 01       	movw	r16, r18
	Context *c;
	QueueNode *n;
	uint8_t i;

	m_assert(priority < MAX_PRIORITY);
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	86 17       	cp	r24, r22
     9b2:	58 f4       	brcc	.+22     	; 0x9ca <kernel_create_task+0x36>
     9b4:	2b e3       	ldi	r18, 0x3B	; 59
     9b6:	30 e2       	ldi	r19, 0x20	; 32
     9b8:	4d e2       	ldi	r20, 0x2D	; 45
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	63 e5       	ldi	r22, 0x53	; 83
     9be:	70 e2       	ldi	r23, 0x20	; 32
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	91 e2       	ldi	r25, 0x21	; 33
     9c4:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <kernel_create_task+0x34>
	m_assert(taskName != NULL);
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	59 f4       	brne	.+22     	; 0x9e6 <kernel_create_task+0x52>
     9d0:	2e e8       	ldi	r18, 0x8E	; 142
     9d2:	30 e2       	ldi	r19, 0x20	; 32
     9d4:	4e e2       	ldi	r20, 0x2E	; 46
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	63 e5       	ldi	r22, 0x53	; 83
     9da:	70 e2       	ldi	r23, 0x20	; 32
     9dc:	85 e0       	ldi	r24, 0x05	; 5
     9de:	91 e2       	ldi	r25, 0x21	; 33
     9e0:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <kernel_create_task+0x50>
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips due to the registers
     9e6:	0e 32       	cpi	r16, 0x2E	; 46
     9e8:	11 05       	cpc	r17, r1
     9ea:	58 f4       	brcc	.+22     	; 0xa02 <kernel_create_task+0x6e>
     9ec:	21 e6       	ldi	r18, 0x61	; 97
     9ee:	30 e2       	ldi	r19, 0x20	; 32
     9f0:	4f e2       	ldi	r20, 0x2F	; 47
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	63 e5       	ldi	r22, 0x53	; 83
     9f6:	70 e2       	ldi	r23, 0x20	; 32
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	91 e2       	ldi	r25, 0x21	; 33
     9fc:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     a00:	ff cf       	rjmp	.-2      	; 0xa00 <kernel_create_task+0x6c>

	for (i = 0; i < MAX_PRIORITY; i++) {
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	1c c0       	rjmp	.+56     	; 0xa3e <kernel_create_task+0xaa>
		n = contextList[i].head;
     a06:	e2 2f       	mov	r30, r18
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	e2 58       	subi	r30, 0x82	; 130
     a14:	fc 4c       	sbci	r31, 0xCC	; 204
     a16:	01 90       	ld	r0, Z+
     a18:	f0 81       	ld	r31, Z
     a1a:	e0 2d       	mov	r30, r0
		while (n != NULL) {
     a1c:	0d c0       	rjmp	.+26     	; 0xa38 <kernel_create_task+0xa4>
			c = (Context*) n->data;
     a1e:	a0 81       	ld	r26, Z
     a20:	b1 81       	ldd	r27, Z+1	; 0x01
			if (c->entryPoint == task)
     a22:	1a 96       	adiw	r26, 0x0a	; 10
     a24:	8d 91       	ld	r24, X+
     a26:	9c 91       	ld	r25, X
     a28:	1b 97       	sbiw	r26, 0x0b	; 11
     a2a:	8c 17       	cp	r24, r28
     a2c:	9d 07       	cpc	r25, r29
     a2e:	09 f4       	brne	.+2      	; 0xa32 <kernel_create_task+0x9e>
     a30:	6e c0       	rjmp	.+220    	; 0xb0e <kernel_create_task+0x17a>
				return NULL;
			n = n->next;
     a32:	02 80       	ldd	r0, Z+2	; 0x02
     a34:	f3 81       	ldd	r31, Z+3	; 0x03
     a36:	e0 2d       	mov	r30, r0
	m_assert(taskName != NULL);
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips due to the registers

	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		while (n != NULL) {
     a38:	30 97       	sbiw	r30, 0x00	; 0
     a3a:	89 f7       	brne	.-30     	; 0xa1e <kernel_create_task+0x8a>

	m_assert(priority < MAX_PRIORITY);
	m_assert(taskName != NULL);
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips due to the registers

	for (i = 0; i < MAX_PRIORITY; i++) {
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	28 30       	cpi	r18, 0x08	; 8
     a40:	10 f3       	brcs	.-60     	; 0xa06 <kernel_create_task+0x72>
				return NULL;
			n = n->next;
		}
	}

	c = m_malloc(sizeof(Context));
     a42:	82 e1       	ldi	r24, 0x12	; 18
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 39 01 	call	0x272	; 0x272 <internal_malloc>
     a4a:	5c 01       	movw	r10, r24
	m_assert(c != NULL);
     a4c:	89 2b       	or	r24, r25
     a4e:	59 f4       	brne	.+22     	; 0xa66 <kernel_create_task+0xd2>
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	30 e2       	ldi	r19, 0x20	; 32
     a54:	4c e3       	ldi	r20, 0x3C	; 60
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	63 e5       	ldi	r22, 0x53	; 83
     a5a:	70 e2       	ldi	r23, 0x20	; 32
     a5c:	85 e0       	ldi	r24, 0x05	; 5
     a5e:	91 e2       	ldi	r25, 0x21	; 33
     a60:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     a64:	ff cf       	rjmp	.-2      	; 0xa64 <kernel_create_task+0xd0>
	c->stack = (uint8_t*) m_malloc(stackSize);
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 39 01 	call	0x272	; 0x272 <internal_malloc>
     a6c:	f5 01       	movw	r30, r10
     a6e:	80 83       	st	Z, r24
     a70:	91 83       	std	Z+1, r25	; 0x01
	m_assert(c->stack != NULL);
     a72:	89 2b       	or	r24, r25
     a74:	59 f4       	brne	.+22     	; 0xa8c <kernel_create_task+0xf8>
     a76:	2a e7       	ldi	r18, 0x7A	; 122
     a78:	30 e2       	ldi	r19, 0x20	; 32
     a7a:	4e e3       	ldi	r20, 0x3E	; 62
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	63 e5       	ldi	r22, 0x53	; 83
     a80:	70 e2       	ldi	r23, 0x20	; 32
     a82:	85 e0       	ldi	r24, 0x05	; 5
     a84:	91 e2       	ldi	r25, 0x21	; 33
     a86:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     a8a:	ff cf       	rjmp	.-2      	; 0xa8a <kernel_create_task+0xf6>

	c->taskName = (char*) m_malloc(strlen(taskName) + 1);
     a8c:	f7 01       	movw	r30, r14
     a8e:	01 90       	ld	r0, Z+
     a90:	00 20       	and	r0, r0
     a92:	e9 f7       	brne	.-6      	; 0xa8e <kernel_create_task+0xfa>
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	cf 01       	movw	r24, r30
     a98:	8e 19       	sub	r24, r14
     a9a:	9f 09       	sbc	r25, r15
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 39 01 	call	0x272	; 0x272 <internal_malloc>
     aa2:	f5 01       	movw	r30, r10
     aa4:	84 83       	std	Z+4, r24	; 0x04
     aa6:	95 83       	std	Z+5, r25	; 0x05
	m_assert(c->taskName != NULL);
     aa8:	89 2b       	or	r24, r25
     aaa:	59 f4       	brne	.+22     	; 0xac2 <kernel_create_task+0x12e>
     aac:	2b e8       	ldi	r18, 0x8B	; 139
     aae:	30 e2       	ldi	r19, 0x20	; 32
     ab0:	41 e4       	ldi	r20, 0x41	; 65
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	63 e5       	ldi	r22, 0x53	; 83
     ab6:	70 e2       	ldi	r23, 0x20	; 32
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	91 e2       	ldi	r25, 0x21	; 33
     abc:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     ac0:	ff cf       	rjmp	.-2      	; 0xac0 <kernel_create_task+0x12c>

	c->stackSize = stackSize;
     ac2:	f5 01       	movw	r30, r10
     ac4:	07 83       	std	Z+7, r16	; 0x07
     ac6:	10 87       	std	Z+8, r17	; 0x08
#if DEBUG_TRACE
	c->stackTop = c->stack + stackSize;
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	08 0f       	add	r16, r24
     ace:	19 1f       	adc	r17, r25
     ad0:	00 8b       	std	Z+16, r16	; 0x10
     ad2:	11 8b       	std	Z+17, r17	; 0x11
#endif
	c->priority = priority;
     ad4:	d6 82       	std	Z+6, r13	; 0x06
	c->entryPoint = task;
     ad6:	c2 87       	std	Z+10, r28	; 0x0a
     ad8:	d3 87       	std	Z+11, r29	; 0x0b
	c->status = READY;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	81 87       	std	Z+9, r24	; 0x09
	strcpy(c->taskName, taskName);
     ade:	b7 01       	movw	r22, r14
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <strcpy>
	kernel_init_stack(c);
     ae8:	c5 01       	movw	r24, r10
     aea:	0e 94 35 04 	call	0x86a	; 0x86a <kernel_init_stack>

	queue_add_with_priority(&contextList[priority], c, 0);
     aee:	8d 2d       	mov	r24, r13
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	b5 01       	movw	r22, r10
     b00:	82 58       	subi	r24, 0x82	; 130
     b02:	9c 4c       	sbci	r25, 0xCC	; 204
     b04:	0e 94 87 07 	call	0xf0e	; 0xf0e <queue_add_with_priority>

	return c;
     b08:	8a 2d       	mov	r24, r10
     b0a:	9b 2d       	mov	r25, r11
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <kernel_create_task+0x17e>
	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		while (n != NULL) {
			c = (Context*) n->data;
			if (c->entryPoint == task)
				return NULL;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
	kernel_init_stack(c);

	queue_add_with_priority(&contextList[priority], c, 0);

	return c;
 }
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	08 95       	ret

00000b26 <kernel_remove_task>:
			}
		}
	}
 }

 void kernel_remove_task(Context *c) {
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
	Queue *q = &contextList[c->priority];
     b2c:	8e 81       	ldd	r24, Y+6	; 0x06
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
	queue_remove(q, (void*)c);
     b38:	be 01       	movw	r22, r28
     b3a:	82 58       	subi	r24, 0x82	; 130
     b3c:	9c 4c       	sbci	r25, 0xCC	; 204
     b3e:	0e 94 01 08 	call	0x1002	; 0x1002 <queue_remove>
	free(c->stack);
     b42:	88 81       	ld	r24, Y
     b44:	99 81       	ldd	r25, Y+1	; 0x01
     b46:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <free>
	free(c->taskName);
     b4a:	8c 81       	ldd	r24, Y+4	; 0x04
     b4c:	9d 81       	ldd	r25, Y+5	; 0x05
     b4e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <free>
	free(c);
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <free>
 }
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <kernel_swap_to_task>:

 void kernel_swap_to_task(Context *c) {
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
	sprintf(gStrBuf, "Switching to task %s\n\r", c->taskName);
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	8f 93       	push	r24
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	8f 93       	push	r24
     b6c:	8f e9       	ldi	r24, 0x9F	; 159
     b6e:	90 e2       	ldi	r25, 0x20	; 32
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	85 ef       	ldi	r24, 0xF5	; 245
     b76:	92 e3       	ldi	r25, 0x32	; 50
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <sprintf>
	serial_send_string(gStrBuf);
     b80:	85 ef       	ldi	r24, 0xF5	; 245
     b82:	92 e3       	ldi	r25, 0x32	; 50
     b84:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
	ptrStackP = &c->stackPointer;
     b88:	ce 01       	movw	r24, r28
     b8a:	02 96       	adiw	r24, 0x02	; 2
     b8c:	80 93 7c 33 	sts	0x337C, r24	; 0x80337c <ptrStackP>
     b90:	90 93 7d 33 	sts	0x337D, r25	; 0x80337d <ptrStackP+0x1>

	activeContext = c;
     b94:	c0 93 9e 33 	sts	0x339E, r28	; 0x80339e <activeContext>
     b98:	d0 93 9f 33 	sts	0x339F, r29	; 0x80339f <activeContext+0x1>
	activeContext->status = ACTIVE;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 87       	std	Y+9, r24	; 0x09
	timer_set(&c->timer, DEFAULT_BLOCK_DURATION);
     ba0:	46 e9       	ldi	r20, 0x96	; 150
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	ce 01       	movw	r24, r28
     baa:	0c 96       	adiw	r24, 0x0c	; 12
     bac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
 }
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <kernel_swap_task>:
	}

	kernel_swap_task();
 }

 void kernel_swap_task(void) {
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
	Context *c;
	bool needContextSwitch = false;
	Queue *q;
	QueueNode *n;

	if (activeContext != NULL) {
     bca:	a0 91 9e 33 	lds	r26, 0x339E	; 0x80339e <activeContext>
     bce:	b0 91 9f 33 	lds	r27, 0x339F	; 0x80339f <activeContext+0x1>
     bd2:	10 97       	sbiw	r26, 0x00	; 0
     bd4:	c9 f0       	breq	.+50     	; 0xc08 <kernel_swap_task+0x46>
		for (i = activeContext->priority - 1; i >= 0; i--) {
     bd6:	16 96       	adiw	r26, 0x06	; 6
     bd8:	9c 91       	ld	r25, X
     bda:	16 97       	sbiw	r26, 0x06	; 6
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	10 c0       	rjmp	.+32     	; 0xc00 <kernel_swap_task+0x3e>
			c = (Context*) contextList[i].head->data;
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	98 02       	muls	r25, r24
     be4:	f0 01       	movw	r30, r0
     be6:	11 24       	eor	r1, r1
     be8:	e2 58       	subi	r30, 0x82	; 130
     bea:	fc 4c       	sbci	r31, 0xCC	; 204
     bec:	01 90       	ld	r0, Z+
     bee:	f0 81       	ld	r31, Z
     bf0:	e0 2d       	mov	r30, r0
     bf2:	01 90       	ld	r0, Z+
     bf4:	f0 81       	ld	r31, Z
     bf6:	e0 2d       	mov	r30, r0
			if (c->status == READY) {
     bf8:	21 85       	ldd	r18, Z+9	; 0x09
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	39 f0       	breq	.+14     	; 0xc0c <kernel_swap_task+0x4a>
	bool needContextSwitch = false;
	Queue *q;
	QueueNode *n;

	if (activeContext != NULL) {
		for (i = activeContext->priority - 1; i >= 0; i--) {
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	99 23       	and	r25, r25
     c02:	74 f7       	brge	.-36     	; 0xbe0 <kernel_swap_task+0x1e>
 }

 void kernel_swap_task(void) {
	int8_t i;
	Context *c;
	bool needContextSwitch = false;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <kernel_swap_task+0x4c>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <kernel_swap_task+0x4c>

	if (activeContext != NULL) {
		for (i = activeContext->priority - 1; i >= 0; i--) {
			c = (Context*) contextList[i].head->data;
			if (c->status == READY) {
				needContextSwitch = true;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
		}
	}

	if (activeContext == NULL || needContextSwitch || activeContext->status == BLOCKED || timer_has_expired(&activeContext->timer)) {
     c0e:	10 97       	sbiw	r26, 0x00	; 0
     c10:	71 f0       	breq	.+28     	; 0xc2e <kernel_swap_task+0x6c>
     c12:	81 11       	cpse	r24, r1
     c14:	0c c0       	rjmp	.+24     	; 0xc2e <kernel_swap_task+0x6c>
     c16:	19 96       	adiw	r26, 0x09	; 9
     c18:	8c 91       	ld	r24, X
     c1a:	19 97       	sbiw	r26, 0x09	; 9
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	39 f0       	breq	.+14     	; 0xc2e <kernel_swap_task+0x6c>
     c20:	cd 01       	movw	r24, r26
     c22:	0c 96       	adiw	r24, 0x0c	; 12
     c24:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <kernel_swap_task+0x6c>
     c2c:	61 c0       	rjmp	.+194    	; 0xcf0 <kernel_swap_task+0x12e>
		if (activeContext != NULL) {
     c2e:	e0 91 9e 33 	lds	r30, 0x339E	; 0x80339e <activeContext>
     c32:	f0 91 9f 33 	lds	r31, 0x339F	; 0x80339f <activeContext+0x1>
     c36:	30 97       	sbiw	r30, 0x00	; 0
     c38:	51 f1       	breq	.+84     	; 0xc8e <kernel_swap_task+0xcc>
			q = &contextList[activeContext->priority];
     c3a:	c6 81       	ldd	r28, Z+6	; 0x06
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
     c3e:	cc 0f       	add	r28, r28
     c40:	dd 1f       	adc	r29, r29
     c42:	cc 0f       	add	r28, r28
     c44:	dd 1f       	adc	r29, r29
     c46:	c2 58       	subi	r28, 0x82	; 130
     c48:	dc 4c       	sbci	r29, 0xCC	; 204
			if (activeContext->status != BLOCKED) {
     c4a:	81 85       	ldd	r24, Z+9	; 0x09
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	51 f0       	breq	.+20     	; 0xc64 <kernel_swap_task+0xa2>
				activeContext->status = BLOCKED;
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	81 87       	std	Z+9, r24	; 0x09
				timer_set(&activeContext->timer, DEFAULT_BLOCK_DURATION);
     c54:	46 e9       	ldi	r20, 0x96	; 150
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cf 01       	movw	r24, r30
     c5e:	0c 96       	adiw	r24, 0x0c	; 12
     c60:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
			}
			n = queue_find_node(q, (void*)activeContext);
     c64:	60 91 9e 33 	lds	r22, 0x339E	; 0x80339e <activeContext>
     c68:	70 91 9f 33 	lds	r23, 0x339F	; 0x80339f <activeContext+0x1>
     c6c:	ce 01       	movw	r24, r28
     c6e:	0e 94 9e 08 	call	0x113c	; 0x113c <queue_find_node>
     c72:	8c 01       	movw	r16, r24
			n->priority = timer_time_remaining(&activeContext->timer);
     c74:	80 91 9e 33 	lds	r24, 0x339E	; 0x80339e <activeContext>
     c78:	90 91 9f 33 	lds	r25, 0x339F	; 0x80339f <activeContext+0x1>
     c7c:	0c 96       	adiw	r24, 0x0c	; 12
     c7e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <timer_time_remaining>
     c82:	f8 01       	movw	r30, r16
     c84:	64 83       	std	Z+4, r22	; 0x04
     c86:	75 83       	std	Z+5, r23	; 0x05
			queue_sort(q);
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 31 08 	call	0x1062	; 0x1062 <queue_sort>
		}

		for (i = 0; i < MAX_PRIORITY; i++) {
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <kernel_swap_task+0xfc>
			c = (Context*) contextList[i].head->data;
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	98 02       	muls	r25, r24
     c96:	f0 01       	movw	r30, r0
     c98:	11 24       	eor	r1, r1
     c9a:	e2 58       	subi	r30, 0x82	; 130
     c9c:	fc 4c       	sbci	r31, 0xCC	; 204
     c9e:	01 90       	ld	r0, Z+
     ca0:	f0 81       	ld	r31, Z
     ca2:	e0 2d       	mov	r30, r0
     ca4:	01 90       	ld	r0, Z+
     ca6:	f0 81       	ld	r31, Z
     ca8:	e0 2d       	mov	r30, r0
			if (c != NULL && c->status == READY) {
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	39 f0       	breq	.+14     	; 0xcbc <kernel_swap_task+0xfa>
     cae:	81 85       	ldd	r24, Z+9	; 0x09
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	21 f4       	brne	.+8      	; 0xcbc <kernel_swap_task+0xfa>
				kernel_swap_to_task(c);
     cb4:	cf 01       	movw	r24, r30
     cb6:	0e 94 af 05 	call	0xb5e	; 0xb5e <kernel_swap_to_task>
				return;
     cba:	1a c0       	rjmp	.+52     	; 0xcf0 <kernel_swap_task+0x12e>
			n = queue_find_node(q, (void*)activeContext);
			n->priority = timer_time_remaining(&activeContext->timer);
			queue_sort(q);
		}

		for (i = 0; i < MAX_PRIORITY; i++) {
     cbc:	9f 5f       	subi	r25, 0xFF	; 255
     cbe:	98 30       	cpi	r25, 0x08	; 8
     cc0:	44 f3       	brlt	.-48     	; 0xc92 <kernel_swap_task+0xd0>
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	13 c0       	rjmp	.+38     	; 0xcec <kernel_swap_task+0x12a>
				kernel_swap_to_task(c);
				return;
			}
		}
		for (i = 0; i < MAX_PRIORITY; i++) {
			c = (Context*) contextList[i].head->data;
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	98 02       	muls	r25, r24
     cca:	f0 01       	movw	r30, r0
     ccc:	11 24       	eor	r1, r1
     cce:	e2 58       	subi	r30, 0x82	; 130
     cd0:	fc 4c       	sbci	r31, 0xCC	; 204
     cd2:	01 90       	ld	r0, Z+
     cd4:	f0 81       	ld	r31, Z
     cd6:	e0 2d       	mov	r30, r0
     cd8:	20 81       	ld	r18, Z
     cda:	31 81       	ldd	r19, Z+1	; 0x01
			if (c != NULL) {
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	21 f0       	breq	.+8      	; 0xcea <kernel_swap_task+0x128>
				kernel_swap_to_task(c);
     ce2:	c9 01       	movw	r24, r18
     ce4:	0e 94 af 05 	call	0xb5e	; 0xb5e <kernel_swap_to_task>
				return;
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <kernel_swap_task+0x12e>
			if (c != NULL && c->status == READY) {
				kernel_swap_to_task(c);
				return;
			}
		}
		for (i = 0; i < MAX_PRIORITY; i++) {
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	98 30       	cpi	r25, 0x08	; 8
     cee:	5c f3       	brlt	.-42     	; 0xcc6 <kernel_swap_task+0x104>
				kernel_swap_to_task(c);
				return;
			}
		}
	}
 }
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <kernel_yield_from_task>:
	activeContext = c;
	activeContext->status = ACTIVE;
	timer_set(&c->timer, DEFAULT_BLOCK_DURATION);
 }

 void kernel_yield_from_task(uint16_t duration) {
     cfa:	ac 01       	movw	r20, r24
	activeContext->status = BLOCKED;
     cfc:	80 91 9e 33 	lds	r24, 0x339E	; 0x80339e <activeContext>
     d00:	90 91 9f 33 	lds	r25, 0x339F	; 0x80339f <activeContext+0x1>
     d04:	23 e0       	ldi	r18, 0x03	; 3
     d06:	fc 01       	movw	r30, r24
     d08:	21 87       	std	Z+9, r18	; 0x09
	timer_set(&activeContext->timer, duration);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0c 96       	adiw	r24, 0x0c	; 12
     d10:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
     d14:	08 95       	ret

00000d16 <kernel_check_stack_overflow>:
	//TCC0.CNT = TCC0.PER;
	//tick_trigger_interrupt();
 }

 void kernel_check_stack_overflow(void) {
	if (activeContext->stackPointer < activeContext->stack) {
     d16:	e0 91 9e 33 	lds	r30, 0x339E	; 0x80339e <activeContext>
     d1a:	f0 91 9f 33 	lds	r31, 0x339F	; 0x80339f <activeContext+0x1>
     d1e:	22 81       	ldd	r18, Z+2	; 0x02
     d20:	33 81       	ldd	r19, Z+3	; 0x03
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	28 17       	cp	r18, r24
     d28:	39 07       	cpc	r19, r25
     d2a:	c8 f4       	brcc	.+50     	; 0xd5e <kernel_check_stack_overflow+0x48>
		#if DEBUG_TRACE
			sprintf(gStrBuf, "Stack overflow detected in task %s!\n\r", activeContext->taskName);
     d2c:	85 81       	ldd	r24, Z+5	; 0x05
     d2e:	8f 93       	push	r24
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	8f 93       	push	r24
     d34:	86 eb       	ldi	r24, 0xB6	; 182
     d36:	90 e2       	ldi	r25, 0x20	; 32
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	85 ef       	ldi	r24, 0xF5	; 245
     d3e:	92 e3       	ldi	r25, 0x32	; 50
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <sprintf>
			serial_send_string(gStrBuf);
     d48:	85 ef       	ldi	r24, 0xF5	; 245
     d4a:	92 e3       	ldi	r25, 0x32	; 50
     d4c:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	ff cf       	rjmp	.-2      	; 0xd5c <kernel_check_stack_overflow+0x46>
     d5e:	08 95       	ret

00000d60 <kernel_process_all_tasks>:

	c->stack[c->stackSize - j] = 0x80; // global interrupt enable
	c->stackPointer = &c->stack[c->stackSize - j - 36]; // 37 pops in RESTORE_CONTEXT
 }

 void kernel_process_all_tasks(void) {
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
	uint8_t i, j;
	Context *c;
	QueueNode *n;

	if (scheduler.status != RUNNING)
     d70:	80 91 a0 33 	lds	r24, 0x33A0	; 0x8033a0 <scheduler>
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	a9 f5       	brne	.+106    	; 0xde2 <kernel_process_all_tasks+0x82>
		return;

	kernel_check_stack_overflow();
     d78:	0e 94 8b 06 	call	0xd16	; 0xd16 <kernel_check_stack_overflow>

	for (i = 0; i < MAX_PRIORITY; i++) {
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	2d c0       	rjmp	.+90     	; 0xdda <kernel_process_all_tasks+0x7a>
		n = contextList[i].head;
     d80:	c0 2e       	mov	r12, r16
     d82:	d1 2c       	mov	r13, r1
     d84:	f6 01       	movw	r30, r12
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	e2 58       	subi	r30, 0x82	; 130
     d90:	fc 4c       	sbci	r31, 0xCC	; 204
     d92:	c0 81       	ld	r28, Z
     d94:	d1 81       	ldd	r29, Z+1	; 0x01
		for (j = 0; j < contextList[i].size; j++) {
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	15 c0       	rjmp	.+42     	; 0xdc4 <kernel_process_all_tasks+0x64>
			c = (Context*) n->data;
     d9a:	e8 80       	ld	r14, Y
     d9c:	f9 80       	ldd	r15, Y+1	; 0x01
			if (c->status == BLOCKED) {
     d9e:	f7 01       	movw	r30, r14
     da0:	81 85       	ldd	r24, Z+9	; 0x09
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	59 f4       	brne	.+22     	; 0xdbc <kernel_process_all_tasks+0x5c>
				n->priority = timer_time_remaining(&c->timer);
     da6:	c7 01       	movw	r24, r14
     da8:	0c 96       	adiw	r24, 0x0c	; 12
     daa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <timer_time_remaining>
     dae:	6c 83       	std	Y+4, r22	; 0x04
     db0:	7d 83       	std	Y+5, r23	; 0x05
				if (n->priority == 0)
     db2:	67 2b       	or	r22, r23
     db4:	19 f4       	brne	.+6      	; 0xdbc <kernel_process_all_tasks+0x5c>
					c->status = READY;
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	f7 01       	movw	r30, r14
     dba:	81 87       	std	Z+9, r24	; 0x09
			}
			n = n->next;
     dbc:	0a 80       	ldd	r0, Y+2	; 0x02
     dbe:	db 81       	ldd	r29, Y+3	; 0x03
     dc0:	c0 2d       	mov	r28, r0

	kernel_check_stack_overflow();

	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		for (j = 0; j < contextList[i].size; j++) {
     dc2:	1f 5f       	subi	r17, 0xFF	; 255
     dc4:	f6 01       	movw	r30, r12
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e2 58       	subi	r30, 0x82	; 130
     dd0:	fc 4c       	sbci	r31, 0xCC	; 204
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	18 17       	cp	r17, r24
     dd6:	08 f3       	brcs	.-62     	; 0xd9a <kernel_process_all_tasks+0x3a>
	if (scheduler.status != RUNNING)
		return;

	kernel_check_stack_overflow();

	for (i = 0; i < MAX_PRIORITY; i++) {
     dd8:	0f 5f       	subi	r16, 0xFF	; 255
     dda:	08 30       	cpi	r16, 0x08	; 8
     ddc:	88 f2       	brcs	.-94     	; 0xd80 <kernel_process_all_tasks+0x20>
			}
			n = n->next;
		}
	}

	kernel_swap_task();
     dde:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <kernel_swap_task>
 }
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	08 95       	ret

00000df4 <kernel_find_highest_priority_ready_task>:

 Context* kernel_find_highest_priority_ready_task(void) {
	uint8_t i;
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <kernel_find_highest_priority_ready_task+0x2c>
		c = (Context*) contextList[i].head->data;
     df8:	e8 2f       	mov	r30, r24
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	e2 58       	subi	r30, 0x82	; 130
     e06:	fc 4c       	sbci	r31, 0xCC	; 204
     e08:	01 90       	ld	r0, Z+
     e0a:	f0 81       	ld	r31, Z
     e0c:	e0 2d       	mov	r30, r0
     e0e:	01 90       	ld	r0, Z+
     e10:	f0 81       	ld	r31, Z
     e12:	e0 2d       	mov	r30, r0
		if (c != NULL && c->status == READY)
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	19 f0       	breq	.+6      	; 0xe1e <kernel_find_highest_priority_ready_task+0x2a>
     e18:	91 85       	ldd	r25, Z+9	; 0x09
     e1a:	92 30       	cpi	r25, 0x02	; 2
     e1c:	31 f0       	breq	.+12     	; 0xe2a <kernel_find_highest_priority_ready_task+0x36>

 Context* kernel_find_highest_priority_ready_task(void) {
	uint8_t i;
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	50 f3       	brcs	.-44     	; 0xdf8 <kernel_find_highest_priority_ready_task+0x4>
		c = (Context*) contextList[i].head->data;
		if (c != NULL && c->status == READY)
			return c;
	}
	return NULL;
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 95       	ret
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
		c = (Context*) contextList[i].head->data;
		if (c != NULL && c->status == READY)
			return c;
     e2a:	8e 2f       	mov	r24, r30
     e2c:	9f 2f       	mov	r25, r31
	}
	return NULL;
 }
     e2e:	08 95       	ret

00000e30 <kernel_catch_task_return>:
		#endif
		while(1);
	}
 }

 void kernel_catch_task_return(void) {
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	Context *c;
	serial_send_string("\n\rTask caught in kernel catch function\n\r");
     e3a:	8c ed       	ldi	r24, 0xDC	; 220
     e3c:	90 e2       	ldi	r25, 0x20	; 32
     e3e:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
	AVR_ENTER_CRITICAL_REGION();
     e42:	8f b7       	in	r24, 0x3f	; 63
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	f8 94       	cli
	SPL = defaultStackP & 0xff;
     e48:	80 91 7a 33 	lds	r24, 0x337A	; 0x80337a <defaultStackP>
     e4c:	90 91 7b 33 	lds	r25, 0x337B	; 0x80337b <defaultStackP+0x1>
     e50:	8d bf       	out	0x3d, r24	; 61
	SPH = (defaultStackP >> 8) & 0xff;
     e52:	80 91 7a 33 	lds	r24, 0x337A	; 0x80337a <defaultStackP>
     e56:	90 91 7b 33 	lds	r25, 0x337B	; 0x80337b <defaultStackP+0x1>
     e5a:	9e bf       	out	0x3e, r25	; 62
	kernel_remove_task(activeContext);
     e5c:	80 91 9e 33 	lds	r24, 0x339E	; 0x80339e <activeContext>
     e60:	90 91 9f 33 	lds	r25, 0x339F	; 0x80339f <activeContext+0x1>
     e64:	0e 94 93 05 	call	0xb26	; 0xb26 <kernel_remove_task>
	AVR_LEAVE_CRITICAL_REGION();
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	8f bf       	out	0x3f, r24	; 63

	activeContext = NULL;
     e6c:	10 92 9e 33 	sts	0x339E, r1	; 0x80339e <activeContext>
     e70:	10 92 9f 33 	sts	0x339F, r1	; 0x80339f <activeContext+0x1>
	c = kernel_find_highest_priority_ready_task();
     e74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <kernel_find_highest_priority_ready_task>
	if (c != NULL)
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	19 f0       	breq	.+6      	; 0xe82 <kernel_catch_task_return+0x52>
		kernel_swap_to_task(c);
     e7c:	0e 94 af 05 	call	0xb5e	; 0xb5e <kernel_swap_to_task>
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <kernel_catch_task_return+0x5e>
	else
		ptrStackP = &defaultStackP;
     e82:	8a e7       	ldi	r24, 0x7A	; 122
     e84:	93 e3       	ldi	r25, 0x33	; 51
     e86:	80 93 7c 33 	sts	0x337C, r24	; 0x80337c <ptrStackP>
     e8a:	90 93 7d 33 	sts	0x337D, r25	; 0x80337d <ptrStackP+0x1>
	
	portRESTORE_CONTEXT();
     e8e:	a0 91 7c 33 	lds	r26, 0x337C	; 0x80337c <ptrStackP>
     e92:	b0 91 7d 33 	lds	r27, 0x337D	; 0x80337d <ptrStackP+0x1>
     e96:	0d 90       	ld	r0, X+
     e98:	1c 90       	ld	r1, X
     e9a:	0d be       	out	0x3d, r0	; 61
     e9c:	1e be       	out	0x3e, r1	; 62
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	cf 90       	pop	r12
     ec6:	bf 90       	pop	r11
     ec8:	af 90       	pop	r10
     eca:	9f 90       	pop	r9
     ecc:	8f 90       	pop	r8
     ece:	7f 90       	pop	r7
     ed0:	6f 90       	pop	r6
     ed2:	5f 90       	pop	r5
     ed4:	4f 90       	pop	r4
     ed6:	3f 90       	pop	r3
     ed8:	2f 90       	pop	r2
     eda:	1f 90       	pop	r1
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	0a be       	out	0x3a, r0	; 58
     ee4:	0f 90       	pop	r0
     ee6:	09 be       	out	0x39, r0	; 57
     ee8:	0f 90       	pop	r0
     eea:	08 be       	out	0x38, r0	; 56
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
	asm volatile ("ret \n\t"); // need to ignore the function's default return pops
     ef2:	08 95       	ret
 }
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <kernel_enable_scheduler>:
	}
	return NULL;
 }

 void kernel_enable_scheduler(void) {
	scheduler.status = RUNNING;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 a0 33 	sts	0x33A0, r24	; 0x8033a0 <scheduler>
     f02:	08 95       	ret

00000f04 <kernel_disable_scheduler>:
 }

 void kernel_disable_scheduler(void) {
	scheduler.status = STOPPED;
     f04:	10 92 a0 33 	sts	0x33A0, r1	; 0x8033a0 <scheduler>
     f08:	08 95       	ret

00000f0a <kernel_no_return>:
 }

 void kernel_no_return(void) {
	asm volatile ("rjmp .-2 \n\t");
     f0a:	ff cf       	rjmp	.-2      	; 0xf0a <kernel_no_return>
     f0c:	08 95       	ret

00000f0e <queue_add_with_priority>:
	}
}

 void* queue_peek(Queue *queue) {
	 return queue->head->data;
 }
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	7c 01       	movw	r14, r24
     f20:	6b 01       	movw	r12, r22
     f22:	ea 01       	movw	r28, r20
     f24:	89 2b       	or	r24, r25
     f26:	59 f4       	brne	.+22     	; 0xf3e <queue_add_with_priority+0x30>
     f28:	28 e1       	ldi	r18, 0x18	; 24
     f2a:	31 e2       	ldi	r19, 0x21	; 33
     f2c:	42 e1       	ldi	r20, 0x12	; 18
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	66 e2       	ldi	r22, 0x26	; 38
     f32:	71 e2       	ldi	r23, 0x21	; 33
     f34:	8f e4       	ldi	r24, 0x4F	; 79
     f36:	91 e2       	ldi	r25, 0x21	; 33
     f38:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     f3c:	ff cf       	rjmp	.-2      	; 0xf3c <queue_add_with_priority+0x2e>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	d7 01       	movw	r26, r14
     f42:	13 96       	adiw	r26, 0x03	; 3
     f44:	8c 93       	st	X, r24
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 39 01 	call	0x272	; 0x272 <internal_malloc>
     f4e:	8c 01       	movw	r16, r24
     f50:	89 2b       	or	r24, r25
     f52:	59 f4       	brne	.+22     	; 0xf6a <queue_add_with_priority+0x5c>
     f54:	23 e3       	ldi	r18, 0x33	; 51
     f56:	31 e2       	ldi	r19, 0x21	; 33
     f58:	45 e1       	ldi	r20, 0x15	; 21
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	66 e2       	ldi	r22, 0x26	; 38
     f5e:	71 e2       	ldi	r23, 0x21	; 33
     f60:	8f e4       	ldi	r24, 0x4F	; 79
     f62:	91 e2       	ldi	r25, 0x21	; 33
     f64:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     f68:	ff cf       	rjmp	.-2      	; 0xf68 <queue_add_with_priority+0x5a>
     f6a:	86 e0       	ldi	r24, 0x06	; 6
     f6c:	f8 01       	movw	r30, r16
     f6e:	11 92       	st	Z+, r1
     f70:	8a 95       	dec	r24
     f72:	e9 f7       	brne	.-6      	; 0xf6e <queue_add_with_priority+0x60>
     f74:	d8 01       	movw	r26, r16
     f76:	cd 92       	st	X+, r12
     f78:	dc 92       	st	X, r13
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	14 96       	adiw	r26, 0x04	; 4
     f7e:	cd 93       	st	X+, r28
     f80:	dc 93       	st	X, r29
     f82:	15 97       	sbiw	r26, 0x05	; 5
     f84:	f7 01       	movw	r30, r14
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	82 83       	std	Z+2, r24	; 0x02
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	59 f4       	brne	.+22     	; 0xfa6 <queue_add_with_priority+0x98>
     f90:	2d e3       	ldi	r18, 0x3D	; 61
     f92:	31 e2       	ldi	r19, 0x21	; 33
     f94:	4a e1       	ldi	r20, 0x1A	; 26
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	66 e2       	ldi	r22, 0x26	; 38
     f9a:	71 e2       	ldi	r23, 0x21	; 33
     f9c:	8f e4       	ldi	r24, 0x4F	; 79
     f9e:	91 e2       	ldi	r25, 0x21	; 33
     fa0:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
     fa4:	ff cf       	rjmp	.-2      	; 0xfa4 <queue_add_with_priority+0x96>
     fa6:	d7 01       	movw	r26, r14
     fa8:	ed 91       	ld	r30, X+
     faa:	fc 91       	ld	r31, X
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	29 f0       	breq	.+10     	; 0xfba <queue_add_with_priority+0xac>
     fb0:	84 81       	ldd	r24, Z+4	; 0x04
     fb2:	95 81       	ldd	r25, Z+5	; 0x05
     fb4:	8c 17       	cp	r24, r28
     fb6:	9d 07       	cpc	r25, r29
     fb8:	60 f0       	brcs	.+24     	; 0xfd2 <queue_add_with_priority+0xc4>
     fba:	e8 01       	movw	r28, r16
     fbc:	ea 83       	std	Y+2, r30	; 0x02
     fbe:	fb 83       	std	Y+3, r31	; 0x03
     fc0:	f7 01       	movw	r30, r14
     fc2:	00 83       	st	Z, r16
     fc4:	11 83       	std	Z+1, r17	; 0x01
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <queue_add_with_priority+0xe2>
     fc8:	df 01       	movw	r26, r30
     fca:	02 80       	ldd	r0, Z+2	; 0x02
     fcc:	f3 81       	ldd	r31, Z+3	; 0x03
     fce:	e0 2d       	mov	r30, r0
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <queue_add_with_priority+0xc6>
     fd2:	df 01       	movw	r26, r30
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <queue_add_with_priority+0xd4>
     fd8:	84 81       	ldd	r24, Z+4	; 0x04
     fda:	95 81       	ldd	r25, Z+5	; 0x05
     fdc:	8c 17       	cp	r24, r28
     fde:	9d 07       	cpc	r25, r29
     fe0:	98 f3       	brcs	.-26     	; 0xfc8 <queue_add_with_priority+0xba>
     fe2:	e8 01       	movw	r28, r16
     fe4:	ea 83       	std	Y+2, r30	; 0x02
     fe6:	fb 83       	std	Y+3, r31	; 0x03
     fe8:	12 96       	adiw	r26, 0x02	; 2
     fea:	0d 93       	st	X+, r16
     fec:	1c 93       	st	X, r17
     fee:	13 97       	sbiw	r26, 0x03	; 3
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	08 95       	ret

00001002 <queue_remove>:
    1002:	dc 01       	movw	r26, r24
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	9c 91       	ld	r25, X
    1008:	12 97       	sbiw	r26, 0x02	; 2
    100a:	99 23       	and	r25, r25
    100c:	49 f1       	breq	.+82     	; 0x1060 <queue_remove+0x5e>
    100e:	91 50       	subi	r25, 0x01	; 1
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	9c 93       	st	X, r25
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	ed 91       	ld	r30, X+
    1018:	fc 91       	ld	r31, X
    101a:	11 97       	sbiw	r26, 0x01	; 1
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	86 17       	cp	r24, r22
    1022:	97 07       	cpc	r25, r23
    1024:	51 f4       	brne	.+20     	; 0x103a <queue_remove+0x38>
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	8d 93       	st	X+, r24
    102c:	9c 93       	st	X, r25
    102e:	15 c0       	rjmp	.+42     	; 0x105a <queue_remove+0x58>
    1030:	df 01       	movw	r26, r30
    1032:	02 80       	ldd	r0, Z+2	; 0x02
    1034:	f3 81       	ldd	r31, Z+3	; 0x03
    1036:	e0 2d       	mov	r30, r0
    1038:	01 c0       	rjmp	.+2      	; 0x103c <queue_remove+0x3a>
    103a:	df 01       	movw	r26, r30
    103c:	30 97       	sbiw	r30, 0x00	; 0
    103e:	29 f0       	breq	.+10     	; 0x104a <queue_remove+0x48>
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	68 17       	cp	r22, r24
    1046:	79 07       	cpc	r23, r25
    1048:	99 f7       	brne	.-26     	; 0x1030 <queue_remove+0x2e>
    104a:	30 97       	sbiw	r30, 0x00	; 0
    104c:	49 f0       	breq	.+18     	; 0x1060 <queue_remove+0x5e>
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8d 93       	st	X+, r24
    1056:	9c 93       	st	X, r25
    1058:	13 97       	sbiw	r26, 0x03	; 3
    105a:	cf 01       	movw	r24, r30
    105c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <free>
    1060:	08 95       	ret

00001062 <queue_sort>:
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	dc 01       	movw	r26, r24
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	2c 91       	ld	r18, X
    1070:	12 97       	sbiw	r26, 0x02	; 2
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	08 f4       	brcc	.+2      	; 0x1078 <queue_sort+0x16>
    1076:	5d c0       	rjmp	.+186    	; 0x1132 <queue_sort+0xd0>
    1078:	0d 90       	ld	r0, X+
    107a:	bc 91       	ld	r27, X
    107c:	a0 2d       	mov	r26, r0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	51 c0       	rjmp	.+162    	; 0x1126 <queue_sort+0xc4>
    1084:	04 81       	ldd	r16, Z+4	; 0x04
    1086:	15 81       	ldd	r17, Z+5	; 0x05
    1088:	c2 81       	ldd	r28, Z+2	; 0x02
    108a:	d3 81       	ldd	r29, Z+3	; 0x03
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	20 17       	cp	r18, r16
    1092:	31 07       	cpc	r19, r17
    1094:	80 f5       	brcc	.+96     	; 0x10f6 <queue_sort+0x94>
    1096:	41 15       	cp	r20, r1
    1098:	51 05       	cpc	r21, r1
    109a:	c1 f4       	brne	.+48     	; 0x10cc <queue_sort+0x6a>
    109c:	dc 01       	movw	r26, r24
    109e:	0d 91       	ld	r16, X+
    10a0:	1c 91       	ld	r17, X
    10a2:	11 97       	sbiw	r26, 0x01	; 1
    10a4:	cd 93       	st	X+, r28
    10a6:	dc 93       	st	X, r29
    10a8:	11 97       	sbiw	r26, 0x01	; 1
    10aa:	02 80       	ldd	r0, Z+2	; 0x02
    10ac:	f3 81       	ldd	r31, Z+3	; 0x03
    10ae:	e0 2d       	mov	r30, r0
    10b0:	22 81       	ldd	r18, Z+2	; 0x02
    10b2:	33 81       	ldd	r19, Z+3	; 0x03
    10b4:	e8 01       	movw	r28, r16
    10b6:	2a 83       	std	Y+2, r18	; 0x02
    10b8:	3b 83       	std	Y+3, r19	; 0x03
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	02 83       	std	Z+2, r16	; 0x02
    10c2:	13 83       	std	Z+3, r17	; 0x03
    10c4:	0d 90       	ld	r0, X+
    10c6:	bc 91       	ld	r27, X
    10c8:	a0 2d       	mov	r26, r0
    10ca:	16 c0       	rjmp	.+44     	; 0x10f8 <queue_sort+0x96>
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	cd 93       	st	X+, r28
    10d0:	dc 93       	st	X, r29
    10d2:	13 97       	sbiw	r26, 0x03	; 3
    10d4:	c2 81       	ldd	r28, Z+2	; 0x02
    10d6:	d3 81       	ldd	r29, Z+3	; 0x03
    10d8:	2a 81       	ldd	r18, Y+2	; 0x02
    10da:	3b 81       	ldd	r19, Y+3	; 0x03
    10dc:	22 83       	std	Z+2, r18	; 0x02
    10de:	33 83       	std	Z+3, r19	; 0x03
    10e0:	12 96       	adiw	r26, 0x02	; 2
    10e2:	cd 91       	ld	r28, X+
    10e4:	dc 91       	ld	r29, X
    10e6:	13 97       	sbiw	r26, 0x03	; 3
    10e8:	ea 83       	std	Y+2, r30	; 0x02
    10ea:	fb 83       	std	Y+3, r31	; 0x03
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	0d 90       	ld	r0, X+
    10f0:	bc 91       	ld	r27, X
    10f2:	a0 2d       	mov	r26, r0
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <queue_sort+0x96>
    10f6:	df 01       	movw	r26, r30
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	13 97       	sbiw	r26, 0x03	; 3
    1100:	4f 5f       	subi	r20, 0xFF	; 255
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	03 c0       	rjmp	.+6      	; 0x110c <queue_sort+0xaa>
    1106:	fd 01       	movw	r30, r26
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	ec 01       	movw	r28, r24
    110e:	2a 81       	ldd	r18, Y+2	; 0x02
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	31 09       	sbc	r19, r1
    1116:	42 17       	cp	r20, r18
    1118:	53 07       	cpc	r21, r19
    111a:	0c f4       	brge	.+2      	; 0x111e <queue_sort+0xbc>
    111c:	b3 cf       	rjmp	.-154    	; 0x1084 <queue_sort+0x22>
    111e:	a8 81       	ld	r26, Y
    1120:	b9 81       	ldd	r27, Y+1	; 0x01
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	fc 01       	movw	r30, r24
    1128:	22 81       	ldd	r18, Z+2	; 0x02
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	62 17       	cp	r22, r18
    112e:	73 07       	cpc	r23, r19
    1130:	54 f3       	brlt	.-44     	; 0x1106 <queue_sort+0xa4>
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <queue_find_node>:

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;
    113c:	dc 01       	movw	r26, r24
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X

	while (n != NULL && n->data != data)
    1142:	03 c0       	rjmp	.+6      	; 0x114a <queue_find_node+0xe>
		n = n->next;
    1144:	02 80       	ldd	r0, Z+2	; 0x02
    1146:	f3 81       	ldd	r31, Z+3	; 0x03
    1148:	e0 2d       	mov	r30, r0
 }

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;

	while (n != NULL && n->data != data)
    114a:	30 97       	sbiw	r30, 0x00	; 0
    114c:	29 f0       	breq	.+10     	; 0x1158 <queue_find_node+0x1c>
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	86 17       	cp	r24, r22
    1154:	97 07       	cpc	r25, r23
    1156:	b1 f7       	brne	.-20     	; 0x1144 <queue_find_node+0x8>
		n = n->next;

	return n;
 }
    1158:	cf 01       	movw	r24, r30
    115a:	08 95       	ret

0000115c <bios_interrupt_init>:
	bios_interrupt_init();
	serial_init();
}

void bios_interrupt_init(void) {
	PMIC.CTRL = PMIC_LOLVLEX_bm;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1162:	78 94       	sei
    1164:	08 95       	ret

00001166 <bios_io_ports_init>:
}

void bios_io_ports_init(void) {
    1166:	ef 92       	push	r14
    1168:	0f 93       	push	r16
	PORT_ConfigurePins( &PORTB,
    116a:	e1 2c       	mov	r14, r1
    116c:	08 e1       	ldi	r16, 0x18	; 24
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	60 e4       	ldi	r22, 0x40	; 64
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	96 e0       	ldi	r25, 0x06	; 6
    1178:	0e 94 52 09 	call	0x12a4	; 0x12a4 <PORT_ConfigurePins>
	PIN6_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTB, PIN6_bm);
    117c:	e0 e2       	ldi	r30, 0x20	; 32
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	80 83       	st	Z, r24
	(&PORTB)->OUT |= PIN6_bm;
    1184:	84 81       	ldd	r24, Z+4	; 0x04
    1186:	80 64       	ori	r24, 0x40	; 64
    1188:	84 83       	std	Z+4, r24	; 0x04

	PORT_ConfigurePins( &PORTC,
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	68 e0       	ldi	r22, 0x08	; 8
    1192:	80 e4       	ldi	r24, 0x40	; 64
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	0e 94 52 09 	call	0x12a4	; 0x12a4 <PORT_ConfigurePins>
	PIN3_bm,	// configure pin0, pin1, pin3, pin4, pin5, pin7.
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_TOTEM_gc,				// Totempole
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTC, PIN3_bm);
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>

	PORT_ConfigurePins( &PORTF,
    11a0:	08 e1       	ldi	r16, 0x18	; 24
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	64 e0       	ldi	r22, 0x04	; 4
    11a8:	80 ea       	ldi	r24, 0xA0	; 160
    11aa:	96 e0       	ldi	r25, 0x06	; 6
    11ac:	0e 94 52 09 	call	0x12a4	; 0x12a4 <PORT_ConfigurePins>
	PIN2_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTF, PIN2_bm);
    11b0:	e0 ea       	ldi	r30, 0xA0	; 160
    11b2:	f6 e0       	ldi	r31, 0x06	; 6
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	80 83       	st	Z, r24
	(&PORTF)->OUT |= PIN2_bm;
    11b8:	84 81       	ldd	r24, Z+4	; 0x04
    11ba:	84 60       	ori	r24, 0x04	; 4
    11bc:	84 83       	std	Z+4, r24	; 0x04
}
    11be:	0f 91       	pop	r16
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret

000011c4 <bios_clock_normal>:

void bios_clock_normal( void ) {
	CLKSYS_Enable( OSC_RC32MEN_bm | OSC_RC32KEN_bm);						// enabled RC32KHz internal oscillator as source for 32MHz calibrated source.
    11c4:	e0 e5       	ldi	r30, 0x50	; 80
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	86 60       	ori	r24, 0x06	; 6
    11cc:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );		//The output cpu and peripheral clocks are the same as the original source.
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 1b 09 	call	0x1236	; 0x1236 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );					// Wait for RC 32KHz stabilized
    11d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    11da:	82 ff       	sbrs	r24, 2
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <bios_clock_normal+0x12>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    11de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    11e2:	81 ff       	sbrs	r24, 1
    11e4:	fc cf       	rjmp	.-8      	; 0x11de <bios_clock_normal+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	0e 94 21 09 	call	0x1242	; 0x1242 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_AutoCalibration_Enable( OSC_RC32MCREF_bm, 0 );				// Enabled CLKSYS auto calibration in order to work with Rev.I ATxmega192D3 chip.
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	0e 94 36 09 	call	0x126c	; 0x126c <CLKSYS_AutoCalibration_Enable>
    11f4:	08 95       	ret

000011f6 <bios_init>:
void bios_io_ports_init(void);
void bios_timer_init(void);
void bios_interrupt_init(void);

void bios_init(void) {
	bios_io_ports_init();
    11f6:	0e 94 b3 08 	call	0x1166	; 0x1166 <bios_io_ports_init>
	bios_clock_normal();
    11fa:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <bios_clock_normal>
	tick_init();
    11fe:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <tick_init>
	bios_interrupt_init();
    1202:	0e 94 ae 08 	call	0x115c	; 0x115c <bios_interrupt_init>
	serial_init();
    1206:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_init>
    120a:	08 95       	ret

0000120c <CCPWrite>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    120c:	0f 93       	push	r16
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	1f 92       	push	r1
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	2f b7       	in	r18, 0x3f	; 63
    121a:	29 83       	std	Y+1, r18	; 0x01
    121c:	f8 94       	cli
    121e:	1b be       	out	0x3b, r1	; 59
    1220:	fc 01       	movw	r30, r24
    1222:	08 ed       	ldi	r16, 0xD8	; 216
    1224:	04 bf       	out	0x34, r16	; 52
    1226:	60 83       	st	Z, r22
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	8f bf       	out	0x3f, r24	; 63
    122c:	0f 90       	pop	r0
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <CLKSYS_Prescalers_Config>:
    1236:	68 2b       	or	r22, r24
    1238:	81 e4       	ldi	r24, 0x41	; 65
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 06 09 	call	0x120c	; 0x120c <CCPWrite>
    1240:	08 95       	ret

00001242 <CLKSYS_Main_ClockSource_Select>:
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	c8 2f       	mov	r28, r24
    124a:	00 e4       	ldi	r16, 0x40	; 64
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	f8 01       	movw	r30, r16
    1250:	60 81       	ld	r22, Z
    1252:	68 7f       	andi	r22, 0xF8	; 248
    1254:	68 2b       	or	r22, r24
    1256:	80 e4       	ldi	r24, 0x40	; 64
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 06 09 	call	0x120c	; 0x120c <CCPWrite>
    125e:	f8 01       	movw	r30, r16
    1260:	80 81       	ld	r24, Z
    1262:	8c 23       	and	r24, r28
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    126c:	20 91 56 00 	lds	r18, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    1270:	38 2f       	mov	r19, r24
    1272:	98 2f       	mov	r25, r24
    1274:	90 95       	com	r25
    1276:	92 23       	and	r25, r18
    1278:	61 11       	cpse	r22, r1
    127a:	01 c0       	rjmp	.+2      	; 0x127e <CLKSYS_AutoCalibration_Enable+0x12>
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	93 2b       	or	r25, r19
    1280:	90 93 56 00 	sts	0x0056, r25	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	31 f4       	brne	.+12     	; 0x1294 <CLKSYS_AutoCalibration_Enable+0x28>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    1288:	e8 e6       	ldi	r30, 0x68	; 104
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	80 83       	st	Z, r24
    1292:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	29 f4       	brne	.+10     	; 0x12a2 <CLKSYS_AutoCalibration_Enable+0x36>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1298:	e0 e6       	ldi	r30, 0x60	; 96
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
    12a2:	08 95       	ret

000012a4 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    12a4:	ef 92       	push	r14
    12a6:	0f 93       	push	r16
    12a8:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    12aa:	0e 29       	or	r16, r14
    12ac:	44 23       	and	r20, r20
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <PORT_ConfigurePins+0x10>
    12b0:	80 e8       	ldi	r24, 0x80	; 128
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <PORT_ConfigurePins+0x12>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 2b       	or	r16, r24
    12b8:	22 23       	and	r18, r18
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <PORT_ConfigurePins+0x1c>
    12bc:	80 e4       	ldi	r24, 0x40	; 64
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <PORT_ConfigurePins+0x1e>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    12c4:	9f b7       	in	r25, 0x3f	; 63

	cli();
    12c6:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    12c8:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
    12cc:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
    12ce:	9f bf       	out	0x3f, r25	; 63
}
    12d0:	0f 91       	pop	r16
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <serial_init>:

USART_data_t 	usart0_data; // RD1/TD1

void serial_init(void) {
	// PC3 (TXD0) as output.
	PORTC.DIRSET   = PIN3_bm;
    12d6:	e0 e4       	ldi	r30, 0x40	; 64
    12d8:	f6 e0       	ldi	r31, 0x06	; 6
    12da:	88 e0       	ldi	r24, 0x08	; 8
    12dc:	81 83       	std	Z+1, r24	; 0x01
	// PC2 (RXD0) as input.
	PORTC.DIRCLR   = PIN2_bm;
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	82 83       	std	Z+2, r24	; 0x02

	USART_InterruptDriver_Initialize( &usart0_data, &usart0, USART_DREINTLVL_LO_gc);
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	60 ea       	ldi	r22, 0xA0	; 160
    12e6:	78 e0       	ldi	r23, 0x08	; 8
    12e8:	81 ea       	ldi	r24, 0xA1	; 161
    12ea:	93 e3       	ldi	r25, 0x33	; 51
    12ec:	0e 94 05 0a 	call	0x140a	; 0x140a <USART_InterruptDriver_Initialize>

	// 8 Data bits, No Parity, 2 Stop bits.
	USART_Format_Set( usart0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    12f0:	e0 91 a1 33 	lds	r30, 0x33A1	; 0x8033a1 <usart0_data>
    12f4:	f0 91 a2 33 	lds	r31, 0x33A2	; 0x8033a2 <usart0_data+0x1>
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	85 83       	std	Z+5, r24	; 0x05

	// Enable RXC interrupt.
	USART_RxdInterruptLevel_Set( usart0_data.usart, USART_RXCINTLVL_LO_gc);
    12fc:	83 81       	ldd	r24, Z+3	; 0x03
    12fe:	8f 7c       	andi	r24, 0xCF	; 207
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	83 83       	std	Z+3, r24	; 0x03
	//USART_TxdInterruptLevel_Set( usart0_data.usart, USART_TXCINTLVL_LO_gc);

	USART_Baudrate_Set( &usart0, SR_BAUD_9600_V , 0 );
    1304:	a0 ea       	ldi	r26, 0xA0	; 160
    1306:	b8 e0       	ldi	r27, 0x08	; 8
    1308:	8f ec       	ldi	r24, 0xCF	; 207
    130a:	16 96       	adiw	r26, 0x06	; 6
    130c:	8c 93       	st	X, r24
    130e:	16 97       	sbiw	r26, 0x06	; 6
    1310:	17 96       	adiw	r26, 0x07	; 7
    1312:	1c 92       	st	X, r1

	// Enable both RX and TX.
	USART_Rx_Enable( usart0_data.usart );
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	80 61       	ori	r24, 0x10	; 16
    1318:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable( usart0_data.usart );
    131a:	84 81       	ldd	r24, Z+4	; 0x04
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	84 83       	std	Z+4, r24	; 0x04
    1320:	08 95       	ret

00001322 <serial_send_string>:

	/* Enable PMIC interrupt level low. */
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < strlen(str); i++)
    132c:	c0 e0       	ldi	r28, 0x00	; 0
    132e:	d0 e0       	ldi	r29, 0x00	; 0
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <serial_send_string+0x22>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
    1332:	f8 01       	movw	r30, r16
    1334:	ec 0f       	add	r30, r28
    1336:	fd 1f       	adc	r31, r29
    1338:	60 81       	ld	r22, Z
    133a:	81 ea       	ldi	r24, 0xA1	; 161
    133c:	93 e3       	ldi	r25, 0x33	; 51
    133e:	0e 94 1f 0a 	call	0x143e	; 0x143e <USART_TXBuffer_PutByte>
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
	int i;
	for (i = 0; i < strlen(str); i++)
    1342:	21 96       	adiw	r28, 0x01	; 1
    1344:	f8 01       	movw	r30, r16
    1346:	01 90       	ld	r0, Z+
    1348:	00 20       	and	r0, r0
    134a:	e9 f7       	brne	.-6      	; 0x1346 <serial_send_string+0x24>
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	e0 1b       	sub	r30, r16
    1350:	f1 0b       	sbc	r31, r17
    1352:	ce 17       	cp	r28, r30
    1354:	df 07       	cpc	r29, r31
    1356:	68 f3       	brcs	.-38     	; 0x1332 <serial_send_string+0x10>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <__vector_25>:

void USARTC0_RXC_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_RXC_vect (void)
{
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	0b b6       	in	r0, 0x3b	; 59
    136e:	0f 92       	push	r0
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
	USART_RXComplete( &usart0_data );
    1388:	81 ea       	ldi	r24, 0xA1	; 161
    138a:	93 e3       	ldi	r25, 0x33	; 51
    138c:	0e 94 3f 0a 	call	0x147e	; 0x147e <USART_RXComplete>
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <__vector_26>:

void USARTC0_DRE_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_DRE_vect (void)
{
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	0b b6       	in	r0, 0x3b	; 59
    13c2:	0f 92       	push	r0
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
	USART_DataRegEmpty( &usart0_data );
    13dc:	81 ea       	ldi	r24, 0xA1	; 161
    13de:	93 e3       	ldi	r25, 0x33	; 51
    13e0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <USART_DataRegEmpty>
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0b be       	out	0x3b, r0	; 59
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
    140a:	fc 01       	movw	r30, r24
    140c:	60 83       	st	Z, r22
    140e:	71 83       	std	Z+1, r23	; 0x01
    1410:	42 83       	std	Z+2, r20	; 0x02
    1412:	ec 5f       	subi	r30, 0xFC	; 252
    1414:	fd 4f       	sbci	r31, 0xFD	; 253
    1416:	10 82       	st	Z, r1
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	10 82       	st	Z, r1
    141c:	33 96       	adiw	r30, 0x03	; 3
    141e:	10 82       	st	Z, r1
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	10 82       	st	Z, r1
    1424:	08 95       	ret

00001426 <USART_TXBuffer_FreeSpace>:
    1426:	fc 01       	movw	r30, r24
    1428:	eb 5f       	subi	r30, 0xFB	; 251
    142a:	fd 4f       	sbci	r31, 0xFD	; 253
    142c:	20 81       	ld	r18, Z
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	90 81       	ld	r25, Z
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	29 13       	cpse	r18, r25
    1438:	01 c0       	rjmp	.+2      	; 0x143c <USART_TXBuffer_FreeSpace+0x16>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	08 95       	ret

0000143e <USART_TXBuffer_PutByte>:
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	ec 01       	movw	r28, r24
    1446:	16 2f       	mov	r17, r22
    1448:	0e 94 13 0a 	call	0x1426	; 0x1426 <USART_TXBuffer_FreeSpace>
    144c:	88 23       	and	r24, r24
    144e:	99 f0       	breq	.+38     	; 0x1476 <USART_TXBuffer_PutByte+0x38>
    1450:	de 01       	movw	r26, r28
    1452:	ab 5f       	subi	r26, 0xFB	; 251
    1454:	bd 4f       	sbci	r27, 0xFD	; 253
    1456:	9c 91       	ld	r25, X
    1458:	fe 01       	movw	r30, r28
    145a:	e9 0f       	add	r30, r25
    145c:	f1 1d       	adc	r31, r1
    145e:	ed 5f       	subi	r30, 0xFD	; 253
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
    1462:	10 83       	st	Z, r17
    1464:	9f 5f       	subi	r25, 0xFF	; 255
    1466:	9c 93       	st	X, r25
    1468:	e8 81       	ld	r30, Y
    146a:	f9 81       	ldd	r31, Y+1	; 0x01
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	2a 81       	ldd	r18, Y+2	; 0x02
    1470:	9c 7f       	andi	r25, 0xFC	; 252
    1472:	92 2b       	or	r25, r18
    1474:	93 83       	std	Z+3, r25	; 0x03
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	08 95       	ret

0000147e <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    147e:	fc 01       	movw	r30, r24
    1480:	ed 5f       	subi	r30, 0xFD	; 253
    1482:	fd 4f       	sbci	r31, 0xFD	; 253
    1484:	20 81       	ld	r18, Z
    1486:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    148c:	dc 01       	movw	r26, r24
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    1496:	23 17       	cp	r18, r19
    1498:	59 f0       	breq	.+22     	; 0x14b0 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    149a:	fc 01       	movw	r30, r24
    149c:	ed 5f       	subi	r30, 0xFD	; 253
    149e:	fd 4f       	sbci	r31, 0xFD	; 253
    14a0:	30 81       	ld	r19, Z
    14a2:	a3 0f       	add	r26, r19
    14a4:	b1 1d       	adc	r27, r1
    14a6:	13 96       	adiw	r26, 0x03	; 3
    14a8:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    14aa:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    14b2:	08 95       	ret

000014b4 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    14b8:	fc 01       	movw	r30, r24
    14ba:	ea 5f       	subi	r30, 0xFA	; 250
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	20 81       	ld	r18, Z
    14c4:	32 13       	cpse	r19, r18
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    14c8:	dc 01       	movw	r26, r24
    14ca:	ed 91       	ld	r30, X+
    14cc:	fc 91       	ld	r31, X
    14ce:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    14d0:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    14d2:	83 83       	std	Z+3, r24	; 0x03
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    14d6:	fc 01       	movw	r30, r24
    14d8:	ea 5f       	subi	r30, 0xFA	; 250
    14da:	fd 4f       	sbci	r31, 0xFD	; 253
    14dc:	20 81       	ld	r18, Z
    14de:	dc 01       	movw	r26, r24
    14e0:	a2 0f       	add	r26, r18
    14e2:	b1 1d       	adc	r27, r1
    14e4:	ad 5f       	subi	r26, 0xFD	; 253
    14e6:	be 4f       	sbci	r27, 0xFE	; 254
    14e8:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    14ea:	ec 01       	movw	r28, r24
    14ec:	a8 81       	ld	r26, Y
    14ee:	b9 81       	ldd	r27, Y+1	; 0x01
    14f0:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	80 83       	st	Z, r24
	}
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <main>:
#include "unittest.h"
#endif

int main(void)
{
	bios_init();
    14fe:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <bios_init>
	kernel_init();
    1502:	0e 94 2e 04 	call	0x85c	; 0x85c <kernel_init>
	#if TEST_MODULES
		do_tests();
    1506:	0e 94 c4 0c 	call	0x1988	; 0x1988 <do_tests>
	#endif
	kernel_no_return();
    150a:	0e 94 85 07 	call	0xf0a	; 0xf0a <kernel_no_return>
}
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	08 95       	ret

00001514 <timer_set>:
 #define maxTimerVal ((uint32_t)(4294967295 / TIMER_PERIOD)) * TIMER_PERIOD

 uint32_t calc_time_elapsed(Timer *timer);

 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
    1514:	fc 01       	movw	r30, r24
    1516:	42 83       	std	Z+2, r20	; 0x02
    1518:	53 83       	std	Z+3, r21	; 0x03
	timer->start = current_ms;
    151a:	40 91 a8 35 	lds	r20, 0x35A8	; 0x8035a8 <current_ms>
    151e:	50 91 a9 35 	lds	r21, 0x35A9	; 0x8035a9 <current_ms+0x1>
    1522:	60 91 aa 35 	lds	r22, 0x35AA	; 0x8035aa <current_ms+0x2>
    1526:	70 91 ab 35 	lds	r23, 0x35AB	; 0x8035ab <current_ms+0x3>
    152a:	40 83       	st	Z, r20
    152c:	51 83       	std	Z+1, r21	; 0x01
    152e:	08 95       	ret

00001530 <calc_time_elapsed>:
	if (timer->interval > elapsedTime)
		return timer->interval - elapsedTime;
	return 0;
 }

 uint32_t calc_time_elapsed(Timer *timer) {
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	fc 01       	movw	r30, r24
	uint32_t curMs = current_ms;
    1536:	80 91 a8 35 	lds	r24, 0x35A8	; 0x8035a8 <current_ms>
    153a:	90 91 a9 35 	lds	r25, 0x35A9	; 0x8035a9 <current_ms+0x1>
    153e:	a0 91 aa 35 	lds	r26, 0x35AA	; 0x8035aa <current_ms+0x2>
    1542:	b0 91 ab 35 	lds	r27, 0x35AB	; 0x8035ab <current_ms+0x3>
	uint32_t elapsedTime;

	if (curMs >= timer->start) // timer has not wrapped around
    1546:	00 81       	ld	r16, Z
    1548:	11 81       	ldd	r17, Z+1	; 0x01
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	80 17       	cp	r24, r16
    1550:	91 07       	cpc	r25, r17
    1552:	a2 07       	cpc	r26, r18
    1554:	b3 07       	cpc	r27, r19
    1556:	38 f0       	brcs	.+14     	; 0x1566 <calc_time_elapsed+0x36>
		elapsedTime = curMs - timer->start;
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	60 1b       	sub	r22, r16
    155e:	71 0b       	sbc	r23, r17
    1560:	82 0b       	sbc	r24, r18
    1562:	93 0b       	sbc	r25, r19
    1564:	0a c0       	rjmp	.+20     	; 0x157a <calc_time_elapsed+0x4a>
	else // timer has wrapped around
		elapsedTime = maxTimerVal - (timer->start - curMs);
    1566:	80 1b       	sub	r24, r16
    1568:	91 0b       	sbc	r25, r17
    156a:	a2 0b       	sbc	r26, r18
    156c:	b3 0b       	sbc	r27, r19
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	64 53       	subi	r22, 0x34	; 52
    1574:	73 4f       	sbci	r23, 0xF3	; 243
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255

	return elapsedTime;
 }
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <timer_has_expired>:
 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
	timer->start = current_ms;
 }

 bool timer_has_expired(Timer *timer) {
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
	uint32_t elapsedTime = calc_time_elapsed(timer);
    158e:	0e 94 98 0a 	call	0x1530	; 0x1530 <calc_time_elapsed>
	return elapsedTime >= timer->interval;
    1592:	4a 81       	ldd	r20, Y+2	; 0x02
    1594:	5b 81       	ldd	r21, Y+3	; 0x03
    1596:	6a 01       	movw	r12, r20
    1598:	e1 2c       	mov	r14, r1
    159a:	f1 2c       	mov	r15, r1
    159c:	21 e0       	ldi	r18, 0x01	; 1
    159e:	6c 15       	cp	r22, r12
    15a0:	7d 05       	cpc	r23, r13
    15a2:	8e 05       	cpc	r24, r14
    15a4:	9f 05       	cpc	r25, r15
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <timer_has_expired+0x2a>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
 }
    15aa:	82 2f       	mov	r24, r18
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	08 95       	ret

000015ba <timer_time_remaining>:

 uint32_t timer_time_remaining(Timer *timer) {
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
	 uint32_t elapsedTime = calc_time_elapsed(timer);
    15cc:	0e 94 98 0a 	call	0x1530	; 0x1530 <calc_time_elapsed>

	if (timer->interval > elapsedTime)
    15d0:	2a 81       	ldd	r18, Y+2	; 0x02
    15d2:	3b 81       	ldd	r19, Y+3	; 0x03
    15d4:	89 01       	movw	r16, r18
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	60 17       	cp	r22, r16
    15dc:	71 07       	cpc	r23, r17
    15de:	82 07       	cpc	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	48 f4       	brcc	.+18     	; 0x15f6 <timer_time_remaining+0x3c>
		return timer->interval - elapsedTime;
    15e4:	68 01       	movw	r12, r16
    15e6:	79 01       	movw	r14, r18
    15e8:	c6 1a       	sub	r12, r22
    15ea:	d7 0a       	sbc	r13, r23
    15ec:	e8 0a       	sbc	r14, r24
    15ee:	f9 0a       	sbc	r15, r25
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <timer_time_remaining+0x42>
	return 0;
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	cb 01       	movw	r24, r22
 }
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	cf 90       	pop	r12
    160c:	08 95       	ret

0000160e <onTimerTick>:

	return elapsedTime;
 }

 void onTimerTick(void) {
	if (++timerVal >= maxTimerVal)
    160e:	80 91 ac 35 	lds	r24, 0x35AC	; 0x8035ac <timerVal>
    1612:	90 91 ad 35 	lds	r25, 0x35AD	; 0x8035ad <timerVal+0x1>
    1616:	a0 91 ae 35 	lds	r26, 0x35AE	; 0x8035ae <timerVal+0x2>
    161a:	b0 91 af 35 	lds	r27, 0x35AF	; 0x8035af <timerVal+0x3>
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	a1 1d       	adc	r26, r1
    1622:	b1 1d       	adc	r27, r1
    1624:	80 93 ac 35 	sts	0x35AC, r24	; 0x8035ac <timerVal>
    1628:	90 93 ad 35 	sts	0x35AD, r25	; 0x8035ad <timerVal+0x1>
    162c:	a0 93 ae 35 	sts	0x35AE, r26	; 0x8035ae <timerVal+0x2>
    1630:	b0 93 af 35 	sts	0x35AF, r27	; 0x8035af <timerVal+0x3>
    1634:	8c 3c       	cpi	r24, 0xCC	; 204
    1636:	9c 40       	sbci	r25, 0x0C	; 12
    1638:	a1 05       	cpc	r26, r1
    163a:	b1 05       	cpc	r27, r1
    163c:	40 f0       	brcs	.+16     	; 0x164e <onTimerTick+0x40>
		timerVal = 0;
    163e:	10 92 ac 35 	sts	0x35AC, r1	; 0x8035ac <timerVal>
    1642:	10 92 ad 35 	sts	0x35AD, r1	; 0x8035ad <timerVal+0x1>
    1646:	10 92 ae 35 	sts	0x35AE, r1	; 0x8035ae <timerVal+0x2>
    164a:	10 92 af 35 	sts	0x35AF, r1	; 0x8035af <timerVal+0x3>
	current_ms = timerVal * TIMER_MS;
    164e:	20 91 ac 35 	lds	r18, 0x35AC	; 0x8035ac <timerVal>
    1652:	30 91 ad 35 	lds	r19, 0x35AD	; 0x8035ad <timerVal+0x1>
    1656:	40 91 ae 35 	lds	r20, 0x35AE	; 0x8035ae <timerVal+0x2>
    165a:	50 91 af 35 	lds	r21, 0x35AF	; 0x8035af <timerVal+0x3>
    165e:	a2 e3       	ldi	r26, 0x32	; 50
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__muluhisi3>
    1666:	60 93 a8 35 	sts	0x35A8, r22	; 0x8035a8 <current_ms>
    166a:	70 93 a9 35 	sts	0x35A9, r23	; 0x8035a9 <current_ms+0x1>
    166e:	80 93 aa 35 	sts	0x35AA, r24	; 0x8035aa <current_ms+0x2>
    1672:	90 93 ab 35 	sts	0x35AB, r25	; 0x8035ab <current_ms+0x3>
    1676:	08 95       	ret

00001678 <test_tick>:
}

void test_mem_manager(void) {
	mem_manager_test();
	mem_manager_test2();
	testsPassed++;
    1678:	80 91 b2 35 	lds	r24, 0x35B2	; 0x8035b2 <tick_count>
    167c:	90 91 b3 35 	lds	r25, 0x35B3	; 0x8035b3 <tick_count+0x1>
    1680:	05 97       	sbiw	r24, 0x05	; 5
    1682:	d4 f3       	brlt	.-12     	; 0x1678 <test_tick>
    1684:	80 91 b2 35 	lds	r24, 0x35B2	; 0x8035b2 <tick_count>
    1688:	90 91 b3 35 	lds	r25, 0x35B3	; 0x8035b3 <tick_count+0x1>
    168c:	05 97       	sbiw	r24, 0x05	; 5
    168e:	59 f0       	breq	.+22     	; 0x16a6 <test_tick+0x2e>
    1690:	27 e6       	ldi	r18, 0x67	; 103
    1692:	31 e2       	ldi	r19, 0x21	; 33
    1694:	44 e8       	ldi	r20, 0x84	; 132
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	67 e7       	ldi	r22, 0x77	; 119
    169a:	71 e2       	ldi	r23, 0x21	; 33
    169c:	8e ec       	ldi	r24, 0xCE	; 206
    169e:	92 e2       	ldi	r25, 0x22	; 34
    16a0:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
    16a4:	ff cf       	rjmp	.-2      	; 0x16a4 <test_tick+0x2c>
    16a6:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <testsPassed>
    16aa:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <testsPassed+0x1>
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	80 93 b0 35 	sts	0x35B0, r24	; 0x8035b0 <testsPassed>
    16b4:	90 93 b1 35 	sts	0x35B1, r25	; 0x8035b1 <testsPassed+0x1>
    16b8:	08 95       	ret

000016ba <test_create_task>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <test_create_task+0x6>
    16c0:	1f 92       	push	r1
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	0e 94 7e 07 	call	0xefc	; 0xefc <kernel_enable_scheduler>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	31 e0       	ldi	r19, 0x01	; 1
    16ce:	47 e8       	ldi	r20, 0x87	; 135
    16d0:	51 e2       	ldi	r21, 0x21	; 33
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	8e eb       	ldi	r24, 0xBE	; 190
    16d6:	9b e0       	ldi	r25, 0x0B	; 11
    16d8:	0e 94 ca 04 	call	0x994	; 0x994 <kernel_create_task>
    16dc:	89 2b       	or	r24, r25
    16de:	59 f4       	brne	.+22     	; 0x16f6 <test_create_task+0x3c>
    16e0:	20 e7       	ldi	r18, 0x70	; 112
    16e2:	30 e2       	ldi	r19, 0x20	; 32
    16e4:	49 e4       	ldi	r20, 0x49	; 73
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	67 e7       	ldi	r22, 0x77	; 119
    16ea:	71 e2       	ldi	r23, 0x21	; 33
    16ec:	83 ee       	ldi	r24, 0xE3	; 227
    16ee:	92 e2       	ldi	r25, 0x22	; 34
    16f0:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
    16f4:	ff cf       	rjmp	.-2      	; 0x16f4 <test_create_task+0x3a>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	31 e0       	ldi	r19, 0x01	; 1
    16fa:	41 e9       	ldi	r20, 0x91	; 145
    16fc:	51 e2       	ldi	r21, 0x21	; 33
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	81 e1       	ldi	r24, 0x11	; 17
    1702:	9c e0       	ldi	r25, 0x0C	; 12
    1704:	0e 94 ca 04 	call	0x994	; 0x994 <kernel_create_task>
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	31 e0       	ldi	r19, 0x01	; 1
    170c:	43 ea       	ldi	r20, 0xA3	; 163
    170e:	51 e2       	ldi	r21, 0x21	; 33
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	83 ef       	ldi	r24, 0xF3	; 243
    1714:	9b e0       	ldi	r25, 0x0B	; 11
    1716:	0e 94 ca 04 	call	0x994	; 0x994 <kernel_create_task>
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <test_create_task+0x6a>
    171c:	86 e9       	ldi	r24, 0x96	; 150
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 7d 06 	call	0xcfa	; 0xcfa <kernel_yield_from_task>
    1724:	80 91 b4 35 	lds	r24, 0x35B4	; 0x8035b4 <threadFunctionCalled>
    1728:	90 91 b5 35 	lds	r25, 0x35B5	; 0x8035b5 <threadFunctionCalled+0x1>
    172c:	89 2b       	or	r24, r25
    172e:	b1 f3       	breq	.-20     	; 0x171c <test_create_task+0x62>
    1730:	48 ee       	ldi	r20, 0xE8	; 232
    1732:	53 e0       	ldi	r21, 0x03	; 3
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    1748:	88 23       	and	r24, r24
    174a:	d1 f3       	breq	.-12     	; 0x1740 <test_create_task+0x86>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	31 e0       	ldi	r19, 0x01	; 1
    1750:	4f ea       	ldi	r20, 0xAF	; 175
    1752:	51 e2       	ldi	r21, 0x21	; 33
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	8f e2       	ldi	r24, 0x2F	; 47
    1758:	9c e0       	ldi	r25, 0x0C	; 12
    175a:	0e 94 ca 04 	call	0x994	; 0x994 <kernel_create_task>
    175e:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <testsPassed>
    1762:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <testsPassed+0x1>
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	80 93 b0 35 	sts	0x35B0, r24	; 0x8035b0 <testsPassed>
    176c:	90 93 b1 35 	sts	0x35B1, r25	; 0x8035b1 <testsPassed+0x1>
    1770:	24 96       	adiw	r28, 0x04	; 4
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <_task_test_func1>:
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	00 d0       	rcall	.+0      	; 0x1782 <_task_test_func1+0x6>
    1782:	1f 92       	push	r1
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	48 ee       	ldi	r20, 0xE8	; 232
    178a:	53 e0       	ldi	r21, 0x03	; 3
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <_task_test_func1+0x26>
    179a:	86 e9       	ldi	r24, 0x96	; 150
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <kernel_yield_from_task>
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    17aa:	88 23       	and	r24, r24
    17ac:	b1 f3       	breq	.-20     	; 0x179a <_task_test_func1+0x1e>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	31 e0       	ldi	r19, 0x01	; 1
    17b2:	43 ea       	ldi	r20, 0xA3	; 163
    17b4:	51 e2       	ldi	r21, 0x21	; 33
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	83 ef       	ldi	r24, 0xF3	; 243
    17ba:	9b e0       	ldi	r25, 0x0B	; 11
    17bc:	0e 94 ca 04 	call	0x994	; 0x994 <kernel_create_task>
    17c0:	89 eb       	ldi	r24, 0xB9	; 185
    17c2:	91 e2       	ldi	r25, 0x21	; 33
    17c4:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    17c8:	80 91 b4 35 	lds	r24, 0x35B4	; 0x8035b4 <threadFunctionCalled>
    17cc:	90 91 b5 35 	lds	r25, 0x35B5	; 0x8035b5 <threadFunctionCalled+0x1>
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	80 93 b4 35 	sts	0x35B4, r24	; 0x8035b4 <threadFunctionCalled>
    17d6:	90 93 b5 35 	sts	0x35B5, r25	; 0x8035b5 <threadFunctionCalled+0x1>
    17da:	24 96       	adiw	r28, 0x04	; 4
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <_task_test_func2>:
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <_task_test_func2+0x6>
    17ec:	1f 92       	push	r1
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	48 ee       	ldi	r20, 0xE8	; 232
    17f4:	53 e0       	ldi	r21, 0x03	; 3
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    180a:	88 23       	and	r24, r24
    180c:	d1 f3       	breq	.-12     	; 0x1802 <_task_test_func2+0x1c>
    180e:	8b ee       	ldi	r24, 0xEB	; 235
    1810:	91 e2       	ldi	r25, 0x21	; 33
    1812:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    1816:	24 96       	adiw	r28, 0x04	; 4
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <_task_test_func3>:
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	00 d0       	rcall	.+0      	; 0x1828 <_task_test_func3+0x6>
    1828:	1f 92       	push	r1
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	48 ec       	ldi	r20, 0xC8	; 200
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    1846:	88 23       	and	r24, r24
    1848:	d1 f3       	breq	.-12     	; 0x183e <_task_test_func3+0x1c>
    184a:	80 e1       	ldi	r24, 0x10	; 16
    184c:	92 e2       	ldi	r25, 0x22	; 34
    184e:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    1852:	24 96       	adiw	r28, 0x04	; 4
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <_task_test_post_func>:
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	00 d0       	rcall	.+0      	; 0x1864 <_task_test_post_func+0x6>
    1864:	1f 92       	push	r1
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	48 ec       	ldi	r20, 0xC8	; 200
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    1882:	88 23       	and	r24, r24
    1884:	d1 f3       	breq	.-12     	; 0x187a <_task_test_post_func+0x1c>
    1886:	8b e4       	ldi	r24, 0x4B	; 75
    1888:	92 e2       	ldi	r25, 0x22	; 34
    188a:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    188e:	24 96       	adiw	r28, 0x04	; 4
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <test_timer>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <test_timer+0x6>
    18a0:	1f 92       	push	r1
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	44 ef       	ldi	r20, 0xF4	; 244
    18a8:	51 e0       	ldi	r21, 0x01	; 1
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <timer_set>
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    18be:	88 23       	and	r24, r24
    18c0:	d1 f3       	breq	.-12     	; 0x18b6 <test_timer+0x1c>
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer_has_expired>
    18ca:	81 11       	cpse	r24, r1
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <test_timer+0x4a>
    18ce:	20 e7       	ldi	r18, 0x70	; 112
    18d0:	32 e2       	ldi	r19, 0x22	; 34
    18d2:	4d e7       	ldi	r20, 0x7D	; 125
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	67 e7       	ldi	r22, 0x77	; 119
    18d8:	71 e2       	ldi	r23, 0x21	; 33
    18da:	88 ed       	ldi	r24, 0xD8	; 216
    18dc:	92 e2       	ldi	r25, 0x22	; 34
    18de:	0e 94 06 04 	call	0x80c	; 0x80c <__m_assert>
    18e2:	ff cf       	rjmp	.-2      	; 0x18e2 <test_timer+0x48>
    18e4:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <testsPassed>
    18e8:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <testsPassed+0x1>
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	80 93 b0 35 	sts	0x35B0, r24	; 0x8035b0 <testsPassed>
    18f2:	90 93 b1 35 	sts	0x35B1, r25	; 0x8035b1 <testsPassed+0x1>
    18f6:	24 96       	adiw	r28, 0x04	; 4
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <test_init>:
    1902:	89 ed       	ldi	r24, 0xD9	; 217
    1904:	90 e2       	ldi	r25, 0x20	; 32
    1906:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    190a:	08 95       	ret

0000190c <test_tick_callback>:
	m_assert(tick_count == 5);
	testsPassed++;
}

void test_tick_callback(void) {
	tick_count++;
    190c:	80 91 b2 35 	lds	r24, 0x35B2	; 0x8035b2 <tick_count>
    1910:	90 91 b3 35 	lds	r25, 0x35B3	; 0x8035b3 <tick_count+0x1>
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	80 93 b2 35 	sts	0x35B2, r24	; 0x8035b2 <tick_count>
    191a:	90 93 b3 35 	sts	0x35B3, r25	; 0x8035b3 <tick_count+0x1>
	(&PORTB)->OUT ^= PIN6_bm;
    191e:	e0 e2       	ldi	r30, 0x20	; 32
    1920:	f6 e0       	ldi	r31, 0x06	; 6
    1922:	94 81       	ldd	r25, Z+4	; 0x04
    1924:	80 e4       	ldi	r24, 0x40	; 64
    1926:	89 27       	eor	r24, r25
    1928:	84 83       	std	Z+4, r24	; 0x04
    192a:	08 95       	ret

0000192c <test_print_results>:
}

void test_print_results(void) {
	serial_send_string("\n\rTests finished\r\n");
    192c:	84 e9       	ldi	r24, 0x94	; 148
    192e:	92 e2       	ldi	r25, 0x22	; 34
    1930:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
	sprintf(gStrBuf, "Passed: %d\n\rFailed: %d\n\r\n\rResult: %s\n\r", testsPassed, NUM_TESTS - testsPassed, (testsPassed != NUM_TESTS ? "Fail" : "Pass"));
    1934:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <testsPassed>
    1938:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <testsPassed+0x1>
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	19 f0       	breq	.+6      	; 0x1948 <test_print_results+0x1c>
    1942:	2a e8       	ldi	r18, 0x8A	; 138
    1944:	32 e2       	ldi	r19, 0x22	; 34
    1946:	02 c0       	rjmp	.+4      	; 0x194c <test_print_results+0x20>
    1948:	2f e8       	ldi	r18, 0x8F	; 143
    194a:	32 e2       	ldi	r19, 0x22	; 34
    194c:	3f 93       	push	r19
    194e:	2f 93       	push	r18
    1950:	23 e0       	ldi	r18, 0x03	; 3
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	28 1b       	sub	r18, r24
    1956:	39 0b       	sbc	r19, r25
    1958:	3f 93       	push	r19
    195a:	2f 93       	push	r18
    195c:	9f 93       	push	r25
    195e:	8f 93       	push	r24
    1960:	87 ea       	ldi	r24, 0xA7	; 167
    1962:	92 e2       	ldi	r25, 0x22	; 34
    1964:	9f 93       	push	r25
    1966:	8f 93       	push	r24
    1968:	85 ef       	ldi	r24, 0xF5	; 245
    196a:	92 e3       	ldi	r25, 0x32	; 50
    196c:	9f 93       	push	r25
    196e:	8f 93       	push	r24
    1970:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <sprintf>
	serial_send_string(gStrBuf);
    1974:	85 ef       	ldi	r24, 0xF5	; 245
    1976:	92 e3       	ldi	r25, 0x32	; 50
    1978:	0e 94 91 09 	call	0x1322	; 0x1322 <serial_send_string>
    197c:	8d b7       	in	r24, 0x3d	; 61
    197e:	9e b7       	in	r25, 0x3e	; 62
    1980:	0a 96       	adiw	r24, 0x0a	; 10
    1982:	8d bf       	out	0x3d, r24	; 61
    1984:	9e bf       	out	0x3e, r25	; 62
    1986:	08 95       	ret

00001988 <do_tests>:
void test_init(void);
void test_print_results(void);

#define NUM_TESTS sizeof(testList) / sizeof(*testList)

void do_tests(void) {
    1988:	cf 93       	push	r28
	uint8_t i;
	test_init();
    198a:	0e 94 81 0c 	call	0x1902	; 0x1902 <test_init>

	for (i = 0; i < NUM_TESTS; i++)
    198e:	c0 e0       	ldi	r28, 0x00	; 0
    1990:	0b c0       	rjmp	.+22     	; 0x19a8 <do_tests+0x20>
		testList[i]();
    1992:	ec 2f       	mov	r30, r28
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	ea 5f       	subi	r30, 0xFA	; 250
    199c:	ff 4d       	sbci	r31, 0xDF	; 223
    199e:	01 90       	ld	r0, Z+
    19a0:	f0 81       	ld	r31, Z
    19a2:	e0 2d       	mov	r30, r0
    19a4:	19 95       	eicall

void do_tests(void) {
	uint8_t i;
	test_init();

	for (i = 0; i < NUM_TESTS; i++)
    19a6:	cf 5f       	subi	r28, 0xFF	; 255
    19a8:	c3 30       	cpi	r28, 0x03	; 3
    19aa:	98 f3       	brcs	.-26     	; 0x1992 <do_tests+0xa>
		testList[i]();

	test_print_results();
    19ac:	0e 94 96 0c 	call	0x192c	; 0x192c <test_print_results>
}
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <__muluhisi3>:
    19b4:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__umulhisi3>
    19b8:	a5 9f       	mul	r26, r21
    19ba:	90 0d       	add	r25, r0
    19bc:	b4 9f       	mul	r27, r20
    19be:	90 0d       	add	r25, r0
    19c0:	a4 9f       	mul	r26, r20
    19c2:	80 0d       	add	r24, r0
    19c4:	91 1d       	adc	r25, r1
    19c6:	11 24       	eor	r1, r1
    19c8:	08 95       	ret

000019ca <__umulhisi3>:
    19ca:	a2 9f       	mul	r26, r18
    19cc:	b0 01       	movw	r22, r0
    19ce:	b3 9f       	mul	r27, r19
    19d0:	c0 01       	movw	r24, r0
    19d2:	a3 9f       	mul	r26, r19
    19d4:	70 0d       	add	r23, r0
    19d6:	81 1d       	adc	r24, r1
    19d8:	11 24       	eor	r1, r1
    19da:	91 1d       	adc	r25, r1
    19dc:	b2 9f       	mul	r27, r18
    19de:	70 0d       	add	r23, r0
    19e0:	81 1d       	adc	r24, r1
    19e2:	11 24       	eor	r1, r1
    19e4:	91 1d       	adc	r25, r1
    19e6:	08 95       	ret

000019e8 <malloc>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	91 05       	cpc	r25, r1
    19f4:	10 f4       	brcc	.+4      	; 0x19fa <malloc+0x12>
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	e0 91 b8 35 	lds	r30, 0x35B8	; 0x8035b8 <__flp>
    19fe:	f0 91 b9 35 	lds	r31, 0x35B9	; 0x8035b9 <__flp+0x1>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	19 f1       	breq	.+70     	; 0x1a54 <malloc+0x6c>
    1a0e:	40 81       	ld	r20, Z
    1a10:	51 81       	ldd	r21, Z+1	; 0x01
    1a12:	02 81       	ldd	r16, Z+2	; 0x02
    1a14:	13 81       	ldd	r17, Z+3	; 0x03
    1a16:	48 17       	cp	r20, r24
    1a18:	59 07       	cpc	r21, r25
    1a1a:	c8 f0       	brcs	.+50     	; 0x1a4e <malloc+0x66>
    1a1c:	84 17       	cp	r24, r20
    1a1e:	95 07       	cpc	r25, r21
    1a20:	69 f4       	brne	.+26     	; 0x1a3c <malloc+0x54>
    1a22:	10 97       	sbiw	r26, 0x00	; 0
    1a24:	31 f0       	breq	.+12     	; 0x1a32 <malloc+0x4a>
    1a26:	12 96       	adiw	r26, 0x02	; 2
    1a28:	0c 93       	st	X, r16
    1a2a:	12 97       	sbiw	r26, 0x02	; 2
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	1c 93       	st	X, r17
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <malloc+0x98>
    1a32:	00 93 b8 35 	sts	0x35B8, r16	; 0x8035b8 <__flp>
    1a36:	10 93 b9 35 	sts	0x35B9, r17	; 0x8035b9 <__flp+0x1>
    1a3a:	22 c0       	rjmp	.+68     	; 0x1a80 <malloc+0x98>
    1a3c:	21 15       	cp	r18, r1
    1a3e:	31 05       	cpc	r19, r1
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <malloc+0x60>
    1a42:	42 17       	cp	r20, r18
    1a44:	53 07       	cpc	r21, r19
    1a46:	18 f4       	brcc	.+6      	; 0x1a4e <malloc+0x66>
    1a48:	9a 01       	movw	r18, r20
    1a4a:	bd 01       	movw	r22, r26
    1a4c:	ef 01       	movw	r28, r30
    1a4e:	df 01       	movw	r26, r30
    1a50:	f8 01       	movw	r30, r16
    1a52:	db cf       	rjmp	.-74     	; 0x1a0a <malloc+0x22>
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	f9 f0       	breq	.+62     	; 0x1a98 <malloc+0xb0>
    1a5a:	28 1b       	sub	r18, r24
    1a5c:	39 0b       	sbc	r19, r25
    1a5e:	24 30       	cpi	r18, 0x04	; 4
    1a60:	31 05       	cpc	r19, r1
    1a62:	80 f4       	brcc	.+32     	; 0x1a84 <malloc+0x9c>
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	61 15       	cp	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <malloc+0x8e>
    1a6e:	fb 01       	movw	r30, r22
    1a70:	82 83       	std	Z+2, r24	; 0x02
    1a72:	93 83       	std	Z+3, r25	; 0x03
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <malloc+0x96>
    1a76:	80 93 b8 35 	sts	0x35B8, r24	; 0x8035b8 <__flp>
    1a7a:	90 93 b9 35 	sts	0x35B9, r25	; 0x8035b9 <__flp+0x1>
    1a7e:	fe 01       	movw	r30, r28
    1a80:	32 96       	adiw	r30, 0x02	; 2
    1a82:	44 c0       	rjmp	.+136    	; 0x1b0c <malloc+0x124>
    1a84:	fe 01       	movw	r30, r28
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	81 93       	st	Z+, r24
    1a8c:	91 93       	st	Z+, r25
    1a8e:	22 50       	subi	r18, 0x02	; 2
    1a90:	31 09       	sbc	r19, r1
    1a92:	28 83       	st	Y, r18
    1a94:	39 83       	std	Y+1, r19	; 0x01
    1a96:	3a c0       	rjmp	.+116    	; 0x1b0c <malloc+0x124>
    1a98:	20 91 b6 35 	lds	r18, 0x35B6	; 0x8035b6 <__brkval>
    1a9c:	30 91 b7 35 	lds	r19, 0x35B7	; 0x8035b7 <__brkval+0x1>
    1aa0:	23 2b       	or	r18, r19
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <malloc+0xcc>
    1aa4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1aa8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1aac:	20 93 b6 35 	sts	0x35B6, r18	; 0x8035b6 <__brkval>
    1ab0:	30 93 b7 35 	sts	0x35B7, r19	; 0x8035b7 <__brkval+0x1>
    1ab4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1ab8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	41 f4       	brne	.+16     	; 0x1ad2 <malloc+0xea>
    1ac2:	2d b7       	in	r18, 0x3d	; 61
    1ac4:	3e b7       	in	r19, 0x3e	; 62
    1ac6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1aca:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1ace:	24 1b       	sub	r18, r20
    1ad0:	35 0b       	sbc	r19, r21
    1ad2:	e0 91 b6 35 	lds	r30, 0x35B6	; 0x8035b6 <__brkval>
    1ad6:	f0 91 b7 35 	lds	r31, 0x35B7	; 0x8035b7 <__brkval+0x1>
    1ada:	e2 17       	cp	r30, r18
    1adc:	f3 07       	cpc	r31, r19
    1ade:	a0 f4       	brcc	.+40     	; 0x1b08 <malloc+0x120>
    1ae0:	2e 1b       	sub	r18, r30
    1ae2:	3f 0b       	sbc	r19, r31
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	78 f0       	brcs	.+30     	; 0x1b08 <malloc+0x120>
    1aea:	ac 01       	movw	r20, r24
    1aec:	4e 5f       	subi	r20, 0xFE	; 254
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	24 17       	cp	r18, r20
    1af2:	35 07       	cpc	r19, r21
    1af4:	48 f0       	brcs	.+18     	; 0x1b08 <malloc+0x120>
    1af6:	4e 0f       	add	r20, r30
    1af8:	5f 1f       	adc	r21, r31
    1afa:	40 93 b6 35 	sts	0x35B6, r20	; 0x8035b6 <__brkval>
    1afe:	50 93 b7 35 	sts	0x35B7, r21	; 0x8035b7 <__brkval+0x1>
    1b02:	81 93       	st	Z+, r24
    1b04:	91 93       	st	Z+, r25
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <malloc+0x124>
    1b08:	e0 e0       	ldi	r30, 0x00	; 0
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <free>:
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <free+0xa>
    1b20:	81 c0       	rjmp	.+258    	; 0x1c24 <free+0x10c>
    1b22:	fc 01       	movw	r30, r24
    1b24:	32 97       	sbiw	r30, 0x02	; 2
    1b26:	12 82       	std	Z+2, r1	; 0x02
    1b28:	13 82       	std	Z+3, r1	; 0x03
    1b2a:	a0 91 b8 35 	lds	r26, 0x35B8	; 0x8035b8 <__flp>
    1b2e:	b0 91 b9 35 	lds	r27, 0x35B9	; 0x8035b9 <__flp+0x1>
    1b32:	10 97       	sbiw	r26, 0x00	; 0
    1b34:	81 f4       	brne	.+32     	; 0x1b56 <free+0x3e>
    1b36:	20 81       	ld	r18, Z
    1b38:	31 81       	ldd	r19, Z+1	; 0x01
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	20 91 b6 35 	lds	r18, 0x35B6	; 0x8035b6 <__brkval>
    1b42:	30 91 b7 35 	lds	r19, 0x35B7	; 0x8035b7 <__brkval+0x1>
    1b46:	28 17       	cp	r18, r24
    1b48:	39 07       	cpc	r19, r25
    1b4a:	51 f5       	brne	.+84     	; 0x1ba0 <free+0x88>
    1b4c:	e0 93 b6 35 	sts	0x35B6, r30	; 0x8035b6 <__brkval>
    1b50:	f0 93 b7 35 	sts	0x35B7, r31	; 0x8035b7 <__brkval+0x1>
    1b54:	67 c0       	rjmp	.+206    	; 0x1c24 <free+0x10c>
    1b56:	ed 01       	movw	r28, r26
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	ce 17       	cp	r28, r30
    1b5e:	df 07       	cpc	r29, r31
    1b60:	40 f4       	brcc	.+16     	; 0x1b72 <free+0x5a>
    1b62:	4a 81       	ldd	r20, Y+2	; 0x02
    1b64:	5b 81       	ldd	r21, Y+3	; 0x03
    1b66:	9e 01       	movw	r18, r28
    1b68:	41 15       	cp	r20, r1
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	f1 f0       	breq	.+60     	; 0x1baa <free+0x92>
    1b6e:	ea 01       	movw	r28, r20
    1b70:	f5 cf       	rjmp	.-22     	; 0x1b5c <free+0x44>
    1b72:	c2 83       	std	Z+2, r28	; 0x02
    1b74:	d3 83       	std	Z+3, r29	; 0x03
    1b76:	40 81       	ld	r20, Z
    1b78:	51 81       	ldd	r21, Z+1	; 0x01
    1b7a:	84 0f       	add	r24, r20
    1b7c:	95 1f       	adc	r25, r21
    1b7e:	c8 17       	cp	r28, r24
    1b80:	d9 07       	cpc	r29, r25
    1b82:	59 f4       	brne	.+22     	; 0x1b9a <free+0x82>
    1b84:	88 81       	ld	r24, Y
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	84 0f       	add	r24, r20
    1b8a:	95 1f       	adc	r25, r21
    1b8c:	02 96       	adiw	r24, 0x02	; 2
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	82 83       	std	Z+2, r24	; 0x02
    1b98:	93 83       	std	Z+3, r25	; 0x03
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	29 f4       	brne	.+10     	; 0x1baa <free+0x92>
    1ba0:	e0 93 b8 35 	sts	0x35B8, r30	; 0x8035b8 <__flp>
    1ba4:	f0 93 b9 35 	sts	0x35B9, r31	; 0x8035b9 <__flp+0x1>
    1ba8:	3d c0       	rjmp	.+122    	; 0x1c24 <free+0x10c>
    1baa:	e9 01       	movw	r28, r18
    1bac:	ea 83       	std	Y+2, r30	; 0x02
    1bae:	fb 83       	std	Y+3, r31	; 0x03
    1bb0:	49 91       	ld	r20, Y+
    1bb2:	59 91       	ld	r21, Y+
    1bb4:	c4 0f       	add	r28, r20
    1bb6:	d5 1f       	adc	r29, r21
    1bb8:	ec 17       	cp	r30, r28
    1bba:	fd 07       	cpc	r31, r29
    1bbc:	61 f4       	brne	.+24     	; 0x1bd6 <free+0xbe>
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	84 0f       	add	r24, r20
    1bc4:	95 1f       	adc	r25, r21
    1bc6:	02 96       	adiw	r24, 0x02	; 2
    1bc8:	e9 01       	movw	r28, r18
    1bca:	88 83       	st	Y, r24
    1bcc:	99 83       	std	Y+1, r25	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	9b 83       	std	Y+3, r25	; 0x03
    1bd6:	e0 e0       	ldi	r30, 0x00	; 0
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	8d 91       	ld	r24, X+
    1bde:	9c 91       	ld	r25, X
    1be0:	13 97       	sbiw	r26, 0x03	; 3
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	19 f0       	breq	.+6      	; 0x1bec <free+0xd4>
    1be6:	fd 01       	movw	r30, r26
    1be8:	dc 01       	movw	r26, r24
    1bea:	f7 cf       	rjmp	.-18     	; 0x1bda <free+0xc2>
    1bec:	8d 91       	ld	r24, X+
    1bee:	9c 91       	ld	r25, X
    1bf0:	11 97       	sbiw	r26, 0x01	; 1
    1bf2:	9d 01       	movw	r18, r26
    1bf4:	2e 5f       	subi	r18, 0xFE	; 254
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	82 0f       	add	r24, r18
    1bfa:	93 1f       	adc	r25, r19
    1bfc:	20 91 b6 35 	lds	r18, 0x35B6	; 0x8035b6 <__brkval>
    1c00:	30 91 b7 35 	lds	r19, 0x35B7	; 0x8035b7 <__brkval+0x1>
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	69 f4       	brne	.+26     	; 0x1c24 <free+0x10c>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <free+0x100>
    1c0e:	10 92 b8 35 	sts	0x35B8, r1	; 0x8035b8 <__flp>
    1c12:	10 92 b9 35 	sts	0x35B9, r1	; 0x8035b9 <__flp+0x1>
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <free+0x104>
    1c18:	12 82       	std	Z+2, r1	; 0x02
    1c1a:	13 82       	std	Z+3, r1	; 0x03
    1c1c:	a0 93 b6 35 	sts	0x35B6, r26	; 0x8035b6 <__brkval>
    1c20:	b0 93 b7 35 	sts	0x35B7, r27	; 0x8035b7 <__brkval+0x1>
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <memcpy>:
    1c2a:	fb 01       	movw	r30, r22
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <memcpy+0xa>
    1c30:	01 90       	ld	r0, Z+
    1c32:	0d 92       	st	X+, r0
    1c34:	41 50       	subi	r20, 0x01	; 1
    1c36:	50 40       	sbci	r21, 0x00	; 0
    1c38:	d8 f7       	brcc	.-10     	; 0x1c30 <memcpy+0x6>
    1c3a:	08 95       	ret

00001c3c <memset>:
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <memset+0x6>
    1c40:	6d 93       	st	X+, r22
    1c42:	41 50       	subi	r20, 0x01	; 1
    1c44:	50 40       	sbci	r21, 0x00	; 0
    1c46:	e0 f7       	brcc	.-8      	; 0x1c40 <memset+0x4>
    1c48:	08 95       	ret

00001c4a <strcpy>:
    1c4a:	fb 01       	movw	r30, r22
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	01 90       	ld	r0, Z+
    1c50:	0d 92       	st	X+, r0
    1c52:	00 20       	and	r0, r0
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <strcpy+0x4>
    1c56:	08 95       	ret

00001c58 <sprintf>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	2e 97       	sbiw	r28, 0x0e	; 14
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0e 89       	ldd	r16, Y+22	; 0x16
    1c6c:	1f 89       	ldd	r17, Y+23	; 0x17
    1c6e:	86 e0       	ldi	r24, 0x06	; 6
    1c70:	8c 83       	std	Y+4, r24	; 0x04
    1c72:	09 83       	std	Y+1, r16	; 0x01
    1c74:	1a 83       	std	Y+2, r17	; 0x02
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	9f e7       	ldi	r25, 0x7F	; 127
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	ae 01       	movw	r20, r28
    1c80:	46 5e       	subi	r20, 0xE6	; 230
    1c82:	5f 4f       	sbci	r21, 0xFF	; 255
    1c84:	68 8d       	ldd	r22, Y+24	; 0x18
    1c86:	79 8d       	ldd	r23, Y+25	; 0x19
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <vfprintf>
    1c90:	ef 81       	ldd	r30, Y+7	; 0x07
    1c92:	f8 85       	ldd	r31, Y+8	; 0x08
    1c94:	e0 0f       	add	r30, r16
    1c96:	f1 1f       	adc	r31, r17
    1c98:	10 82       	st	Z, r1
    1c9a:	2e 96       	adiw	r28, 0x0e	; 14
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <vfprintf>:
    1caa:	2f 92       	push	r2
    1cac:	3f 92       	push	r3
    1cae:	4f 92       	push	r4
    1cb0:	5f 92       	push	r5
    1cb2:	6f 92       	push	r6
    1cb4:	7f 92       	push	r7
    1cb6:	8f 92       	push	r8
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	2b 97       	sbiw	r28, 0x0b	; 11
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	6c 01       	movw	r12, r24
    1cda:	7b 01       	movw	r14, r22
    1cdc:	8a 01       	movw	r16, r20
    1cde:	fc 01       	movw	r30, r24
    1ce0:	16 82       	std	Z+6, r1	; 0x06
    1ce2:	17 82       	std	Z+7, r1	; 0x07
    1ce4:	83 81       	ldd	r24, Z+3	; 0x03
    1ce6:	81 ff       	sbrs	r24, 1
    1ce8:	cc c1       	rjmp	.+920    	; 0x2082 <vfprintf+0x3d8>
    1cea:	ce 01       	movw	r24, r28
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	3c 01       	movw	r6, r24
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	f7 01       	movw	r30, r14
    1cf6:	93 fd       	sbrc	r25, 3
    1cf8:	85 91       	lpm	r24, Z+
    1cfa:	93 ff       	sbrs	r25, 3
    1cfc:	81 91       	ld	r24, Z+
    1cfe:	7f 01       	movw	r14, r30
    1d00:	88 23       	and	r24, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <vfprintf+0x5c>
    1d04:	ba c1       	rjmp	.+884    	; 0x207a <vfprintf+0x3d0>
    1d06:	85 32       	cpi	r24, 0x25	; 37
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <vfprintf+0x6e>
    1d0a:	93 fd       	sbrc	r25, 3
    1d0c:	85 91       	lpm	r24, Z+
    1d0e:	93 ff       	sbrs	r25, 3
    1d10:	81 91       	ld	r24, Z+
    1d12:	7f 01       	movw	r14, r30
    1d14:	85 32       	cpi	r24, 0x25	; 37
    1d16:	29 f4       	brne	.+10     	; 0x1d22 <vfprintf+0x78>
    1d18:	b6 01       	movw	r22, r12
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    1d20:	e7 cf       	rjmp	.-50     	; 0x1cf0 <vfprintf+0x46>
    1d22:	91 2c       	mov	r9, r1
    1d24:	21 2c       	mov	r2, r1
    1d26:	31 2c       	mov	r3, r1
    1d28:	ff e1       	ldi	r31, 0x1F	; 31
    1d2a:	f3 15       	cp	r31, r3
    1d2c:	d8 f0       	brcs	.+54     	; 0x1d64 <vfprintf+0xba>
    1d2e:	8b 32       	cpi	r24, 0x2B	; 43
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <vfprintf+0xa6>
    1d32:	38 f4       	brcc	.+14     	; 0x1d42 <vfprintf+0x98>
    1d34:	80 32       	cpi	r24, 0x20	; 32
    1d36:	79 f0       	breq	.+30     	; 0x1d56 <vfprintf+0xac>
    1d38:	83 32       	cpi	r24, 0x23	; 35
    1d3a:	a1 f4       	brne	.+40     	; 0x1d64 <vfprintf+0xba>
    1d3c:	23 2d       	mov	r18, r3
    1d3e:	20 61       	ori	r18, 0x10	; 16
    1d40:	1d c0       	rjmp	.+58     	; 0x1d7c <vfprintf+0xd2>
    1d42:	8d 32       	cpi	r24, 0x2D	; 45
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <vfprintf+0xb4>
    1d46:	80 33       	cpi	r24, 0x30	; 48
    1d48:	69 f4       	brne	.+26     	; 0x1d64 <vfprintf+0xba>
    1d4a:	23 2d       	mov	r18, r3
    1d4c:	21 60       	ori	r18, 0x01	; 1
    1d4e:	16 c0       	rjmp	.+44     	; 0x1d7c <vfprintf+0xd2>
    1d50:	83 2d       	mov	r24, r3
    1d52:	82 60       	ori	r24, 0x02	; 2
    1d54:	38 2e       	mov	r3, r24
    1d56:	e3 2d       	mov	r30, r3
    1d58:	e4 60       	ori	r30, 0x04	; 4
    1d5a:	3e 2e       	mov	r3, r30
    1d5c:	2a c0       	rjmp	.+84     	; 0x1db2 <vfprintf+0x108>
    1d5e:	f3 2d       	mov	r31, r3
    1d60:	f8 60       	ori	r31, 0x08	; 8
    1d62:	1d c0       	rjmp	.+58     	; 0x1d9e <vfprintf+0xf4>
    1d64:	37 fc       	sbrc	r3, 7
    1d66:	2d c0       	rjmp	.+90     	; 0x1dc2 <vfprintf+0x118>
    1d68:	20 ed       	ldi	r18, 0xD0	; 208
    1d6a:	28 0f       	add	r18, r24
    1d6c:	2a 30       	cpi	r18, 0x0A	; 10
    1d6e:	40 f0       	brcs	.+16     	; 0x1d80 <vfprintf+0xd6>
    1d70:	8e 32       	cpi	r24, 0x2E	; 46
    1d72:	b9 f4       	brne	.+46     	; 0x1da2 <vfprintf+0xf8>
    1d74:	36 fc       	sbrc	r3, 6
    1d76:	81 c1       	rjmp	.+770    	; 0x207a <vfprintf+0x3d0>
    1d78:	23 2d       	mov	r18, r3
    1d7a:	20 64       	ori	r18, 0x40	; 64
    1d7c:	32 2e       	mov	r3, r18
    1d7e:	19 c0       	rjmp	.+50     	; 0x1db2 <vfprintf+0x108>
    1d80:	36 fe       	sbrs	r3, 6
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0xe6>
    1d84:	8a e0       	ldi	r24, 0x0A	; 10
    1d86:	98 9e       	mul	r9, r24
    1d88:	20 0d       	add	r18, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	92 2e       	mov	r9, r18
    1d8e:	11 c0       	rjmp	.+34     	; 0x1db2 <vfprintf+0x108>
    1d90:	ea e0       	ldi	r30, 0x0A	; 10
    1d92:	2e 9e       	mul	r2, r30
    1d94:	20 0d       	add	r18, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	22 2e       	mov	r2, r18
    1d9a:	f3 2d       	mov	r31, r3
    1d9c:	f0 62       	ori	r31, 0x20	; 32
    1d9e:	3f 2e       	mov	r3, r31
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <vfprintf+0x108>
    1da2:	8c 36       	cpi	r24, 0x6C	; 108
    1da4:	21 f4       	brne	.+8      	; 0x1dae <vfprintf+0x104>
    1da6:	83 2d       	mov	r24, r3
    1da8:	80 68       	ori	r24, 0x80	; 128
    1daa:	38 2e       	mov	r3, r24
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x108>
    1dae:	88 36       	cpi	r24, 0x68	; 104
    1db0:	41 f4       	brne	.+16     	; 0x1dc2 <vfprintf+0x118>
    1db2:	f7 01       	movw	r30, r14
    1db4:	93 fd       	sbrc	r25, 3
    1db6:	85 91       	lpm	r24, Z+
    1db8:	93 ff       	sbrs	r25, 3
    1dba:	81 91       	ld	r24, Z+
    1dbc:	7f 01       	movw	r14, r30
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	b3 cf       	rjmp	.-154    	; 0x1d28 <vfprintf+0x7e>
    1dc2:	98 2f       	mov	r25, r24
    1dc4:	9f 7d       	andi	r25, 0xDF	; 223
    1dc6:	95 54       	subi	r25, 0x45	; 69
    1dc8:	93 30       	cpi	r25, 0x03	; 3
    1dca:	28 f4       	brcc	.+10     	; 0x1dd6 <vfprintf+0x12c>
    1dcc:	0c 5f       	subi	r16, 0xFC	; 252
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	9f e3       	ldi	r25, 0x3F	; 63
    1dd2:	99 83       	std	Y+1, r25	; 0x01
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <vfprintf+0x146>
    1dd6:	83 36       	cpi	r24, 0x63	; 99
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <vfprintf+0x13c>
    1dda:	83 37       	cpi	r24, 0x73	; 115
    1ddc:	71 f0       	breq	.+28     	; 0x1dfa <vfprintf+0x150>
    1dde:	83 35       	cpi	r24, 0x53	; 83
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <vfprintf+0x13a>
    1de2:	59 c0       	rjmp	.+178    	; 0x1e96 <vfprintf+0x1ec>
    1de4:	21 c0       	rjmp	.+66     	; 0x1e28 <vfprintf+0x17e>
    1de6:	f8 01       	movw	r30, r16
    1de8:	80 81       	ld	r24, Z
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	0e 5f       	subi	r16, 0xFE	; 254
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	88 24       	eor	r8, r8
    1df2:	83 94       	inc	r8
    1df4:	91 2c       	mov	r9, r1
    1df6:	53 01       	movw	r10, r6
    1df8:	13 c0       	rjmp	.+38     	; 0x1e20 <vfprintf+0x176>
    1dfa:	28 01       	movw	r4, r16
    1dfc:	f2 e0       	ldi	r31, 0x02	; 2
    1dfe:	4f 0e       	add	r4, r31
    1e00:	51 1c       	adc	r5, r1
    1e02:	f8 01       	movw	r30, r16
    1e04:	a0 80       	ld	r10, Z
    1e06:	b1 80       	ldd	r11, Z+1	; 0x01
    1e08:	36 fe       	sbrs	r3, 6
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <vfprintf+0x168>
    1e0c:	69 2d       	mov	r22, r9
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <vfprintf+0x16c>
    1e12:	6f ef       	ldi	r22, 0xFF	; 255
    1e14:	7f ef       	ldi	r23, 0xFF	; 255
    1e16:	c5 01       	movw	r24, r10
    1e18:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strnlen>
    1e1c:	4c 01       	movw	r8, r24
    1e1e:	82 01       	movw	r16, r4
    1e20:	f3 2d       	mov	r31, r3
    1e22:	ff 77       	andi	r31, 0x7F	; 127
    1e24:	3f 2e       	mov	r3, r31
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <vfprintf+0x1aa>
    1e28:	28 01       	movw	r4, r16
    1e2a:	22 e0       	ldi	r18, 0x02	; 2
    1e2c:	42 0e       	add	r4, r18
    1e2e:	51 1c       	adc	r5, r1
    1e30:	f8 01       	movw	r30, r16
    1e32:	a0 80       	ld	r10, Z
    1e34:	b1 80       	ldd	r11, Z+1	; 0x01
    1e36:	36 fe       	sbrs	r3, 6
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <vfprintf+0x196>
    1e3a:	69 2d       	mov	r22, r9
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x19a>
    1e40:	6f ef       	ldi	r22, 0xFF	; 255
    1e42:	7f ef       	ldi	r23, 0xFF	; 255
    1e44:	c5 01       	movw	r24, r10
    1e46:	0e 94 59 10 	call	0x20b2	; 0x20b2 <strnlen_P>
    1e4a:	4c 01       	movw	r8, r24
    1e4c:	f3 2d       	mov	r31, r3
    1e4e:	f0 68       	ori	r31, 0x80	; 128
    1e50:	3f 2e       	mov	r3, r31
    1e52:	82 01       	movw	r16, r4
    1e54:	33 fc       	sbrc	r3, 3
    1e56:	1b c0       	rjmp	.+54     	; 0x1e8e <vfprintf+0x1e4>
    1e58:	82 2d       	mov	r24, r2
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	88 16       	cp	r8, r24
    1e5e:	99 06       	cpc	r9, r25
    1e60:	b0 f4       	brcc	.+44     	; 0x1e8e <vfprintf+0x1e4>
    1e62:	b6 01       	movw	r22, r12
    1e64:	80 e2       	ldi	r24, 0x20	; 32
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    1e6c:	2a 94       	dec	r2
    1e6e:	f4 cf       	rjmp	.-24     	; 0x1e58 <vfprintf+0x1ae>
    1e70:	f5 01       	movw	r30, r10
    1e72:	37 fc       	sbrc	r3, 7
    1e74:	85 91       	lpm	r24, Z+
    1e76:	37 fe       	sbrs	r3, 7
    1e78:	81 91       	ld	r24, Z+
    1e7a:	5f 01       	movw	r10, r30
    1e7c:	b6 01       	movw	r22, r12
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    1e84:	21 10       	cpse	r2, r1
    1e86:	2a 94       	dec	r2
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	82 1a       	sub	r8, r18
    1e8c:	91 08       	sbc	r9, r1
    1e8e:	81 14       	cp	r8, r1
    1e90:	91 04       	cpc	r9, r1
    1e92:	71 f7       	brne	.-36     	; 0x1e70 <vfprintf+0x1c6>
    1e94:	e8 c0       	rjmp	.+464    	; 0x2066 <vfprintf+0x3bc>
    1e96:	84 36       	cpi	r24, 0x64	; 100
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <vfprintf+0x1f4>
    1e9a:	89 36       	cpi	r24, 0x69	; 105
    1e9c:	41 f5       	brne	.+80     	; 0x1eee <vfprintf+0x244>
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	37 fe       	sbrs	r3, 7
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <vfprintf+0x208>
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	0c 5f       	subi	r16, 0xFC	; 252
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <vfprintf+0x218>
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	07 2e       	mov	r0, r23
    1eb8:	00 0c       	add	r0, r0
    1eba:	88 0b       	sbc	r24, r24
    1ebc:	99 0b       	sbc	r25, r25
    1ebe:	0e 5f       	subi	r16, 0xFE	; 254
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	f3 2d       	mov	r31, r3
    1ec4:	ff 76       	andi	r31, 0x6F	; 111
    1ec6:	3f 2e       	mov	r3, r31
    1ec8:	97 ff       	sbrs	r25, 7
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <vfprintf+0x234>
    1ecc:	90 95       	com	r25
    1ece:	80 95       	com	r24
    1ed0:	70 95       	com	r23
    1ed2:	61 95       	neg	r22
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	f0 68       	ori	r31, 0x80	; 128
    1edc:	3f 2e       	mov	r3, r31
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	a3 01       	movw	r20, r6
    1ee4:	0e 94 ab 10 	call	0x2156	; 0x2156 <__ultoa_invert>
    1ee8:	88 2e       	mov	r8, r24
    1eea:	86 18       	sub	r8, r6
    1eec:	45 c0       	rjmp	.+138    	; 0x1f78 <vfprintf+0x2ce>
    1eee:	85 37       	cpi	r24, 0x75	; 117
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <vfprintf+0x254>
    1ef2:	23 2d       	mov	r18, r3
    1ef4:	2f 7e       	andi	r18, 0xEF	; 239
    1ef6:	b2 2e       	mov	r11, r18
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	25 c0       	rjmp	.+74     	; 0x1f48 <vfprintf+0x29e>
    1efe:	93 2d       	mov	r25, r3
    1f00:	99 7f       	andi	r25, 0xF9	; 249
    1f02:	b9 2e       	mov	r11, r25
    1f04:	8f 36       	cpi	r24, 0x6F	; 111
    1f06:	c1 f0       	breq	.+48     	; 0x1f38 <vfprintf+0x28e>
    1f08:	18 f4       	brcc	.+6      	; 0x1f10 <vfprintf+0x266>
    1f0a:	88 35       	cpi	r24, 0x58	; 88
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <vfprintf+0x282>
    1f0e:	b5 c0       	rjmp	.+362    	; 0x207a <vfprintf+0x3d0>
    1f10:	80 37       	cpi	r24, 0x70	; 112
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <vfprintf+0x270>
    1f14:	88 37       	cpi	r24, 0x78	; 120
    1f16:	21 f0       	breq	.+8      	; 0x1f20 <vfprintf+0x276>
    1f18:	b0 c0       	rjmp	.+352    	; 0x207a <vfprintf+0x3d0>
    1f1a:	e9 2f       	mov	r30, r25
    1f1c:	e0 61       	ori	r30, 0x10	; 16
    1f1e:	be 2e       	mov	r11, r30
    1f20:	b4 fe       	sbrs	r11, 4
    1f22:	0d c0       	rjmp	.+26     	; 0x1f3e <vfprintf+0x294>
    1f24:	fb 2d       	mov	r31, r11
    1f26:	f4 60       	ori	r31, 0x04	; 4
    1f28:	bf 2e       	mov	r11, r31
    1f2a:	09 c0       	rjmp	.+18     	; 0x1f3e <vfprintf+0x294>
    1f2c:	34 fe       	sbrs	r3, 4
    1f2e:	0a c0       	rjmp	.+20     	; 0x1f44 <vfprintf+0x29a>
    1f30:	29 2f       	mov	r18, r25
    1f32:	26 60       	ori	r18, 0x06	; 6
    1f34:	b2 2e       	mov	r11, r18
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <vfprintf+0x29a>
    1f38:	28 e0       	ldi	r18, 0x08	; 8
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	05 c0       	rjmp	.+10     	; 0x1f48 <vfprintf+0x29e>
    1f3e:	20 e1       	ldi	r18, 0x10	; 16
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <vfprintf+0x29e>
    1f44:	20 e1       	ldi	r18, 0x10	; 16
    1f46:	32 e0       	ldi	r19, 0x02	; 2
    1f48:	f8 01       	movw	r30, r16
    1f4a:	b7 fe       	sbrs	r11, 7
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <vfprintf+0x2b2>
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	0c 5f       	subi	r16, 0xFC	; 252
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0x2be>
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 5f       	subi	r16, 0xFE	; 254
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	a3 01       	movw	r20, r6
    1f6a:	0e 94 ab 10 	call	0x2156	; 0x2156 <__ultoa_invert>
    1f6e:	88 2e       	mov	r8, r24
    1f70:	86 18       	sub	r8, r6
    1f72:	fb 2d       	mov	r31, r11
    1f74:	ff 77       	andi	r31, 0x7F	; 127
    1f76:	3f 2e       	mov	r3, r31
    1f78:	36 fe       	sbrs	r3, 6
    1f7a:	0d c0       	rjmp	.+26     	; 0x1f96 <vfprintf+0x2ec>
    1f7c:	23 2d       	mov	r18, r3
    1f7e:	2e 7f       	andi	r18, 0xFE	; 254
    1f80:	a2 2e       	mov	r10, r18
    1f82:	89 14       	cp	r8, r9
    1f84:	58 f4       	brcc	.+22     	; 0x1f9c <vfprintf+0x2f2>
    1f86:	34 fe       	sbrs	r3, 4
    1f88:	0b c0       	rjmp	.+22     	; 0x1fa0 <vfprintf+0x2f6>
    1f8a:	32 fc       	sbrc	r3, 2
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <vfprintf+0x2f6>
    1f8e:	83 2d       	mov	r24, r3
    1f90:	8e 7e       	andi	r24, 0xEE	; 238
    1f92:	a8 2e       	mov	r10, r24
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <vfprintf+0x2f6>
    1f96:	b8 2c       	mov	r11, r8
    1f98:	a3 2c       	mov	r10, r3
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <vfprintf+0x2f8>
    1f9c:	b8 2c       	mov	r11, r8
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <vfprintf+0x2f8>
    1fa0:	b9 2c       	mov	r11, r9
    1fa2:	a4 fe       	sbrs	r10, 4
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <vfprintf+0x31a>
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e8 0d       	add	r30, r8
    1faa:	f1 1d       	adc	r31, r1
    1fac:	80 81       	ld	r24, Z
    1fae:	80 33       	cpi	r24, 0x30	; 48
    1fb0:	21 f4       	brne	.+8      	; 0x1fba <vfprintf+0x310>
    1fb2:	9a 2d       	mov	r25, r10
    1fb4:	99 7e       	andi	r25, 0xE9	; 233
    1fb6:	a9 2e       	mov	r10, r25
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <vfprintf+0x322>
    1fba:	a2 fe       	sbrs	r10, 2
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <vfprintf+0x320>
    1fbe:	b3 94       	inc	r11
    1fc0:	b3 94       	inc	r11
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <vfprintf+0x322>
    1fc4:	8a 2d       	mov	r24, r10
    1fc6:	86 78       	andi	r24, 0x86	; 134
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <vfprintf+0x322>
    1fca:	b3 94       	inc	r11
    1fcc:	a3 fc       	sbrc	r10, 3
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <vfprintf+0x348>
    1fd0:	a0 fe       	sbrs	r10, 0
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <vfprintf+0x336>
    1fd4:	b2 14       	cp	r11, r2
    1fd6:	88 f4       	brcc	.+34     	; 0x1ffa <vfprintf+0x350>
    1fd8:	28 0c       	add	r2, r8
    1fda:	92 2c       	mov	r9, r2
    1fdc:	9b 18       	sub	r9, r11
    1fde:	0e c0       	rjmp	.+28     	; 0x1ffc <vfprintf+0x352>
    1fe0:	b2 14       	cp	r11, r2
    1fe2:	60 f4       	brcc	.+24     	; 0x1ffc <vfprintf+0x352>
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	80 e2       	ldi	r24, 0x20	; 32
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    1fee:	b3 94       	inc	r11
    1ff0:	f7 cf       	rjmp	.-18     	; 0x1fe0 <vfprintf+0x336>
    1ff2:	b2 14       	cp	r11, r2
    1ff4:	18 f4       	brcc	.+6      	; 0x1ffc <vfprintf+0x352>
    1ff6:	2b 18       	sub	r2, r11
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <vfprintf+0x354>
    1ffa:	98 2c       	mov	r9, r8
    1ffc:	21 2c       	mov	r2, r1
    1ffe:	a4 fe       	sbrs	r10, 4
    2000:	10 c0       	rjmp	.+32     	; 0x2022 <vfprintf+0x378>
    2002:	b6 01       	movw	r22, r12
    2004:	80 e3       	ldi	r24, 0x30	; 48
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    200c:	a2 fe       	sbrs	r10, 2
    200e:	17 c0       	rjmp	.+46     	; 0x203e <vfprintf+0x394>
    2010:	a1 fc       	sbrc	r10, 1
    2012:	03 c0       	rjmp	.+6      	; 0x201a <vfprintf+0x370>
    2014:	88 e7       	ldi	r24, 0x78	; 120
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <vfprintf+0x374>
    201a:	88 e5       	ldi	r24, 0x58	; 88
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	b6 01       	movw	r22, r12
    2020:	0c c0       	rjmp	.+24     	; 0x203a <vfprintf+0x390>
    2022:	8a 2d       	mov	r24, r10
    2024:	86 78       	andi	r24, 0x86	; 134
    2026:	59 f0       	breq	.+22     	; 0x203e <vfprintf+0x394>
    2028:	a1 fe       	sbrs	r10, 1
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <vfprintf+0x386>
    202c:	8b e2       	ldi	r24, 0x2B	; 43
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <vfprintf+0x388>
    2030:	80 e2       	ldi	r24, 0x20	; 32
    2032:	a7 fc       	sbrc	r10, 7
    2034:	8d e2       	ldi	r24, 0x2D	; 45
    2036:	b6 01       	movw	r22, r12
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    203e:	89 14       	cp	r8, r9
    2040:	38 f4       	brcc	.+14     	; 0x2050 <vfprintf+0x3a6>
    2042:	b6 01       	movw	r22, r12
    2044:	80 e3       	ldi	r24, 0x30	; 48
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    204c:	9a 94       	dec	r9
    204e:	f7 cf       	rjmp	.-18     	; 0x203e <vfprintf+0x394>
    2050:	8a 94       	dec	r8
    2052:	f3 01       	movw	r30, r6
    2054:	e8 0d       	add	r30, r8
    2056:	f1 1d       	adc	r31, r1
    2058:	80 81       	ld	r24, Z
    205a:	b6 01       	movw	r22, r12
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    2062:	81 10       	cpse	r8, r1
    2064:	f5 cf       	rjmp	.-22     	; 0x2050 <vfprintf+0x3a6>
    2066:	22 20       	and	r2, r2
    2068:	09 f4       	brne	.+2      	; 0x206c <vfprintf+0x3c2>
    206a:	42 ce       	rjmp	.-892    	; 0x1cf0 <vfprintf+0x46>
    206c:	b6 01       	movw	r22, r12
    206e:	80 e2       	ldi	r24, 0x20	; 32
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 6f 10 	call	0x20de	; 0x20de <fputc>
    2076:	2a 94       	dec	r2
    2078:	f6 cf       	rjmp	.-20     	; 0x2066 <vfprintf+0x3bc>
    207a:	f6 01       	movw	r30, r12
    207c:	86 81       	ldd	r24, Z+6	; 0x06
    207e:	97 81       	ldd	r25, Z+7	; 0x07
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <vfprintf+0x3dc>
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	9f ef       	ldi	r25, 0xFF	; 255
    2086:	2b 96       	adiw	r28, 0x0b	; 11
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	7f 90       	pop	r7
    20a6:	6f 90       	pop	r6
    20a8:	5f 90       	pop	r5
    20aa:	4f 90       	pop	r4
    20ac:	3f 90       	pop	r3
    20ae:	2f 90       	pop	r2
    20b0:	08 95       	ret

000020b2 <strnlen_P>:
    20b2:	fc 01       	movw	r30, r24
    20b4:	05 90       	lpm	r0, Z+
    20b6:	61 50       	subi	r22, 0x01	; 1
    20b8:	70 40       	sbci	r23, 0x00	; 0
    20ba:	01 10       	cpse	r0, r1
    20bc:	d8 f7       	brcc	.-10     	; 0x20b4 <strnlen_P+0x2>
    20be:	80 95       	com	r24
    20c0:	90 95       	com	r25
    20c2:	8e 0f       	add	r24, r30
    20c4:	9f 1f       	adc	r25, r31
    20c6:	08 95       	ret

000020c8 <strnlen>:
    20c8:	fc 01       	movw	r30, r24
    20ca:	61 50       	subi	r22, 0x01	; 1
    20cc:	70 40       	sbci	r23, 0x00	; 0
    20ce:	01 90       	ld	r0, Z+
    20d0:	01 10       	cpse	r0, r1
    20d2:	d8 f7       	brcc	.-10     	; 0x20ca <strnlen+0x2>
    20d4:	80 95       	com	r24
    20d6:	90 95       	com	r25
    20d8:	8e 0f       	add	r24, r30
    20da:	9f 1f       	adc	r25, r31
    20dc:	08 95       	ret

000020de <fputc>:
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	fb 01       	movw	r30, r22
    20e8:	23 81       	ldd	r18, Z+3	; 0x03
    20ea:	21 fd       	sbrc	r18, 1
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <fputc+0x16>
    20ee:	8f ef       	ldi	r24, 0xFF	; 255
    20f0:	9f ef       	ldi	r25, 0xFF	; 255
    20f2:	2c c0       	rjmp	.+88     	; 0x214c <fputc+0x6e>
    20f4:	22 ff       	sbrs	r18, 2
    20f6:	16 c0       	rjmp	.+44     	; 0x2124 <fputc+0x46>
    20f8:	46 81       	ldd	r20, Z+6	; 0x06
    20fa:	57 81       	ldd	r21, Z+7	; 0x07
    20fc:	24 81       	ldd	r18, Z+4	; 0x04
    20fe:	35 81       	ldd	r19, Z+5	; 0x05
    2100:	42 17       	cp	r20, r18
    2102:	53 07       	cpc	r21, r19
    2104:	44 f4       	brge	.+16     	; 0x2116 <fputc+0x38>
    2106:	a0 81       	ld	r26, Z
    2108:	b1 81       	ldd	r27, Z+1	; 0x01
    210a:	9d 01       	movw	r18, r26
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	20 83       	st	Z, r18
    2112:	31 83       	std	Z+1, r19	; 0x01
    2114:	8c 93       	st	X, r24
    2116:	26 81       	ldd	r18, Z+6	; 0x06
    2118:	37 81       	ldd	r19, Z+7	; 0x07
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	26 83       	std	Z+6, r18	; 0x06
    2120:	37 83       	std	Z+7, r19	; 0x07
    2122:	14 c0       	rjmp	.+40     	; 0x214c <fputc+0x6e>
    2124:	8b 01       	movw	r16, r22
    2126:	ec 01       	movw	r28, r24
    2128:	fb 01       	movw	r30, r22
    212a:	00 84       	ldd	r0, Z+8	; 0x08
    212c:	f1 85       	ldd	r31, Z+9	; 0x09
    212e:	e0 2d       	mov	r30, r0
    2130:	19 95       	eicall
    2132:	89 2b       	or	r24, r25
    2134:	e1 f6       	brne	.-72     	; 0x20ee <fputc+0x10>
    2136:	d8 01       	movw	r26, r16
    2138:	16 96       	adiw	r26, 0x06	; 6
    213a:	8d 91       	ld	r24, X+
    213c:	9c 91       	ld	r25, X
    213e:	17 97       	sbiw	r26, 0x07	; 7
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	16 96       	adiw	r26, 0x06	; 6
    2144:	8d 93       	st	X+, r24
    2146:	9c 93       	st	X, r25
    2148:	17 97       	sbiw	r26, 0x07	; 7
    214a:	ce 01       	movw	r24, r28
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	08 95       	ret

00002156 <__ultoa_invert>:
    2156:	fa 01       	movw	r30, r20
    2158:	aa 27       	eor	r26, r26
    215a:	28 30       	cpi	r18, 0x08	; 8
    215c:	51 f1       	breq	.+84     	; 0x21b2 <__ultoa_invert+0x5c>
    215e:	20 31       	cpi	r18, 0x10	; 16
    2160:	81 f1       	breq	.+96     	; 0x21c2 <__ultoa_invert+0x6c>
    2162:	e8 94       	clt
    2164:	6f 93       	push	r22
    2166:	6e 7f       	andi	r22, 0xFE	; 254
    2168:	6e 5f       	subi	r22, 0xFE	; 254
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	8f 4f       	sbci	r24, 0xFF	; 255
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	af 4f       	sbci	r26, 0xFF	; 255
    2172:	b1 e0       	ldi	r27, 0x01	; 1
    2174:	3e d0       	rcall	.+124    	; 0x21f2 <__ultoa_invert+0x9c>
    2176:	b4 e0       	ldi	r27, 0x04	; 4
    2178:	3c d0       	rcall	.+120    	; 0x21f2 <__ultoa_invert+0x9c>
    217a:	67 0f       	add	r22, r23
    217c:	78 1f       	adc	r23, r24
    217e:	89 1f       	adc	r24, r25
    2180:	9a 1f       	adc	r25, r26
    2182:	a1 1d       	adc	r26, r1
    2184:	68 0f       	add	r22, r24
    2186:	79 1f       	adc	r23, r25
    2188:	8a 1f       	adc	r24, r26
    218a:	91 1d       	adc	r25, r1
    218c:	a1 1d       	adc	r26, r1
    218e:	6a 0f       	add	r22, r26
    2190:	71 1d       	adc	r23, r1
    2192:	81 1d       	adc	r24, r1
    2194:	91 1d       	adc	r25, r1
    2196:	a1 1d       	adc	r26, r1
    2198:	20 d0       	rcall	.+64     	; 0x21da <__ultoa_invert+0x84>
    219a:	09 f4       	brne	.+2      	; 0x219e <__ultoa_invert+0x48>
    219c:	68 94       	set
    219e:	3f 91       	pop	r19
    21a0:	2a e0       	ldi	r18, 0x0A	; 10
    21a2:	26 9f       	mul	r18, r22
    21a4:	11 24       	eor	r1, r1
    21a6:	30 19       	sub	r19, r0
    21a8:	30 5d       	subi	r19, 0xD0	; 208
    21aa:	31 93       	st	Z+, r19
    21ac:	de f6       	brtc	.-74     	; 0x2164 <__ultoa_invert+0xe>
    21ae:	cf 01       	movw	r24, r30
    21b0:	08 95       	ret
    21b2:	46 2f       	mov	r20, r22
    21b4:	47 70       	andi	r20, 0x07	; 7
    21b6:	40 5d       	subi	r20, 0xD0	; 208
    21b8:	41 93       	st	Z+, r20
    21ba:	b3 e0       	ldi	r27, 0x03	; 3
    21bc:	0f d0       	rcall	.+30     	; 0x21dc <__ultoa_invert+0x86>
    21be:	c9 f7       	brne	.-14     	; 0x21b2 <__ultoa_invert+0x5c>
    21c0:	f6 cf       	rjmp	.-20     	; 0x21ae <__ultoa_invert+0x58>
    21c2:	46 2f       	mov	r20, r22
    21c4:	4f 70       	andi	r20, 0x0F	; 15
    21c6:	40 5d       	subi	r20, 0xD0	; 208
    21c8:	4a 33       	cpi	r20, 0x3A	; 58
    21ca:	18 f0       	brcs	.+6      	; 0x21d2 <__ultoa_invert+0x7c>
    21cc:	49 5d       	subi	r20, 0xD9	; 217
    21ce:	31 fd       	sbrc	r19, 1
    21d0:	40 52       	subi	r20, 0x20	; 32
    21d2:	41 93       	st	Z+, r20
    21d4:	02 d0       	rcall	.+4      	; 0x21da <__ultoa_invert+0x84>
    21d6:	a9 f7       	brne	.-22     	; 0x21c2 <__ultoa_invert+0x6c>
    21d8:	ea cf       	rjmp	.-44     	; 0x21ae <__ultoa_invert+0x58>
    21da:	b4 e0       	ldi	r27, 0x04	; 4
    21dc:	a6 95       	lsr	r26
    21de:	97 95       	ror	r25
    21e0:	87 95       	ror	r24
    21e2:	77 95       	ror	r23
    21e4:	67 95       	ror	r22
    21e6:	ba 95       	dec	r27
    21e8:	c9 f7       	brne	.-14     	; 0x21dc <__ultoa_invert+0x86>
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	61 05       	cpc	r22, r1
    21ee:	71 05       	cpc	r23, r1
    21f0:	08 95       	ret
    21f2:	9b 01       	movw	r18, r22
    21f4:	ac 01       	movw	r20, r24
    21f6:	0a 2e       	mov	r0, r26
    21f8:	06 94       	lsr	r0
    21fa:	57 95       	ror	r21
    21fc:	47 95       	ror	r20
    21fe:	37 95       	ror	r19
    2200:	27 95       	ror	r18
    2202:	ba 95       	dec	r27
    2204:	c9 f7       	brne	.-14     	; 0x21f8 <__ultoa_invert+0xa2>
    2206:	62 0f       	add	r22, r18
    2208:	73 1f       	adc	r23, r19
    220a:	84 1f       	adc	r24, r20
    220c:	95 1f       	adc	r25, r21
    220e:	a0 1d       	adc	r26, r0
    2210:	08 95       	ret

00002212 <_exit>:
    2212:	f8 94       	cli

00002214 <__stop_program>:
    2214:	ff cf       	rjmp	.-2      	; 0x2214 <__stop_program>
