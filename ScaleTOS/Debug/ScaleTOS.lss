
ScaleTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005c0  00802000  00001e40  00001ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002df  008025c0  008025c0  00002494  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005dea  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c2  00000000  00000000  000086fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026d9  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a64  00000000  00000000  0000c098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022a1  00000000  00000000  0000cafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f78  00000000  00000000  0000ed9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00011d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_14>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_20>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_25>
      68:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_26>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      bc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      c0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      c8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      cc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      d0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      d4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      d8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      dc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      e0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      e4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      e8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ec:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      f0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      f4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      f8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      fc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     100:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     104:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     108:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     10c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     110:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     114:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     118:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     11c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     120:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     124:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     128:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     12c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     130:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     134:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     138:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     13c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     140:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     144:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     148:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     14c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     150:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     154:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     158:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     15c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     160:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     164:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     168:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     16c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     170:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     174:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     178:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     17c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     180:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     184:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     188:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     18c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     190:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     194:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     198:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     19c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1b4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1b8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1bc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1c0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
     1c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <test_mem_manager>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e5       	ldi	r29, 0x5F	; 95
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	15 e2       	ldi	r17, 0x25	; 37
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b0 e2       	ldi	r27, 0x20	; 32
     1e2:	e0 e4       	ldi	r30, 0x40	; 64
     1e4:	fe e1       	ldi	r31, 0x1E	; 30
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 3c       	cpi	r26, 0xC0	; 192
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e2       	ldi	r18, 0x28	; 40
     1f8:	a0 ec       	ldi	r26, 0xC0	; 192
     1fa:	b5 e2       	ldi	r27, 0x25	; 37
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 39       	cpi	r26, 0x9F	; 159
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <main>
     20a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <internal_free>:
		return ptr;

	memset(ptr, 0, size);
	CRITICAL_SYNC_END();
	return ptr;
}
     212:	25 e2       	ldi	r18, 0x25	; 37
     214:	81 3c       	cpi	r24, 0xC1	; 193
     216:	92 07       	cpc	r25, r18
     218:	68 f1       	brcs	.+90     	; 0x274 <internal_free+0x62>
     21a:	45 e2       	ldi	r20, 0x25	; 37
     21c:	81 3e       	cpi	r24, 0xE1	; 225
     21e:	94 07       	cpc	r25, r20
     220:	48 f5       	brcc	.+82     	; 0x274 <internal_free+0x62>
     222:	fc 01       	movw	r30, r24
     224:	92 91       	ld	r25, -Z
     226:	82 91       	ld	r24, -Z
     228:	99 23       	and	r25, r25
     22a:	24 f5       	brge	.+72     	; 0x274 <internal_free+0x62>
     22c:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <__data_end>
     230:	31 e0       	ldi	r19, 0x01	; 1
     232:	32 0f       	add	r19, r18
     234:	30 93 c0 25 	sts	0x25C0, r19	; 0x8025c0 <__data_end>
     238:	21 11       	cpse	r18, r1
     23a:	04 c0       	rjmp	.+8      	; 0x244 <internal_free+0x32>
     23c:	2f b7       	in	r18, 0x3f	; 63
     23e:	20 93 61 26 	sts	0x2661, r18	; 0x802661 <_sreg>
     242:	f8 94       	cli
     244:	9f 77       	andi	r25, 0x7F	; 127
     246:	80 83       	st	Z, r24
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	20 91 62 26 	lds	r18, 0x2662	; 0x802662 <totalAllocatedMemory>
     24e:	30 91 63 26 	lds	r19, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     252:	a9 01       	movw	r20, r18
     254:	48 1b       	sub	r20, r24
     256:	59 0b       	sbc	r21, r25
     258:	40 93 62 26 	sts	0x2662, r20	; 0x802662 <totalAllocatedMemory>
     25c:	50 93 63 26 	sts	0x2663, r21	; 0x802663 <totalAllocatedMemory+0x1>
     260:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <__data_end>
     264:	81 50       	subi	r24, 0x01	; 1
     266:	80 93 c0 25 	sts	0x25C0, r24	; 0x8025c0 <__data_end>
     26a:	81 11       	cpse	r24, r1
     26c:	03 c0       	rjmp	.+6      	; 0x274 <internal_free+0x62>
     26e:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <_sreg>
     272:	8f bf       	out	0x3f, r24	; 63
     274:	08 95       	ret

00000276 <combine_unused_blocks>:
     276:	bc 01       	movw	r22, r24
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	14 c0       	rjmp	.+40     	; 0x2a8 <combine_unused_blocks+0x32>
     280:	fb 01       	movw	r30, r22
     282:	ef 53       	subi	r30, 0x3F	; 63
     284:	fa 4d       	sbci	r31, 0xDA	; 218
     286:	df 01       	movw	r26, r30
     288:	a2 0f       	add	r26, r18
     28a:	b3 1f       	adc	r27, r19
     28c:	4d 91       	ld	r20, X+
     28e:	5c 91       	ld	r21, X
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	81 f0       	breq	.+32     	; 0x2b6 <combine_unused_blocks+0x40>
     296:	ca 01       	movw	r24, r20
     298:	88 27       	eor	r24, r24
     29a:	90 78       	andi	r25, 0x80	; 128
     29c:	91 11       	cpse	r25, r1
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <combine_unused_blocks+0x32>
     2a0:	24 0f       	add	r18, r20
     2a2:	35 1f       	adc	r19, r21
     2a4:	20 83       	st	Z, r18
     2a6:	31 83       	std	Z+1, r19	; 0x01
     2a8:	91 11       	cpse	r25, r1
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <combine_unused_blocks+0x40>
     2ac:	cb 01       	movw	r24, r22
     2ae:	82 0f       	add	r24, r18
     2b0:	93 1f       	adc	r25, r19
     2b2:	80 97       	sbiw	r24, 0x20	; 32
     2b4:	28 f3       	brcs	.-54     	; 0x280 <combine_unused_blocks+0xa>
     2b6:	08 95       	ret

000002b8 <internal_malloc>:
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	8f 31       	cpi	r24, 0x1F	; 31
     2c2:	91 05       	cpc	r25, r1
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <internal_malloc+0x10>
     2c6:	73 c0       	rjmp	.+230    	; 0x3ae <internal_malloc+0xf6>
     2c8:	40 91 62 26 	lds	r20, 0x2662	; 0x802662 <totalAllocatedMemory>
     2cc:	50 91 63 26 	lds	r21, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     2d0:	20 e2       	ldi	r18, 0x20	; 32
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	24 1b       	sub	r18, r20
     2d6:	35 0b       	sbc	r19, r21
     2d8:	8c 01       	movw	r16, r24
     2da:	0e 5f       	subi	r16, 0xFE	; 254
     2dc:	1f 4f       	sbci	r17, 0xFF	; 255
     2de:	20 17       	cp	r18, r16
     2e0:	31 07       	cpc	r19, r17
     2e2:	08 f4       	brcc	.+2      	; 0x2e6 <internal_malloc+0x2e>
     2e4:	67 c0       	rjmp	.+206    	; 0x3b4 <internal_malloc+0xfc>
     2e6:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <__data_end>
     2ea:	31 e0       	ldi	r19, 0x01	; 1
     2ec:	32 0f       	add	r19, r18
     2ee:	30 93 c0 25 	sts	0x25C0, r19	; 0x8025c0 <__data_end>
     2f2:	21 11       	cpse	r18, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <internal_malloc+0x46>
     2f6:	2f b7       	in	r18, 0x3f	; 63
     2f8:	20 93 61 26 	sts	0x2661, r18	; 0x802661 <_sreg>
     2fc:	f8 94       	cli
     2fe:	ec 01       	movw	r28, r24
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 3b 01 	call	0x276	; 0x276 <combine_unused_blocks>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	11 c0       	rjmp	.+34     	; 0x334 <internal_malloc+0x7c>
     312:	fc 01       	movw	r30, r24
     314:	ef 53       	subi	r30, 0x3F	; 63
     316:	fa 4d       	sbci	r31, 0xDA	; 218
     318:	40 81       	ld	r20, Z
     31a:	51 81       	ldd	r21, Z+1	; 0x01
     31c:	9a 01       	movw	r18, r20
     31e:	3f 77       	andi	r19, 0x7F	; 127
     320:	55 23       	and	r21, r21
     322:	34 f0       	brlt	.+12     	; 0x330 <internal_malloc+0x78>
     324:	21 15       	cp	r18, r1
     326:	31 05       	cpc	r19, r1
     328:	41 f0       	breq	.+16     	; 0x33a <internal_malloc+0x82>
     32a:	20 17       	cp	r18, r16
     32c:	31 07       	cpc	r19, r17
     32e:	28 f4       	brcc	.+10     	; 0x33a <internal_malloc+0x82>
     330:	82 0f       	add	r24, r18
     332:	93 1f       	adc	r25, r19
     334:	80 32       	cpi	r24, 0x20	; 32
     336:	91 05       	cpc	r25, r1
     338:	60 f3       	brcs	.-40     	; 0x312 <internal_malloc+0x5a>
     33a:	80 32       	cpi	r24, 0x20	; 32
     33c:	91 05       	cpc	r25, r1
     33e:	48 f4       	brcc	.+18     	; 0x352 <internal_malloc+0x9a>
     340:	23 2b       	or	r18, r19
     342:	39 f0       	breq	.+14     	; 0x352 <internal_malloc+0x9a>
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	be 01       	movw	r22, r28
     348:	8f 53       	subi	r24, 0x3F	; 63
     34a:	9a 4d       	sbci	r25, 0xDA	; 218
     34c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
     350:	36 c0       	rjmp	.+108    	; 0x3be <internal_malloc+0x106>
     352:	80 32       	cpi	r24, 0x20	; 32
     354:	91 05       	cpc	r25, r1
     356:	68 f0       	brcs	.+26     	; 0x372 <internal_malloc+0xba>
     358:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <__data_end>
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	80 93 c0 25 	sts	0x25C0, r24	; 0x8025c0 <__data_end>
     362:	81 11       	cpse	r24, r1
     364:	2a c0       	rjmp	.+84     	; 0x3ba <internal_malloc+0x102>
     366:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <_sreg>
     36a:	8f bf       	out	0x3f, r24	; 63
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	26 c0       	rjmp	.+76     	; 0x3be <internal_malloc+0x106>
     372:	10 68       	ori	r17, 0x80	; 128
     374:	fc 01       	movw	r30, r24
     376:	ef 53       	subi	r30, 0x3F	; 63
     378:	fa 4d       	sbci	r31, 0xDA	; 218
     37a:	00 83       	st	Z, r16
     37c:	11 83       	std	Z+1, r17	; 0x01
     37e:	20 91 62 26 	lds	r18, 0x2662	; 0x802662 <totalAllocatedMemory>
     382:	30 91 63 26 	lds	r19, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     386:	c2 0f       	add	r28, r18
     388:	d3 1f       	adc	r29, r19
     38a:	22 96       	adiw	r28, 0x02	; 2
     38c:	c0 93 62 26 	sts	0x2662, r28	; 0x802662 <totalAllocatedMemory>
     390:	d0 93 63 26 	sts	0x2663, r29	; 0x802663 <totalAllocatedMemory+0x1>
     394:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <__data_end>
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	20 93 c0 25 	sts	0x25C0, r18	; 0x8025c0 <__data_end>
     39e:	21 11       	cpse	r18, r1
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <internal_malloc+0xf0>
     3a2:	20 91 61 26 	lds	r18, 0x2661	; 0x802661 <_sreg>
     3a6:	2f bf       	out	0x3f, r18	; 63
     3a8:	8d 53       	subi	r24, 0x3D	; 61
     3aa:	9a 4d       	sbci	r25, 0xDA	; 218
     3ac:	08 c0       	rjmp	.+16     	; 0x3be <internal_malloc+0x106>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	05 c0       	rjmp	.+10     	; 0x3be <internal_malloc+0x106>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <internal_malloc+0x106>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <internal_realloc>:
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	c1 ec       	ldi	r28, 0xC1	; 193
     3ee:	d5 e2       	ldi	r29, 0x25	; 37
     3f0:	6f 31       	cpi	r22, 0x1F	; 31
     3f2:	71 05       	cpc	r23, r1
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <internal_realloc+0x30>
     3f6:	4e c1       	rjmp	.+668    	; 0x694 <__FUSE_REGION_LENGTH__+0x294>
     3f8:	8c 17       	cp	r24, r28
     3fa:	9d 07       	cpc	r25, r29
     3fc:	08 f4       	brcc	.+2      	; 0x400 <__FUSE_REGION_LENGTH__>
     3fe:	4d c1       	rjmp	.+666    	; 0x69a <__FUSE_REGION_LENGTH__+0x29a>
     400:	e5 e2       	ldi	r30, 0x25	; 37
     402:	81 3e       	cpi	r24, 0xE1	; 225
     404:	9e 07       	cpc	r25, r30
     406:	08 f0       	brcs	.+2      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     408:	4b c1       	rjmp	.+662    	; 0x6a0 <__FUSE_REGION_LENGTH__+0x2a0>
     40a:	6b 01       	movw	r12, r22
     40c:	3c 01       	movw	r6, r24
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	21 f4       	brne	.+8      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
     412:	cb 01       	movw	r24, r22
     414:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <internal_malloc>
     418:	50 c1       	rjmp	.+672    	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     41a:	8c 01       	movw	r16, r24
     41c:	02 50       	subi	r16, 0x02	; 2
     41e:	11 09       	sbc	r17, r1
     420:	28 01       	movw	r4, r16
     422:	f8 01       	movw	r30, r16
     424:	e0 80       	ld	r14, Z
     426:	f1 80       	ldd	r15, Z+1	; 0x01
     428:	44 23       	and	r20, r20
     42a:	19 f0       	breq	.+6      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     42c:	ff 20       	and	r15, r15
     42e:	0c f0       	brlt	.+2      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     430:	3a c1       	rjmp	.+628    	; 0x6a6 <__FUSE_REGION_LENGTH__+0x2a6>
     432:	57 01       	movw	r10, r14
     434:	e8 94       	clt
     436:	b7 f8       	bld	r11, 7
     438:	46 01       	movw	r8, r12
     43a:	f2 e0       	ldi	r31, 0x02	; 2
     43c:	8f 0e       	add	r8, r31
     43e:	91 1c       	adc	r9, r1
     440:	a8 14       	cp	r10, r8
     442:	b9 04       	cpc	r11, r9
     444:	09 f4       	brne	.+2      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
     446:	32 c1       	rjmp	.+612    	; 0x6ac <__FUSE_REGION_LENGTH__+0x2ac>
     448:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <__data_end>
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	98 0f       	add	r25, r24
     450:	90 93 c0 25 	sts	0x25C0, r25	; 0x8025c0 <__data_end>
     454:	81 11       	cpse	r24, r1
     456:	04 c0       	rjmp	.+8      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     458:	8f b7       	in	r24, 0x3f	; 63
     45a:	80 93 61 26 	sts	0x2661, r24	; 0x802661 <_sreg>
     45e:	f8 94       	cli
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 3b 01 	call	0x276	; 0x276 <combine_unused_blocks>
     468:	21 ec       	ldi	r18, 0xC1	; 193
     46a:	42 16       	cp	r4, r18
     46c:	25 e2       	ldi	r18, 0x25	; 37
     46e:	52 06       	cpc	r5, r18
     470:	89 f4       	brne	.+34     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     472:	e1 ec       	ldi	r30, 0xC1	; 193
     474:	f5 e2       	ldi	r31, 0x25	; 37
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	17 c0       	rjmp	.+46     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     484:	20 81       	ld	r18, Z
     486:	31 81       	ldd	r19, Z+1	; 0x01
     488:	c9 01       	movw	r24, r18
     48a:	9f 77       	andi	r25, 0x7F	; 127
     48c:	bf 01       	movw	r22, r30
     48e:	e8 0f       	add	r30, r24
     490:	f9 1f       	adc	r31, r25
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
     494:	e1 ec       	ldi	r30, 0xC1	; 193
     496:	f5 e2       	ldi	r31, 0x25	; 37
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	e0 17       	cp	r30, r16
     4a6:	f1 07       	cpc	r31, r17
     4a8:	21 f0       	breq	.+8      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4aa:	45 e2       	ldi	r20, 0x25	; 37
     4ac:	e1 3e       	cpi	r30, 0xE1	; 225
     4ae:	f4 07       	cpc	r31, r20
     4b0:	48 f3       	brcs	.-46     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
     4b2:	d8 01       	movw	r26, r16
     4b4:	aa 0d       	add	r26, r10
     4b6:	bb 1d       	adc	r27, r11
     4b8:	45 e2       	ldi	r20, 0x25	; 37
     4ba:	a1 3e       	cpi	r26, 0xE1	; 225
     4bc:	b4 07       	cpc	r27, r20
     4be:	38 f4       	brcc	.+14     	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
     4c0:	2d 90       	ld	r2, X+
     4c2:	3c 90       	ld	r3, X
     4c4:	11 97       	sbiw	r26, 0x01	; 1
     4c6:	a1 01       	movw	r20, r2
     4c8:	5f 77       	andi	r21, 0x7F	; 127
     4ca:	fd 01       	movw	r30, r26
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
     4ce:	21 2c       	mov	r2, r1
     4d0:	31 2c       	mov	r3, r1
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	ca 14       	cp	r12, r10
     4d8:	db 04       	cpc	r13, r11
     4da:	a0 f4       	brcc	.+40     	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
     4dc:	75 01       	movw	r14, r10
     4de:	ec 18       	sub	r14, r12
     4e0:	fd 08       	sbc	r15, r13
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	e8 16       	cp	r14, r24
     4e6:	f1 04       	cpc	r15, r1
     4e8:	08 f4       	brcc	.+2      	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
     4ea:	c4 c0       	rjmp	.+392    	; 0x674 <__FUSE_REGION_LENGTH__+0x274>
     4ec:	e2 e0       	ldi	r30, 0x02	; 2
     4ee:	ee 1a       	sub	r14, r30
     4f0:	f1 08       	sbc	r15, r1
     4f2:	24 01       	movw	r4, r8
     4f4:	68 94       	set
     4f6:	57 f8       	bld	r5, 7
     4f8:	33 20       	and	r3, r3
     4fa:	0c f4       	brge	.+2      	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     4fc:	52 c0       	rjmp	.+164    	; 0x5a2 <__FUSE_REGION_LENGTH__+0x1a2>
     4fe:	e4 0e       	add	r14, r20
     500:	f5 1e       	adc	r15, r21
     502:	4f c0       	rjmp	.+158    	; 0x5a2 <__FUSE_REGION_LENGTH__+0x1a2>
     504:	33 23       	and	r19, r19
     506:	3c f0       	brlt	.+14     	; 0x516 <__FUSE_REGION_LENGTH__+0x116>
     508:	61 15       	cp	r22, r1
     50a:	71 05       	cpc	r23, r1
     50c:	39 f0       	breq	.+14     	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
     50e:	8a 0d       	add	r24, r10
     510:	9b 1d       	adc	r25, r11
     512:	db 01       	movw	r26, r22
     514:	05 c0       	rjmp	.+10     	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
     516:	d8 01       	movw	r26, r16
     518:	c5 01       	movw	r24, r10
     51a:	02 c0       	rjmp	.+4      	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
     51c:	d8 01       	movw	r26, r16
     51e:	c5 01       	movw	r24, r10
     520:	33 20       	and	r3, r3
     522:	24 f0       	brlt	.+8      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     524:	ef 2b       	or	r30, r31
     526:	11 f0       	breq	.+4      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     528:	84 0f       	add	r24, r20
     52a:	95 1f       	adc	r25, r21
     52c:	8c 15       	cp	r24, r12
     52e:	9d 05       	cpc	r25, r13
     530:	08 f4       	brcc	.+2      	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
     532:	5b c0       	rjmp	.+182    	; 0x5ea <__FUSE_REGION_LENGTH__+0x1ea>
     534:	ad 01       	movw	r20, r26
     536:	4c 0d       	add	r20, r12
     538:	5d 1d       	adc	r21, r13
     53a:	4e 5f       	subi	r20, 0xFE	; 254
     53c:	5f 4f       	sbci	r21, 0xFF	; 255
     53e:	41 5e       	subi	r20, 0xE1	; 225
     540:	55 42       	sbci	r21, 0x25	; 37
     542:	11 f0       	breq	.+4      	; 0x548 <__FUSE_REGION_LENGTH__+0x148>
     544:	08 f0       	brcs	.+2      	; 0x548 <__FUSE_REGION_LENGTH__+0x148>
     546:	53 c0       	rjmp	.+166    	; 0x5ee <__FUSE_REGION_LENGTH__+0x1ee>
     548:	eb 01       	movw	r28, r22
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
     54c:	97 01       	movw	r18, r14
     54e:	01 c0       	rjmp	.+2      	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
     550:	97 01       	movw	r18, r14
     552:	26 01       	movw	r4, r12
     554:	68 94       	set
     556:	57 f8       	bld	r5, 7
     558:	42 e0       	ldi	r20, 0x02	; 2
     55a:	44 0e       	add	r4, r20
     55c:	51 1c       	adc	r5, r1
     55e:	88 15       	cp	r24, r8
     560:	99 05       	cpc	r25, r9
     562:	38 f0       	brcs	.+14     	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
     564:	8c 19       	sub	r24, r12
     566:	9d 09       	sbc	r25, r13
     568:	7c 01       	movw	r14, r24
     56a:	e2 e0       	ldi	r30, 0x02	; 2
     56c:	ee 1a       	sub	r14, r30
     56e:	f1 08       	sbc	r15, r1
     570:	02 c0       	rjmp	.+4      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
     572:	e1 2c       	mov	r14, r1
     574:	f1 2c       	mov	r15, r1
     576:	33 23       	and	r19, r19
     578:	a4 f0       	brlt	.+40     	; 0x5a2 <__FUSE_REGION_LENGTH__+0x1a2>
     57a:	20 97       	sbiw	r28, 0x00	; 0
     57c:	91 f0       	breq	.+36     	; 0x5a2 <__FUSE_REGION_LENGTH__+0x1a2>
     57e:	a5 01       	movw	r20, r10
     580:	42 50       	subi	r20, 0x02	; 2
     582:	51 09       	sbc	r21, r1
     584:	b3 01       	movw	r22, r6
     586:	ce 01       	movw	r24, r28
     588:	02 96       	adiw	r24, 0x02	; 2
     58a:	0e 94 31 0c 	call	0x1862	; 0x1862 <memcpy>
     58e:	a5 01       	movw	r20, r10
     590:	41 50       	subi	r20, 0x01	; 1
     592:	51 09       	sbc	r21, r1
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	c3 01       	movw	r24, r6
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <memset>
     5a0:	8e 01       	movw	r16, r28
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	ef 16       	cp	r14, r31
     5a6:	f1 04       	cpc	r15, r1
     5a8:	18 f4       	brcc	.+6      	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
     5aa:	4e 0c       	add	r4, r14
     5ac:	5f 1c       	adc	r5, r15
     5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <__FUSE_REGION_LENGTH__+0x1c0>
     5b0:	f2 01       	movw	r30, r4
     5b2:	ff 77       	andi	r31, 0x7F	; 127
     5b4:	e0 0f       	add	r30, r16
     5b6:	f1 1f       	adc	r31, r17
     5b8:	e0 82       	st	Z, r14
     5ba:	f1 82       	std	Z+1, r15	; 0x01
     5bc:	e1 2c       	mov	r14, r1
     5be:	f1 2c       	mov	r15, r1
     5c0:	f8 01       	movw	r30, r16
     5c2:	40 82       	st	Z, r4
     5c4:	51 82       	std	Z+1, r5	; 0x01
     5c6:	a8 14       	cp	r10, r8
     5c8:	b9 04       	cpc	r11, r9
     5ca:	98 f1       	brcs	.+102    	; 0x632 <__FUSE_REGION_LENGTH__+0x232>
     5cc:	44 c0       	rjmp	.+136    	; 0x656 <__FUSE_REGION_LENGTH__+0x256>
     5ce:	e8 80       	ld	r14, Y
     5d0:	f9 80       	ldd	r15, Y+1	; 0x01
     5d2:	c7 01       	movw	r24, r14
     5d4:	9f 77       	andi	r25, 0x7F	; 127
     5d6:	ff 20       	and	r15, r15
     5d8:	2c f0       	brlt	.+10     	; 0x5e4 <__FUSE_REGION_LENGTH__+0x1e4>
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	71 f0       	breq	.+28     	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
     5de:	88 15       	cp	r24, r8
     5e0:	99 05       	cpc	r25, r9
     5e2:	58 f4       	brcc	.+22     	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
     5e4:	c8 0f       	add	r28, r24
     5e6:	d9 1f       	adc	r29, r25
     5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5ea:	c5 01       	movw	r24, r10
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     5ee:	c5 01       	movw	r24, r10
     5f0:	9e 01       	movw	r18, r28
     5f2:	f5 e2       	ldi	r31, 0x25	; 37
     5f4:	c1 3e       	cpi	r28, 0xE1	; 225
     5f6:	df 07       	cpc	r29, r31
     5f8:	50 f3       	brcs	.-44     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
     5fa:	21 5e       	subi	r18, 0xE1	; 225
     5fc:	35 42       	sbci	r19, 0x25	; 37
     5fe:	60 f4       	brcc	.+24     	; 0x618 <__FUSE_REGION_LENGTH__+0x218>
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	09 f0       	breq	.+2      	; 0x606 <__FUSE_REGION_LENGTH__+0x206>
     604:	a3 cf       	rjmp	.-186    	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
     606:	9e 01       	movw	r18, r28
     608:	2c 0d       	add	r18, r12
     60a:	3d 1d       	adc	r19, r13
     60c:	2e 5f       	subi	r18, 0xFE	; 254
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	21 5e       	subi	r18, 0xE1	; 225
     612:	35 42       	sbci	r19, 0x25	; 37
     614:	08 f4       	brcc	.+2      	; 0x618 <__FUSE_REGION_LENGTH__+0x218>
     616:	9c cf       	rjmp	.-200    	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
     618:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <__data_end>
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 93 c0 25 	sts	0x25C0, r24	; 0x8025c0 <__data_end>
     622:	81 11       	cpse	r24, r1
     624:	45 c0       	rjmp	.+138    	; 0x6b0 <__FUSE_REGION_LENGTH__+0x2b0>
     626:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <_sreg>
     62a:	8f bf       	out	0x3f, r24	; 63
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	44 c0       	rjmp	.+136    	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     632:	ca 18       	sub	r12, r10
     634:	db 08       	sbc	r13, r11
     636:	ec 0c       	add	r14, r12
     638:	fd 1c       	adc	r15, r13
     63a:	20 91 62 26 	lds	r18, 0x2662	; 0x802662 <totalAllocatedMemory>
     63e:	30 91 63 26 	lds	r19, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     642:	e2 0e       	add	r14, r18
     644:	f3 1e       	adc	r15, r19
     646:	f2 e0       	ldi	r31, 0x02	; 2
     648:	ef 0e       	add	r14, r31
     64a:	f1 1c       	adc	r15, r1
     64c:	e0 92 62 26 	sts	0x2662, r14	; 0x802662 <totalAllocatedMemory>
     650:	f0 92 63 26 	sts	0x2663, r15	; 0x802663 <totalAllocatedMemory+0x1>
     654:	0f c0       	rjmp	.+30     	; 0x674 <__FUSE_REGION_LENGTH__+0x274>
     656:	ca 18       	sub	r12, r10
     658:	db 08       	sbc	r13, r11
     65a:	60 91 62 26 	lds	r22, 0x2662	; 0x802662 <totalAllocatedMemory>
     65e:	70 91 63 26 	lds	r23, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     662:	c6 0e       	add	r12, r22
     664:	d7 1e       	adc	r13, r23
     666:	22 e0       	ldi	r18, 0x02	; 2
     668:	c2 0e       	add	r12, r18
     66a:	d1 1c       	adc	r13, r1
     66c:	c0 92 62 26 	sts	0x2662, r12	; 0x802662 <totalAllocatedMemory>
     670:	d0 92 63 26 	sts	0x2663, r13	; 0x802663 <totalAllocatedMemory+0x1>
     674:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <__data_end>
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	80 93 c0 25 	sts	0x25C0, r24	; 0x8025c0 <__data_end>
     67e:	81 11       	cpse	r24, r1
     680:	03 c0       	rjmp	.+6      	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
     682:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <_sreg>
     686:	8f bf       	out	0x3f, r24	; 63
     688:	01 15       	cp	r16, r1
     68a:	11 05       	cpc	r17, r1
     68c:	a1 f0       	breq	.+40     	; 0x6b6 <__FUSE_REGION_LENGTH__+0x2b6>
     68e:	c8 01       	movw	r24, r16
     690:	02 96       	adiw	r24, 0x02	; 2
     692:	13 c0       	rjmp	.+38     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	10 c0       	rjmp	.+32     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0d c0       	rjmp	.+26     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0a c0       	rjmp	.+20     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	07 c0       	rjmp	.+14     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     6ac:	c3 01       	movw	r24, r6
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	3f 90       	pop	r3
     6dc:	2f 90       	pop	r2
     6de:	08 95       	ret

000006e0 <mem_manager_test>:
	}
}

#if DEBUG_TRACE

void mem_manager_test(void) {
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	uint8_t i;
	mem_loc *data1, *data2, *data3, *data4;
	uint32_t actual;
	uint16_t header;

	data1 = m_malloc(4);
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <internal_malloc>
     6f0:	ec 01       	movw	r28, r24
	memset(data1, 0xaa, 4);
     6f2:	8a ea       	ldi	r24, 0xAA	; 170
     6f4:	9a ea       	ldi	r25, 0xAA	; 170
     6f6:	88 83       	st	Y, r24
     6f8:	99 83       	std	Y+1, r25	; 0x01
     6fa:	8a 83       	std	Y+2, r24	; 0x02
     6fc:	9b 83       	std	Y+3, r25	; 0x03
	memcpy(&actual, &memory[2], 4);
     6fe:	e1 ec       	ldi	r30, 0xC1	; 193
     700:	f5 e2       	ldi	r31, 0x25	; 37
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	a4 81       	ldd	r26, Z+4	; 0x04
     708:	b5 81       	ldd	r27, Z+5	; 0x05
	memcpy(&header, memory, HEADER_SIZE);
     70a:	00 81       	ld	r16, Z
     70c:	11 81       	ldd	r17, Z+1	; 0x01
	m_assert(actual == 0xaaaaaaaa);
     70e:	8a 3a       	cpi	r24, 0xAA	; 170
     710:	9a 4a       	sbci	r25, 0xAA	; 170
     712:	aa 4a       	sbci	r26, 0xAA	; 170
     714:	ba 4a       	sbci	r27, 0xAA	; 170
     716:	59 f0       	breq	.+22     	; 0x72e <mem_manager_test+0x4e>
     718:	22 e8       	ldi	r18, 0x82	; 130
     71a:	30 e2       	ldi	r19, 0x20	; 32
     71c:	43 e1       	ldi	r20, 0x13	; 19
     71e:	51 e0       	ldi	r21, 0x01	; 1
     720:	67 e9       	ldi	r22, 0x97	; 151
     722:	70 e2       	ldi	r23, 0x20	; 32
     724:	8e e4       	ldi	r24, 0x4E	; 78
     726:	93 e2       	ldi	r25, 0x23	; 35
     728:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     72c:	ff cf       	rjmp	.-2      	; 0x72c <mem_manager_test+0x4c>
	m_assert(header == (6 | IN_USE_bm));
     72e:	06 30       	cpi	r16, 0x06	; 6
     730:	10 48       	sbci	r17, 0x80	; 128
     732:	59 f0       	breq	.+22     	; 0x74a <mem_manager_test+0x6a>
     734:	20 eb       	ldi	r18, 0xB0	; 176
     736:	30 e2       	ldi	r19, 0x20	; 32
     738:	44 e1       	ldi	r20, 0x14	; 20
     73a:	51 e0       	ldi	r21, 0x01	; 1
     73c:	67 e9       	ldi	r22, 0x97	; 151
     73e:	70 e2       	ldi	r23, 0x20	; 32
     740:	8e e4       	ldi	r24, 0x4E	; 78
     742:	93 e2       	ldi	r25, 0x23	; 35
     744:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     748:	ff cf       	rjmp	.-2      	; 0x748 <mem_manager_test+0x68>
	m_assert(totalAllocatedMemory == 6);
     74a:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     74e:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     752:	06 97       	sbiw	r24, 0x06	; 6
     754:	59 f0       	breq	.+22     	; 0x76c <mem_manager_test+0x8c>
     756:	2a ec       	ldi	r18, 0xCA	; 202
     758:	30 e2       	ldi	r19, 0x20	; 32
     75a:	45 e1       	ldi	r20, 0x15	; 21
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	67 e9       	ldi	r22, 0x97	; 151
     760:	70 e2       	ldi	r23, 0x20	; 32
     762:	8e e4       	ldi	r24, 0x4E	; 78
     764:	93 e2       	ldi	r25, 0x23	; 35
     766:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     76a:	ff cf       	rjmp	.-2      	; 0x76a <mem_manager_test+0x8a>
	// memory: 06 80 aa aa   aa aa

	data2 = m_malloc(4);
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <internal_malloc>
	memset(data2, 0xbb, 4);
     774:	2b eb       	ldi	r18, 0xBB	; 187
     776:	3b eb       	ldi	r19, 0xBB	; 187
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
     77c:	31 83       	std	Z+1, r19	; 0x01
     77e:	22 83       	std	Z+2, r18	; 0x02
     780:	33 83       	std	Z+3, r19	; 0x03
	actual = 0;
	memcpy(&actual, &memory[8], 4);
     782:	80 91 c9 25 	lds	r24, 0x25C9	; 0x8025c9 <memory+0x8>
     786:	90 91 ca 25 	lds	r25, 0x25CA	; 0x8025ca <memory+0x9>
     78a:	a0 91 cb 25 	lds	r26, 0x25CB	; 0x8025cb <memory+0xa>
     78e:	b0 91 cc 25 	lds	r27, 0x25CC	; 0x8025cc <memory+0xb>
	m_assert(actual == 0xbbbbbbbb);
     792:	8b 3b       	cpi	r24, 0xBB	; 187
     794:	9b 4b       	sbci	r25, 0xBB	; 187
     796:	ab 4b       	sbci	r26, 0xBB	; 187
     798:	bb 4b       	sbci	r27, 0xBB	; 187
     79a:	59 f0       	breq	.+22     	; 0x7b2 <mem_manager_test+0xd2>
     79c:	24 ee       	ldi	r18, 0xE4	; 228
     79e:	30 e2       	ldi	r19, 0x20	; 32
     7a0:	4c e1       	ldi	r20, 0x1C	; 28
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	67 e9       	ldi	r22, 0x97	; 151
     7a6:	70 e2       	ldi	r23, 0x20	; 32
     7a8:	8e e4       	ldi	r24, 0x4E	; 78
     7aa:	93 e2       	ldi	r25, 0x23	; 35
     7ac:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <mem_manager_test+0xd0>
	m_assert(totalAllocatedMemory == 12);
     7b2:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     7b6:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     7ba:	0c 97       	sbiw	r24, 0x0c	; 12
     7bc:	59 f0       	breq	.+22     	; 0x7d4 <mem_manager_test+0xf4>
     7be:	29 ef       	ldi	r18, 0xF9	; 249
     7c0:	30 e2       	ldi	r19, 0x20	; 32
     7c2:	4d e1       	ldi	r20, 0x1D	; 29
     7c4:	51 e0       	ldi	r21, 0x01	; 1
     7c6:	67 e9       	ldi	r22, 0x97	; 151
     7c8:	70 e2       	ldi	r23, 0x20	; 32
     7ca:	8e e4       	ldi	r24, 0x4E	; 78
     7cc:	93 e2       	ldi	r25, 0x23	; 35
     7ce:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <mem_manager_test+0xf2>
	// memory: 06 80 aa aa   aa aa 06 80   bb bb bb bb

	m_free(data1);
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 09 01 	call	0x212	; 0x212 <internal_free>
	memcpy(&header, memory, HEADER_SIZE);
     7da:	80 91 c1 25 	lds	r24, 0x25C1	; 0x8025c1 <memory>
     7de:	90 91 c2 25 	lds	r25, 0x25C2	; 0x8025c2 <memory+0x1>
	m_assert(header == 6);
     7e2:	06 97       	sbiw	r24, 0x06	; 6
     7e4:	59 f0       	breq	.+22     	; 0x7fc <mem_manager_test+0x11c>
     7e6:	24 e1       	ldi	r18, 0x14	; 20
     7e8:	31 e2       	ldi	r19, 0x21	; 33
     7ea:	42 e2       	ldi	r20, 0x22	; 34
     7ec:	51 e0       	ldi	r21, 0x01	; 1
     7ee:	67 e9       	ldi	r22, 0x97	; 151
     7f0:	70 e2       	ldi	r23, 0x20	; 32
     7f2:	8e e4       	ldi	r24, 0x4E	; 78
     7f4:	93 e2       	ldi	r25, 0x23	; 35
     7f6:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     7fa:	ff cf       	rjmp	.-2      	; 0x7fa <mem_manager_test+0x11a>
	m_assert(totalAllocatedMemory == 6);
     7fc:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     800:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     804:	06 97       	sbiw	r24, 0x06	; 6
     806:	59 f0       	breq	.+22     	; 0x81e <mem_manager_test+0x13e>
     808:	2a ec       	ldi	r18, 0xCA	; 202
     80a:	30 e2       	ldi	r19, 0x20	; 32
     80c:	43 e2       	ldi	r20, 0x23	; 35
     80e:	51 e0       	ldi	r21, 0x01	; 1
     810:	67 e9       	ldi	r22, 0x97	; 151
     812:	70 e2       	ldi	r23, 0x20	; 32
     814:	8e e4       	ldi	r24, 0x4E	; 78
     816:	93 e2       	ldi	r25, 0x23	; 35
     818:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     81c:	ff cf       	rjmp	.-2      	; 0x81c <mem_manager_test+0x13c>
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb

	data1 = m_malloc(6);
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <internal_malloc>
	memset(data1, 0xcc, 6);
     826:	46 e0       	ldi	r20, 0x06	; 6
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	6c ec       	ldi	r22, 0xCC	; 204
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <memset>
	for (i = 0; i < 6; i++)
     832:	c0 e0       	ldi	r28, 0x00	; 0
     834:	13 c0       	rjmp	.+38     	; 0x85c <mem_manager_test+0x17c>
		m_assert(memory[i + 12 + HEADER_SIZE] == 0xcc);
     836:	ec 2f       	mov	r30, r28
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	e1 53       	subi	r30, 0x31	; 49
     83c:	fa 4d       	sbci	r31, 0xDA	; 218
     83e:	80 81       	ld	r24, Z
     840:	8c 3c       	cpi	r24, 0xCC	; 204
     842:	59 f0       	breq	.+22     	; 0x85a <mem_manager_test+0x17a>
     844:	20 e2       	ldi	r18, 0x20	; 32
     846:	31 e2       	ldi	r19, 0x21	; 33
     848:	49 e2       	ldi	r20, 0x29	; 41
     84a:	51 e0       	ldi	r21, 0x01	; 1
     84c:	67 e9       	ldi	r22, 0x97	; 151
     84e:	70 e2       	ldi	r23, 0x20	; 32
     850:	8e e4       	ldi	r24, 0x4E	; 78
     852:	93 e2       	ldi	r25, 0x23	; 35
     854:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     858:	ff cf       	rjmp	.-2      	; 0x858 <mem_manager_test+0x178>
	m_assert(totalAllocatedMemory == 6);
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb

	data1 = m_malloc(6);
	memset(data1, 0xcc, 6);
	for (i = 0; i < 6; i++)
     85a:	cf 5f       	subi	r28, 0xFF	; 255
     85c:	c6 30       	cpi	r28, 0x06	; 6
     85e:	58 f3       	brcs	.-42     	; 0x836 <mem_manager_test+0x156>
		m_assert(memory[i + 12 + HEADER_SIZE] == 0xcc);
	memcpy(&header, &memory[12], HEADER_SIZE);
     860:	80 91 cd 25 	lds	r24, 0x25CD	; 0x8025cd <memory+0xc>
     864:	90 91 ce 25 	lds	r25, 0x25CE	; 0x8025ce <memory+0xd>
	m_assert(header == ((6 + HEADER_SIZE) | IN_USE_bm));
     868:	88 30       	cpi	r24, 0x08	; 8
     86a:	90 48       	sbci	r25, 0x80	; 128
     86c:	59 f0       	breq	.+22     	; 0x884 <mem_manager_test+0x1a4>
     86e:	25 e4       	ldi	r18, 0x45	; 69
     870:	31 e2       	ldi	r19, 0x21	; 33
     872:	4b e2       	ldi	r20, 0x2B	; 43
     874:	51 e0       	ldi	r21, 0x01	; 1
     876:	67 e9       	ldi	r22, 0x97	; 151
     878:	70 e2       	ldi	r23, 0x20	; 32
     87a:	8e e4       	ldi	r24, 0x4E	; 78
     87c:	93 e2       	ldi	r25, 0x23	; 35
     87e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     882:	ff cf       	rjmp	.-2      	; 0x882 <mem_manager_test+0x1a2>
	m_assert(totalAllocatedMemory == 14);
     884:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     888:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     88c:	0e 97       	sbiw	r24, 0x0e	; 14
     88e:	59 f0       	breq	.+22     	; 0x8a6 <mem_manager_test+0x1c6>
     890:	2f e6       	ldi	r18, 0x6F	; 111
     892:	31 e2       	ldi	r19, 0x21	; 33
     894:	4c e2       	ldi	r20, 0x2C	; 44
     896:	51 e0       	ldi	r21, 0x01	; 1
     898:	67 e9       	ldi	r22, 0x97	; 151
     89a:	70 e2       	ldi	r23, 0x20	; 32
     89c:	8e e4       	ldi	r24, 0x4E	; 78
     89e:	93 e2       	ldi	r25, 0x23	; 35
     8a0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <mem_manager_test+0x1c4>
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc

	data3 = m_malloc(8);
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <internal_malloc>
     8ae:	8c 01       	movw	r16, r24
	memset(data3, 0xdd, 8);
     8b0:	48 e0       	ldi	r20, 0x08	; 8
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	6d ed       	ldi	r22, 0xDD	; 221
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <memset>
	for (i = 0; i < 8; i++)
     8bc:	c0 e0       	ldi	r28, 0x00	; 0
     8be:	13 c0       	rjmp	.+38     	; 0x8e6 <mem_manager_test+0x206>
		m_assert(memory[i + 20 + HEADER_SIZE] == 0xdd);
     8c0:	ec 2f       	mov	r30, r28
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e9 52       	subi	r30, 0x29	; 41
     8c6:	fa 4d       	sbci	r31, 0xDA	; 218
     8c8:	80 81       	ld	r24, Z
     8ca:	8d 3d       	cpi	r24, 0xDD	; 221
     8cc:	59 f0       	breq	.+22     	; 0x8e4 <mem_manager_test+0x204>
     8ce:	2a e8       	ldi	r18, 0x8A	; 138
     8d0:	31 e2       	ldi	r19, 0x21	; 33
     8d2:	42 e3       	ldi	r20, 0x32	; 50
     8d4:	51 e0       	ldi	r21, 0x01	; 1
     8d6:	67 e9       	ldi	r22, 0x97	; 151
     8d8:	70 e2       	ldi	r23, 0x20	; 32
     8da:	8e e4       	ldi	r24, 0x4E	; 78
     8dc:	93 e2       	ldi	r25, 0x23	; 35
     8de:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <mem_manager_test+0x202>
	m_assert(totalAllocatedMemory == 14);
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc

	data3 = m_malloc(8);
	memset(data3, 0xdd, 8);
	for (i = 0; i < 8; i++)
     8e4:	cf 5f       	subi	r28, 0xFF	; 255
     8e6:	c8 30       	cpi	r28, 0x08	; 8
     8e8:	58 f3       	brcs	.-42     	; 0x8c0 <mem_manager_test+0x1e0>
		m_assert(memory[i + 20 + HEADER_SIZE] == 0xdd);
	m_assert(totalAllocatedMemory == 24);
     8ea:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     8ee:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     8f2:	48 97       	sbiw	r24, 0x18	; 24
     8f4:	59 f0       	breq	.+22     	; 0x90c <mem_manager_test+0x22c>
     8f6:	2f ea       	ldi	r18, 0xAF	; 175
     8f8:	31 e2       	ldi	r19, 0x21	; 33
     8fa:	43 e3       	ldi	r20, 0x33	; 51
     8fc:	51 e0       	ldi	r21, 0x01	; 1
     8fe:	67 e9       	ldi	r22, 0x97	; 151
     900:	70 e2       	ldi	r23, 0x20	; 32
     902:	8e e4       	ldi	r24, 0x4E	; 78
     904:	93 e2       	ldi	r25, 0x23	; 35
     906:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     90a:	ff cf       	rjmp	.-2      	; 0x90a <mem_manager_test+0x22a>
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc    0a 80 dd dd   dd dd dd dd   dd dd 00 00

	// extend block at end of list with space remaining
	data3 = m_realloc(data3, 10);
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	6a e0       	ldi	r22, 0x0A	; 10
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	c8 01       	movw	r24, r16
     914:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
     918:	8c 01       	movw	r16, r24
	memset(data3, 0xdd, 10);
     91a:	4a e0       	ldi	r20, 0x0A	; 10
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	6d ed       	ldi	r22, 0xDD	; 221
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 3a 0c 	call	0x1874	; 0x1874 <memset>
	memcpy(&header, &memory[0x14], HEADER_SIZE);
     926:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <memory+0x14>
     92a:	90 91 d6 25 	lds	r25, 0x25D6	; 0x8025d6 <memory+0x15>
	m_assert(header == (0x000c | IN_USE_bm));
     92e:	8c 30       	cpi	r24, 0x0C	; 12
     930:	90 48       	sbci	r25, 0x80	; 128
     932:	59 f0       	breq	.+22     	; 0x94a <mem_manager_test+0x26a>
     934:	2a ec       	ldi	r18, 0xCA	; 202
     936:	31 e2       	ldi	r19, 0x21	; 33
     938:	4a e3       	ldi	r20, 0x3A	; 58
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	67 e9       	ldi	r22, 0x97	; 151
     93e:	70 e2       	ldi	r23, 0x20	; 32
     940:	8e e4       	ldi	r24, 0x4E	; 78
     942:	93 e2       	ldi	r25, 0x23	; 35
     944:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     948:	ff cf       	rjmp	.-2      	; 0x948 <mem_manager_test+0x268>
	m_assert(totalAllocatedMemory == 14);
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc

	data3 = m_malloc(8);
	memset(data3, 0xdd, 8);
	for (i = 0; i < 8; i++)
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	13 c0       	rjmp	.+38     	; 0x974 <mem_manager_test+0x294>
	data3 = m_realloc(data3, 10);
	memset(data3, 0xdd, 10);
	memcpy(&header, &memory[0x14], HEADER_SIZE);
	m_assert(header == (0x000c | IN_USE_bm));
	for (i = 0; i < 10; i++)
		m_assert(memory[i + 20 + HEADER_SIZE] == 0xdd);
     94e:	ec 2f       	mov	r30, r28
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	e9 52       	subi	r30, 0x29	; 41
     954:	fa 4d       	sbci	r31, 0xDA	; 218
     956:	80 81       	ld	r24, Z
     958:	8d 3d       	cpi	r24, 0xDD	; 221
     95a:	59 f0       	breq	.+22     	; 0x972 <mem_manager_test+0x292>
     95c:	2a e8       	ldi	r18, 0x8A	; 138
     95e:	31 e2       	ldi	r19, 0x21	; 33
     960:	4c e3       	ldi	r20, 0x3C	; 60
     962:	51 e0       	ldi	r21, 0x01	; 1
     964:	67 e9       	ldi	r22, 0x97	; 151
     966:	70 e2       	ldi	r23, 0x20	; 32
     968:	8e e4       	ldi	r24, 0x4E	; 78
     96a:	93 e2       	ldi	r25, 0x23	; 35
     96c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     970:	ff cf       	rjmp	.-2      	; 0x970 <mem_manager_test+0x290>
	// extend block at end of list with space remaining
	data3 = m_realloc(data3, 10);
	memset(data3, 0xdd, 10);
	memcpy(&header, &memory[0x14], HEADER_SIZE);
	m_assert(header == (0x000c | IN_USE_bm));
	for (i = 0; i < 10; i++)
     972:	cf 5f       	subi	r28, 0xFF	; 255
     974:	ca 30       	cpi	r28, 0x0A	; 10
     976:	58 f3       	brcs	.-42     	; 0x94e <mem_manager_test+0x26e>
		m_assert(memory[i + 20 + HEADER_SIZE] == 0xdd);
	m_assert(totalAllocatedMemory == 26);
     978:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     97c:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     980:	4a 97       	sbiw	r24, 0x1a	; 26
     982:	59 f0       	breq	.+22     	; 0x99a <mem_manager_test+0x2ba>
     984:	29 ee       	ldi	r18, 0xE9	; 233
     986:	31 e2       	ldi	r19, 0x21	; 33
     988:	4d e3       	ldi	r20, 0x3D	; 61
     98a:	51 e0       	ldi	r21, 0x01	; 1
     98c:	67 e9       	ldi	r22, 0x97	; 151
     98e:	70 e2       	ldi	r23, 0x20	; 32
     990:	8e e4       	ldi	r24, 0x4E	; 78
     992:	93 e2       	ldi	r25, 0x23	; 35
     994:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     998:	ff cf       	rjmp	.-2      	; 0x998 <mem_manager_test+0x2b8>
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc    0c 80 dd dd   dd dd dd dd   dd dd dd dd

	// extend block at end of list with no space remaining
	data4 = m_realloc(data3, 12);
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	6c e0       	ldi	r22, 0x0C	; 12
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(data4 == NULL);
     9a6:	89 2b       	or	r24, r25
     9a8:	59 f0       	breq	.+22     	; 0x9c0 <mem_manager_test+0x2e0>
     9aa:	24 e0       	ldi	r18, 0x04	; 4
     9ac:	32 e2       	ldi	r19, 0x22	; 34
     9ae:	42 e4       	ldi	r20, 0x42	; 66
     9b0:	51 e0       	ldi	r21, 0x01	; 1
     9b2:	67 e9       	ldi	r22, 0x97	; 151
     9b4:	70 e2       	ldi	r23, 0x20	; 32
     9b6:	8e e4       	ldi	r24, 0x4E	; 78
     9b8:	93 e2       	ldi	r25, 0x23	; 35
     9ba:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     9be:	ff cf       	rjmp	.-2      	; 0x9be <mem_manager_test+0x2de>
	memcpy(&header, &memory[20], HEADER_SIZE);
     9c0:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <memory+0x14>
     9c4:	90 91 d6 25 	lds	r25, 0x25D6	; 0x8025d6 <memory+0x15>
	m_assert(header == (0x000c | IN_USE_bm));
     9c8:	8c 30       	cpi	r24, 0x0C	; 12
     9ca:	90 48       	sbci	r25, 0x80	; 128
     9cc:	59 f0       	breq	.+22     	; 0x9e4 <mem_manager_test+0x304>
     9ce:	2a ec       	ldi	r18, 0xCA	; 202
     9d0:	31 e2       	ldi	r19, 0x21	; 33
     9d2:	44 e4       	ldi	r20, 0x44	; 68
     9d4:	51 e0       	ldi	r21, 0x01	; 1
     9d6:	67 e9       	ldi	r22, 0x97	; 151
     9d8:	70 e2       	ldi	r23, 0x20	; 32
     9da:	8e e4       	ldi	r24, 0x4E	; 78
     9dc:	93 e2       	ldi	r25, 0x23	; 35
     9de:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <mem_manager_test+0x302>
	m_assert(totalAllocatedMemory == 26);
     9e4:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     9e8:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     9ec:	4a 97       	sbiw	r24, 0x1a	; 26
     9ee:	59 f0       	breq	.+22     	; 0xa06 <mem_manager_test+0x326>
     9f0:	29 ee       	ldi	r18, 0xE9	; 233
     9f2:	31 e2       	ldi	r19, 0x21	; 33
     9f4:	45 e4       	ldi	r20, 0x45	; 69
     9f6:	51 e0       	ldi	r21, 0x01	; 1
     9f8:	67 e9       	ldi	r22, 0x97	; 151
     9fa:	70 e2       	ldi	r23, 0x20	; 32
     9fc:	8e e4       	ldi	r24, 0x4E	; 78
     9fe:	93 e2       	ldi	r25, 0x23	; 35
     a00:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     a04:	ff cf       	rjmp	.-2      	; 0xa04 <mem_manager_test+0x324>
	// memory: 06 00 aa aa   aa aa 06 80   bb bb bb bb   08 80 cc cc   cc cc cc cc    0c 80 dd dd   dd dd dd dd   dd dd dd dd
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <mem_manager_test2>:
					0x80, 0xcc, 0x04, 0, 0, 0, 0x02, 0x80 };

void mem_manager_test2(void) {
	mem_loc data1;
	// extend block and cause it to move locations
	totalAllocatedMemory = 9;
     a10:	89 e0       	ldi	r24, 0x09	; 9
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     a18:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	memcpy(memory, mem2, MEMORY_SIZE);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	e0 e6       	ldi	r30, 0x60	; 96
     a20:	f0 e2       	ldi	r31, 0x20	; 32
     a22:	a1 ec       	ldi	r26, 0xC1	; 193
     a24:	b5 e2       	ldi	r27, 0x25	; 37
     a26:	01 90       	ld	r0, Z+
     a28:	0d 92       	st	X+, r0
     a2a:	8a 95       	dec	r24
     a2c:	e1 f7       	brne	.-8      	; 0xa26 <mem_manager_test2+0x16>
	data1 = m_realloc(memory + 0x1a + HEADER_SIZE, 11);
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	6b e0       	ldi	r22, 0x0B	; 11
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	8d ed       	ldi	r24, 0xDD	; 221
     a36:	95 e2       	ldi	r25, 0x25	; 37
     a38:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(data1 != NULL);
     a3c:	89 2b       	or	r24, r25
     a3e:	59 f4       	brne	.+22     	; 0xa56 <mem_manager_test2+0x46>
     a40:	22 e1       	ldi	r18, 0x12	; 18
     a42:	32 e2       	ldi	r19, 0x22	; 34
     a44:	43 e6       	ldi	r20, 0x63	; 99
     a46:	51 e0       	ldi	r21, 0x01	; 1
     a48:	67 e9       	ldi	r22, 0x97	; 151
     a4a:	70 e2       	ldi	r23, 0x20	; 32
     a4c:	8c e3       	ldi	r24, 0x3C	; 60
     a4e:	93 e2       	ldi	r25, 0x23	; 35
     a50:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     a54:	ff cf       	rjmp	.-2      	; 0xa54 <mem_manager_test2+0x44>
	m_assert(memcmp(mem3, memory, MEMORY_SIZE) == 0);
     a56:	40 e2       	ldi	r20, 0x20	; 32
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	61 ec       	ldi	r22, 0xC1	; 193
     a5c:	75 e2       	ldi	r23, 0x25	; 37
     a5e:	80 e4       	ldi	r24, 0x40	; 64
     a60:	90 e2       	ldi	r25, 0x20	; 32
     a62:	0e 94 24 0c 	call	0x1848	; 0x1848 <memcmp>
     a66:	89 2b       	or	r24, r25
     a68:	59 f0       	breq	.+22     	; 0xa80 <mem_manager_test2+0x70>
     a6a:	20 e2       	ldi	r18, 0x20	; 32
     a6c:	32 e2       	ldi	r19, 0x22	; 34
     a6e:	44 e6       	ldi	r20, 0x64	; 100
     a70:	51 e0       	ldi	r21, 0x01	; 1
     a72:	67 e9       	ldi	r22, 0x97	; 151
     a74:	70 e2       	ldi	r23, 0x20	; 32
     a76:	8c e3       	ldi	r24, 0x3C	; 60
     a78:	93 e2       	ldi	r25, 0x23	; 35
     a7a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     a7e:	ff cf       	rjmp	.-2      	; 0xa7e <mem_manager_test2+0x6e>
	m_assert(totalAllocatedMemory == 18);
     a80:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     a84:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     a88:	42 97       	sbiw	r24, 0x12	; 18
     a8a:	59 f0       	breq	.+22     	; 0xaa2 <mem_manager_test2+0x92>
     a8c:	27 e4       	ldi	r18, 0x47	; 71
     a8e:	32 e2       	ldi	r19, 0x22	; 34
     a90:	45 e6       	ldi	r20, 0x65	; 101
     a92:	51 e0       	ldi	r21, 0x01	; 1
     a94:	67 e9       	ldi	r22, 0x97	; 151
     a96:	70 e2       	ldi	r23, 0x20	; 32
     a98:	8c e3       	ldi	r24, 0x3C	; 60
     a9a:	93 e2       	ldi	r25, 0x23	; 35
     a9c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <mem_manager_test2+0x90>

	totalAllocatedMemory = 7;
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     aaa:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	memcpy(memory, mem2, MEMORY_SIZE);
     aae:	80 e2       	ldi	r24, 0x20	; 32
     ab0:	e0 e6       	ldi	r30, 0x60	; 96
     ab2:	f0 e2       	ldi	r31, 0x20	; 32
     ab4:	a1 ec       	ldi	r26, 0xC1	; 193
     ab6:	b5 e2       	ldi	r27, 0x25	; 37
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	8a 95       	dec	r24
     abe:	e1 f7       	brne	.-8      	; 0xab8 <mem_manager_test2+0xa8>
	memory[31] = 0;
     ac0:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <memory+0x1f>
	mem3[31] = 0;
     ac4:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <mem3+0x1f>
	data1 = m_realloc(memory + 0x1a + HEADER_SIZE, 11);
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	6b e0       	ldi	r22, 0x0B	; 11
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	8d ed       	ldi	r24, 0xDD	; 221
     ad0:	95 e2       	ldi	r25, 0x25	; 37
     ad2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(data1 != NULL);
     ad6:	89 2b       	or	r24, r25
     ad8:	59 f4       	brne	.+22     	; 0xaf0 <mem_manager_test2+0xe0>
     ada:	22 e1       	ldi	r18, 0x12	; 18
     adc:	32 e2       	ldi	r19, 0x22	; 34
     ade:	4c e6       	ldi	r20, 0x6C	; 108
     ae0:	51 e0       	ldi	r21, 0x01	; 1
     ae2:	67 e9       	ldi	r22, 0x97	; 151
     ae4:	70 e2       	ldi	r23, 0x20	; 32
     ae6:	8c e3       	ldi	r24, 0x3C	; 60
     ae8:	93 e2       	ldi	r25, 0x23	; 35
     aea:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     aee:	ff cf       	rjmp	.-2      	; 0xaee <mem_manager_test2+0xde>
	m_assert(memcmp(mem3, memory, MEMORY_SIZE) == 0);
     af0:	40 e2       	ldi	r20, 0x20	; 32
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	61 ec       	ldi	r22, 0xC1	; 193
     af6:	75 e2       	ldi	r23, 0x25	; 37
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	90 e2       	ldi	r25, 0x20	; 32
     afc:	0e 94 24 0c 	call	0x1848	; 0x1848 <memcmp>
     b00:	89 2b       	or	r24, r25
     b02:	59 f0       	breq	.+22     	; 0xb1a <mem_manager_test2+0x10a>
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	32 e2       	ldi	r19, 0x22	; 34
     b08:	4d e6       	ldi	r20, 0x6D	; 109
     b0a:	51 e0       	ldi	r21, 0x01	; 1
     b0c:	67 e9       	ldi	r22, 0x97	; 151
     b0e:	70 e2       	ldi	r23, 0x20	; 32
     b10:	8c e3       	ldi	r24, 0x3C	; 60
     b12:	93 e2       	ldi	r25, 0x23	; 35
     b14:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     b18:	ff cf       	rjmp	.-2      	; 0xb18 <mem_manager_test2+0x108>
	m_assert(totalAllocatedMemory == 16);
     b1a:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     b1e:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     b22:	40 97       	sbiw	r24, 0x10	; 16
     b24:	59 f0       	breq	.+22     	; 0xb3c <mem_manager_test2+0x12c>
     b26:	22 e6       	ldi	r18, 0x62	; 98
     b28:	32 e2       	ldi	r19, 0x22	; 34
     b2a:	4e e6       	ldi	r20, 0x6E	; 110
     b2c:	51 e0       	ldi	r21, 0x01	; 1
     b2e:	67 e9       	ldi	r22, 0x97	; 151
     b30:	70 e2       	ldi	r23, 0x20	; 32
     b32:	8c e3       	ldi	r24, 0x3C	; 60
     b34:	93 e2       	ldi	r25, 0x23	; 35
     b36:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     b3a:	ff cf       	rjmp	.-2      	; 0xb3a <mem_manager_test2+0x12a>

	// extend block and claim extra space since there's no room for a header
	mem3[31] = 0x80;
     b3c:	80 e8       	ldi	r24, 0x80	; 128
     b3e:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <mem3+0x1f>
	memcpy(memory, mem3, MEMORY_SIZE);
     b42:	80 e2       	ldi	r24, 0x20	; 32
     b44:	e0 e4       	ldi	r30, 0x40	; 64
     b46:	f0 e2       	ldi	r31, 0x20	; 32
     b48:	a1 ec       	ldi	r26, 0xC1	; 193
     b4a:	b5 e2       	ldi	r27, 0x25	; 37
     b4c:	01 90       	ld	r0, Z+
     b4e:	0d 92       	st	X+, r0
     b50:	8a 95       	dec	r24
     b52:	e1 f7       	brne	.-8      	; 0xb4c <mem_manager_test2+0x13c>
	totalAllocatedMemory = 0x12;
     b54:	82 e1       	ldi	r24, 0x12	; 18
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     b5c:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	data1 = m_realloc(memory + HEADER_SIZE, 20);
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	64 e1       	ldi	r22, 0x14	; 20
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	83 ec       	ldi	r24, 0xC3	; 195
     b68:	95 e2       	ldi	r25, 0x25	; 37
     b6a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(totalAllocatedMemory == 0x1c);
     b6e:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     b72:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     b76:	4c 97       	sbiw	r24, 0x1c	; 28
     b78:	59 f0       	breq	.+22     	; 0xb90 <mem_manager_test2+0x180>
     b7a:	2d e7       	ldi	r18, 0x7D	; 125
     b7c:	32 e2       	ldi	r19, 0x22	; 34
     b7e:	45 e7       	ldi	r20, 0x75	; 117
     b80:	51 e0       	ldi	r21, 0x01	; 1
     b82:	67 e9       	ldi	r22, 0x97	; 151
     b84:	70 e2       	ldi	r23, 0x20	; 32
     b86:	8c e3       	ldi	r24, 0x3C	; 60
     b88:	93 e2       	ldi	r25, 0x23	; 35
     b8a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     b8e:	ff cf       	rjmp	.-2      	; 0xb8e <mem_manager_test2+0x17e>

	// standard realloc to make it smaller and require a dummy header to be created
	memcpy(memory, mem3, MEMORY_SIZE);
     b90:	80 e2       	ldi	r24, 0x20	; 32
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e2       	ldi	r31, 0x20	; 32
     b96:	a1 ec       	ldi	r26, 0xC1	; 193
     b98:	b5 e2       	ldi	r27, 0x25	; 37
     b9a:	01 90       	ld	r0, Z+
     b9c:	0d 92       	st	X+, r0
     b9e:	8a 95       	dec	r24
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <mem_manager_test2+0x18a>
	totalAllocatedMemory = 0x12;
     ba2:	82 e1       	ldi	r24, 0x12	; 18
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     baa:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	data1 = m_realloc(memory + HEADER_SIZE, 0x06);
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	66 e0       	ldi	r22, 0x06	; 6
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	83 ec       	ldi	r24, 0xC3	; 195
     bb6:	95 e2       	ldi	r25, 0x25	; 37
     bb8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(memcmp(mem4, memory, MEMORY_SIZE) == 0);
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	61 ec       	ldi	r22, 0xC1	; 193
     bc2:	75 e2       	ldi	r23, 0x25	; 37
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	90 e2       	ldi	r25, 0x20	; 32
     bc8:	0e 94 24 0c 	call	0x1848	; 0x1848 <memcmp>
     bcc:	89 2b       	or	r24, r25
     bce:	59 f0       	breq	.+22     	; 0xbe6 <mem_manager_test2+0x1d6>
     bd0:	2a e9       	ldi	r18, 0x9A	; 154
     bd2:	32 e2       	ldi	r19, 0x22	; 34
     bd4:	4b e7       	ldi	r20, 0x7B	; 123
     bd6:	51 e0       	ldi	r21, 0x01	; 1
     bd8:	67 e9       	ldi	r22, 0x97	; 151
     bda:	70 e2       	ldi	r23, 0x20	; 32
     bdc:	8c e3       	ldi	r24, 0x3C	; 60
     bde:	93 e2       	ldi	r25, 0x23	; 35
     be0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     be4:	ff cf       	rjmp	.-2      	; 0xbe4 <mem_manager_test2+0x1d4>
	m_assert(totalAllocatedMemory == 0x0d);
     be6:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     bea:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     bee:	0d 97       	sbiw	r24, 0x0d	; 13
     bf0:	59 f0       	breq	.+22     	; 0xc08 <mem_manager_test2+0x1f8>
     bf2:	21 ec       	ldi	r18, 0xC1	; 193
     bf4:	32 e2       	ldi	r19, 0x22	; 34
     bf6:	4c e7       	ldi	r20, 0x7C	; 124
     bf8:	51 e0       	ldi	r21, 0x01	; 1
     bfa:	67 e9       	ldi	r22, 0x97	; 151
     bfc:	70 e2       	ldi	r23, 0x20	; 32
     bfe:	8c e3       	ldi	r24, 0x3C	; 60
     c00:	93 e2       	ldi	r25, 0x23	; 35
     c02:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     c06:	ff cf       	rjmp	.-2      	; 0xc06 <mem_manager_test2+0x1f6>

	// realloc to size zero
	memcpy(memory, mem3, MEMORY_SIZE);
     c08:	80 e2       	ldi	r24, 0x20	; 32
     c0a:	e0 e4       	ldi	r30, 0x40	; 64
     c0c:	f0 e2       	ldi	r31, 0x20	; 32
     c0e:	a1 ec       	ldi	r26, 0xC1	; 193
     c10:	b5 e2       	ldi	r27, 0x25	; 37
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <mem_manager_test2+0x202>
	totalAllocatedMemory = 0x12;
     c1a:	82 e1       	ldi	r24, 0x12	; 18
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     c22:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	data1 = m_realloc(memory + HEADER_SIZE, 0);
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	83 ec       	ldi	r24, 0xC3	; 195
     c2e:	95 e2       	ldi	r25, 0x25	; 37
     c30:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(memcmp(mem5, memory, MEMORY_SIZE) == 0);
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	61 ec       	ldi	r22, 0xC1	; 193
     c3a:	75 e2       	ldi	r23, 0x25	; 37
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e2       	ldi	r25, 0x20	; 32
     c40:	0e 94 24 0c 	call	0x1848	; 0x1848 <memcmp>
     c44:	89 2b       	or	r24, r25
     c46:	59 f0       	breq	.+22     	; 0xc5e <mem_manager_test2+0x24e>
     c48:	2e ed       	ldi	r18, 0xDE	; 222
     c4a:	32 e2       	ldi	r19, 0x22	; 34
     c4c:	42 e8       	ldi	r20, 0x82	; 130
     c4e:	51 e0       	ldi	r21, 0x01	; 1
     c50:	67 e9       	ldi	r22, 0x97	; 151
     c52:	70 e2       	ldi	r23, 0x20	; 32
     c54:	8c e3       	ldi	r24, 0x3C	; 60
     c56:	93 e2       	ldi	r25, 0x23	; 35
     c58:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     c5c:	ff cf       	rjmp	.-2      	; 0xc5c <mem_manager_test2+0x24c>
	m_assert(totalAllocatedMemory == 7);
     c5e:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     c62:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     c66:	07 97       	sbiw	r24, 0x07	; 7
     c68:	59 f0       	breq	.+22     	; 0xc80 <mem_manager_test2+0x270>
     c6a:	25 e0       	ldi	r18, 0x05	; 5
     c6c:	33 e2       	ldi	r19, 0x23	; 35
     c6e:	43 e8       	ldi	r20, 0x83	; 131
     c70:	51 e0       	ldi	r21, 0x01	; 1
     c72:	67 e9       	ldi	r22, 0x97	; 151
     c74:	70 e2       	ldi	r23, 0x20	; 32
     c76:	8c e3       	ldi	r24, 0x3C	; 60
     c78:	93 e2       	ldi	r25, 0x23	; 35
     c7a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     c7e:	ff cf       	rjmp	.-2      	; 0xc7e <mem_manager_test2+0x26e>

	// realloc by only 1 so that its forced to claim the extra space and not change size
	memcpy(memory, mem3, MEMORY_SIZE);
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	e0 e4       	ldi	r30, 0x40	; 64
     c84:	f0 e2       	ldi	r31, 0x20	; 32
     c86:	a1 ec       	ldi	r26, 0xC1	; 193
     c88:	b5 e2       	ldi	r27, 0x25	; 37
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <mem_manager_test2+0x27a>
	totalAllocatedMemory = 0x12;
     c92:	82 e1       	ldi	r24, 0x12	; 18
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	80 93 62 26 	sts	0x2662, r24	; 0x802662 <totalAllocatedMemory>
     c9a:	90 93 63 26 	sts	0x2663, r25	; 0x802663 <totalAllocatedMemory+0x1>
	data1 = m_realloc(memory + HEADER_SIZE, 0x0c);
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	6c e0       	ldi	r22, 0x0C	; 12
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	83 ec       	ldi	r24, 0xC3	; 195
     ca6:	95 e2       	ldi	r25, 0x25	; 37
     ca8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <internal_realloc>
	m_assert(memcmp(mem3, memory, MEMORY_SIZE) == 0);
     cac:	40 e2       	ldi	r20, 0x20	; 32
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	61 ec       	ldi	r22, 0xC1	; 193
     cb2:	75 e2       	ldi	r23, 0x25	; 37
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	90 e2       	ldi	r25, 0x20	; 32
     cb8:	0e 94 24 0c 	call	0x1848	; 0x1848 <memcmp>
     cbc:	89 2b       	or	r24, r25
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <mem_manager_test2+0x2c6>
     cc0:	20 e2       	ldi	r18, 0x20	; 32
     cc2:	32 e2       	ldi	r19, 0x22	; 34
     cc4:	49 e8       	ldi	r20, 0x89	; 137
     cc6:	51 e0       	ldi	r21, 0x01	; 1
     cc8:	67 e9       	ldi	r22, 0x97	; 151
     cca:	70 e2       	ldi	r23, 0x20	; 32
     ccc:	8c e3       	ldi	r24, 0x3C	; 60
     cce:	93 e2       	ldi	r25, 0x23	; 35
     cd0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <mem_manager_test2+0x2c4>
	m_assert(totalAllocatedMemory == 0x12);
     cd6:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <totalAllocatedMemory>
     cda:	90 91 63 26 	lds	r25, 0x2663	; 0x802663 <totalAllocatedMemory+0x1>
     cde:	42 97       	sbiw	r24, 0x12	; 18
     ce0:	59 f0       	breq	.+22     	; 0xcf8 <mem_manager_test2+0x2e8>
     ce2:	2f e1       	ldi	r18, 0x1F	; 31
     ce4:	33 e2       	ldi	r19, 0x23	; 35
     ce6:	4a e8       	ldi	r20, 0x8A	; 138
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	67 e9       	ldi	r22, 0x97	; 151
     cec:	70 e2       	ldi	r23, 0x20	; 32
     cee:	8c e3       	ldi	r24, 0x3C	; 60
     cf0:	93 e2       	ldi	r25, 0x23	; 35
     cf2:	0e 94 27 07 	call	0xe4e	; 0xe4e <__m_assert>
     cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <mem_manager_test2+0x2e6>
     cf8:	08 95       	ret

00000cfa <tick_init>:
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

void tick_trigger_interrupt(void) {
	TCC0_OVF_vect ();
     cfa:	e0 e0       	ldi	r30, 0x00	; 0
     cfc:	f8 e0       	ldi	r31, 0x08	; 8
     cfe:	8f e8       	ldi	r24, 0x8F	; 143
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	86 a3       	std	Z+38, r24	; 0x26
     d04:	97 a3       	std	Z+39, r25	; 0x27
     d06:	97 e0       	ldi	r25, 0x07	; 7
     d08:	90 83       	st	Z, r25
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	86 83       	std	Z+6, r24	; 0x06
     d0e:	e0 e4       	ldi	r30, 0x40	; 64
     d10:	f8 e0       	ldi	r31, 0x08	; 8
     d12:	26 e6       	ldi	r18, 0x66	; 102
     d14:	36 e0       	ldi	r19, 0x06	; 6
     d16:	26 a3       	std	Z+38, r18	; 0x26
     d18:	37 a3       	std	Z+39, r19	; 0x27
     d1a:	90 83       	st	Z, r25
     d1c:	86 83       	std	Z+6, r24	; 0x06
     d1e:	08 95       	ret

00000d20 <__vector_14>:
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	08 b6       	in	r0, 0x38	; 56
     d2a:	0f 92       	push	r0
     d2c:	09 b6       	in	r0, 0x39	; 57
     d2e:	0f 92       	push	r0
     d30:	0a b6       	in	r0, 0x3a	; 58
     d32:	0f 92       	push	r0
     d34:	0b b6       	in	r0, 0x3b	; 59
     d36:	0f 92       	push	r0
     d38:	1f 92       	push	r1
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	a0 91 66 26 	lds	r26, 0x2666	; 0x802666 <ptrStackP>
     d7c:	b0 91 67 26 	lds	r27, 0x2667	; 0x802667 <ptrStackP+0x1>
     d80:	0d b6       	in	r0, 0x3d	; 61
     d82:	0d 92       	st	X+, r0
     d84:	0e b6       	in	r0, 0x3e	; 62
     d86:	0d 92       	st	X+, r0
     d88:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     d8c:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     d90:	0e 94 49 08 	call	0x1092	; 0x1092 <kernel_process_all_tasks>
     d94:	a0 91 66 26 	lds	r26, 0x2666	; 0x802666 <ptrStackP>
     d98:	b0 91 67 26 	lds	r27, 0x2667	; 0x802667 <ptrStackP+0x1>
     d9c:	0d 90       	ld	r0, X+
     d9e:	1c 90       	ld	r1, X
     da0:	0d be       	out	0x3d, r0	; 61
     da2:	1e be       	out	0x3e, r1	; 62
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	3f 90       	pop	r3
     dde:	2f 90       	pop	r2
     de0:	1f 90       	pop	r1
     de2:	0f 90       	pop	r0
     de4:	0b be       	out	0x3b, r0	; 59
     de6:	0f 90       	pop	r0
     de8:	0a be       	out	0x3a, r0	; 58
     dea:	0f 90       	pop	r0
     dec:	09 be       	out	0x39, r0	; 57
     dee:	0f 90       	pop	r0
     df0:	08 be       	out	0x38, r0	; 56
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	18 95       	reti

00000dfa <__vector_20>:
	portRESTORE_CONTEXT();
	reti();
}

void TCC1_OVF_vect (void) __attribute__ ((signal, __INTR_ATTRS));
void TCC1_OVF_vect (void) {
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	0b b6       	in	r0, 0x3b	; 59
     e06:	0f 92       	push	r0
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
	onTimerTick();
     e20:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <onTimerTick>
#if TEST_MODULES
	test_tick_callback();
     e24:	0e 94 b6 0b 	call	0x176c	; 0x176c <test_tick_callback>
#endif
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__m_assert>:
 #include <stdio.h>
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
     e4e:	e0 e0       	ldi	r30, 0x00	; 0
     e50:	f0 e0       	ldi	r31, 0x00	; 0
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <__m_assert+0x8>
		prefix++;
     e54:	31 96       	adiw	r30, 0x01	; 1
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     e56:	db 01       	movw	r26, r22
     e58:	ae 0f       	add	r26, r30
     e5a:	bf 1f       	adc	r27, r31
     e5c:	8c 91       	ld	r24, X
     e5e:	8e 52       	subi	r24, 0x2E	; 46
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	c0 f3       	brcs	.-16     	; 0xe54 <__m_assert+0x6>
		prefix++;
	 sprintf(gStrBuf, "Assert failure!\n\rFile: %s\n\rLine: %d\n\rExp: %s\n\r", __file + prefix, __lineno, __sexp);
     e64:	3f 93       	push	r19
     e66:	2f 93       	push	r18
     e68:	5f 93       	push	r21
     e6a:	4f 93       	push	r20
     e6c:	bf 93       	push	r27
     e6e:	af 93       	push	r26
     e70:	8f e5       	ldi	r24, 0x5F	; 95
     e72:	93 e2       	ldi	r25, 0x23	; 35
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	81 ee       	ldi	r24, 0xE1	; 225
     e7a:	95 e2       	ldi	r25, 0x25	; 37
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 41 0c 	call	0x1882	; 0x1882 <sprintf>
	 serial_send_string(gStrBuf);
     e84:	81 ee       	ldi	r24, 0xE1	; 225
     e86:	95 e2       	ldi	r25, 0x25	; 37
     e88:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
#endif
	kernel_disable_scheduler();
     e8c:	0e 94 93 08 	call	0x1126	; 0x1126 <kernel_disable_scheduler>
	 return false;
     e90:	8d b7       	in	r24, 0x3d	; 61
     e92:	9e b7       	in	r25, 0x3e	; 62
     e94:	0a 96       	adiw	r24, 0x0a	; 10
     e96:	8d bf       	out	0x3d, r24	; 61
     e98:	9e bf       	out	0x3e, r25	; 62
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <kernel_init>:
	}
	return NULL;
 }

 void kernel_enable_scheduler(void) {
	scheduler.status = RUNNING;
     e9e:	84 e6       	ldi	r24, 0x64	; 100
     ea0:	96 e2       	ldi	r25, 0x26	; 38
     ea2:	80 93 66 26 	sts	0x2666, r24	; 0x802666 <ptrStackP>
     ea6:	90 93 67 26 	sts	0x2667, r25	; 0x802667 <ptrStackP+0x1>
     eaa:	08 95       	ret

00000eac <kernel_swap_to_task>:
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	8f 93       	push	r24
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	8f 93       	push	r24
     eba:	82 ef       	ldi	r24, 0xF2	; 242
     ebc:	93 e2       	ldi	r25, 0x23	; 35
     ebe:	9f 93       	push	r25
     ec0:	8f 93       	push	r24
     ec2:	81 ee       	ldi	r24, 0xE1	; 225
     ec4:	95 e2       	ldi	r25, 0x25	; 37
     ec6:	9f 93       	push	r25
     ec8:	8f 93       	push	r24
     eca:	0e 94 41 0c 	call	0x1882	; 0x1882 <sprintf>
     ece:	81 ee       	ldi	r24, 0xE1	; 225
     ed0:	95 e2       	ldi	r25, 0x25	; 37
     ed2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
     ed6:	ce 01       	movw	r24, r28
     ed8:	02 96       	adiw	r24, 0x02	; 2
     eda:	80 93 66 26 	sts	0x2666, r24	; 0x802666 <ptrStackP>
     ede:	90 93 67 26 	sts	0x2667, r25	; 0x802667 <ptrStackP+0x1>
     ee2:	c0 93 88 26 	sts	0x2688, r28	; 0x802688 <activeContext>
     ee6:	d0 93 89 26 	sts	0x2689, r29	; 0x802689 <activeContext+0x1>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 87       	std	Y+9, r24	; 0x09
     eee:	46 e9       	ldi	r20, 0x96	; 150
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	ce 01       	movw	r24, r28
     ef8:	0c 96       	adiw	r24, 0x0c	; 12
     efa:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <timer_set>
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <kernel_swap_task>:
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	a0 91 88 26 	lds	r26, 0x2688	; 0x802688 <activeContext>
     f1c:	b0 91 89 26 	lds	r27, 0x2689	; 0x802689 <activeContext+0x1>
     f20:	10 97       	sbiw	r26, 0x00	; 0
     f22:	c9 f0       	breq	.+50     	; 0xf56 <kernel_swap_task+0x46>
     f24:	16 96       	adiw	r26, 0x06	; 6
     f26:	9c 91       	ld	r25, X
     f28:	16 97       	sbiw	r26, 0x06	; 6
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	10 c0       	rjmp	.+32     	; 0xf4e <kernel_swap_task+0x3e>
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	98 02       	muls	r25, r24
     f32:	f0 01       	movw	r30, r0
     f34:	11 24       	eor	r1, r1
     f36:	e8 59       	subi	r30, 0x98	; 152
     f38:	f9 4d       	sbci	r31, 0xD9	; 217
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	01 90       	ld	r0, Z+
     f42:	f0 81       	ld	r31, Z
     f44:	e0 2d       	mov	r30, r0
     f46:	21 85       	ldd	r18, Z+9	; 0x09
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	39 f0       	breq	.+14     	; 0xf5a <kernel_swap_task+0x4a>
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	99 23       	and	r25, r25
     f50:	74 f7       	brge	.-36     	; 0xf2e <kernel_swap_task+0x1e>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <kernel_swap_task+0x4c>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <kernel_swap_task+0x4c>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	10 97       	sbiw	r26, 0x00	; 0
     f5e:	71 f0       	breq	.+28     	; 0xf7c <kernel_swap_task+0x6c>
     f60:	81 11       	cpse	r24, r1
     f62:	0c c0       	rjmp	.+24     	; 0xf7c <kernel_swap_task+0x6c>
     f64:	19 96       	adiw	r26, 0x09	; 9
     f66:	8c 91       	ld	r24, X
     f68:	19 97       	sbiw	r26, 0x09	; 9
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	39 f0       	breq	.+14     	; 0xf7c <kernel_swap_task+0x6c>
     f6e:	cd 01       	movw	r24, r26
     f70:	0c 96       	adiw	r24, 0x0c	; 12
     f72:	0e 94 27 0b 	call	0x164e	; 0x164e <timer_has_expired>
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <kernel_swap_task+0x6c>
     f7a:	61 c0       	rjmp	.+194    	; 0x103e <kernel_swap_task+0x12e>
     f7c:	e0 91 88 26 	lds	r30, 0x2688	; 0x802688 <activeContext>
     f80:	f0 91 89 26 	lds	r31, 0x2689	; 0x802689 <activeContext+0x1>
     f84:	30 97       	sbiw	r30, 0x00	; 0
     f86:	51 f1       	breq	.+84     	; 0xfdc <kernel_swap_task+0xcc>
     f88:	c6 81       	ldd	r28, Z+6	; 0x06
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	cc 0f       	add	r28, r28
     f8e:	dd 1f       	adc	r29, r29
     f90:	cc 0f       	add	r28, r28
     f92:	dd 1f       	adc	r29, r29
     f94:	c8 59       	subi	r28, 0x98	; 152
     f96:	d9 4d       	sbci	r29, 0xD9	; 217
     f98:	81 85       	ldd	r24, Z+9	; 0x09
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	51 f0       	breq	.+20     	; 0xfb2 <kernel_swap_task+0xa2>
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	81 87       	std	Z+9, r24	; 0x09
     fa2:	46 e9       	ldi	r20, 0x96	; 150
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	cf 01       	movw	r24, r30
     fac:	0c 96       	adiw	r24, 0x0c	; 12
     fae:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <timer_set>
     fb2:	60 91 88 26 	lds	r22, 0x2688	; 0x802688 <activeContext>
     fb6:	70 91 89 26 	lds	r23, 0x2689	; 0x802689 <activeContext+0x1>
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 05 09 	call	0x120a	; 0x120a <queue_find_node>
     fc0:	8c 01       	movw	r16, r24
     fc2:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <activeContext>
     fc6:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <activeContext+0x1>
     fca:	0c 96       	adiw	r24, 0x0c	; 12
     fcc:	0e 94 44 0b 	call	0x1688	; 0x1688 <timer_time_remaining>
     fd0:	f8 01       	movw	r30, r16
     fd2:	64 83       	std	Z+4, r22	; 0x04
     fd4:	75 83       	std	Z+5, r23	; 0x05
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 98 08 	call	0x1130	; 0x1130 <queue_sort>
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	16 c0       	rjmp	.+44     	; 0x100c <kernel_swap_task+0xfc>
     fe0:	84 e0       	ldi	r24, 0x04	; 4
     fe2:	98 02       	muls	r25, r24
     fe4:	f0 01       	movw	r30, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e8 59       	subi	r30, 0x98	; 152
     fea:	f9 4d       	sbci	r31, 0xD9	; 217
     fec:	01 90       	ld	r0, Z+
     fee:	f0 81       	ld	r31, Z
     ff0:	e0 2d       	mov	r30, r0
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	30 97       	sbiw	r30, 0x00	; 0
     ffa:	39 f0       	breq	.+14     	; 0x100a <kernel_swap_task+0xfa>
     ffc:	81 85       	ldd	r24, Z+9	; 0x09
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	21 f4       	brne	.+8      	; 0x100a <kernel_swap_task+0xfa>
    1002:	cf 01       	movw	r24, r30
    1004:	0e 94 56 07 	call	0xeac	; 0xeac <kernel_swap_to_task>
    1008:	1a c0       	rjmp	.+52     	; 0x103e <kernel_swap_task+0x12e>
    100a:	9f 5f       	subi	r25, 0xFF	; 255
    100c:	98 30       	cpi	r25, 0x08	; 8
    100e:	44 f3       	brlt	.-48     	; 0xfe0 <kernel_swap_task+0xd0>
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	13 c0       	rjmp	.+38     	; 0x103a <kernel_swap_task+0x12a>
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	98 02       	muls	r25, r24
    1018:	f0 01       	movw	r30, r0
    101a:	11 24       	eor	r1, r1
    101c:	e8 59       	subi	r30, 0x98	; 152
    101e:	f9 4d       	sbci	r31, 0xD9	; 217
    1020:	01 90       	ld	r0, Z+
    1022:	f0 81       	ld	r31, Z
    1024:	e0 2d       	mov	r30, r0
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	21 f0       	breq	.+8      	; 0x1038 <kernel_swap_task+0x128>
    1030:	c9 01       	movw	r24, r18
    1032:	0e 94 56 07 	call	0xeac	; 0xeac <kernel_swap_to_task>
    1036:	03 c0       	rjmp	.+6      	; 0x103e <kernel_swap_task+0x12e>
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	98 30       	cpi	r25, 0x08	; 8
    103c:	5c f3       	brlt	.-42     	; 0x1014 <kernel_swap_task+0x104>
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	08 95       	ret

00001048 <kernel_check_stack_overflow>:
    1048:	e0 91 88 26 	lds	r30, 0x2688	; 0x802688 <activeContext>
    104c:	f0 91 89 26 	lds	r31, 0x2689	; 0x802689 <activeContext+0x1>
    1050:	22 81       	ldd	r18, Z+2	; 0x02
    1052:	33 81       	ldd	r19, Z+3	; 0x03
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	c8 f4       	brcc	.+50     	; 0x1090 <kernel_check_stack_overflow+0x48>
    105e:	85 81       	ldd	r24, Z+5	; 0x05
    1060:	8f 93       	push	r24
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	8f 93       	push	r24
    1066:	89 e0       	ldi	r24, 0x09	; 9
    1068:	94 e2       	ldi	r25, 0x24	; 36
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	81 ee       	ldi	r24, 0xE1	; 225
    1070:	95 e2       	ldi	r25, 0x25	; 37
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	0e 94 41 0c 	call	0x1882	; 0x1882 <sprintf>
    107a:	81 ee       	ldi	r24, 0xE1	; 225
    107c:	95 e2       	ldi	r25, 0x25	; 37
    107e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	ff cf       	rjmp	.-2      	; 0x108e <kernel_check_stack_overflow+0x46>
    1090:	08 95       	ret

00001092 <kernel_process_all_tasks>:
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <scheduler>
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	a9 f5       	brne	.+106    	; 0x1114 <kernel_process_all_tasks+0x82>
    10aa:	0e 94 24 08 	call	0x1048	; 0x1048 <kernel_check_stack_overflow>
    10ae:	00 e0       	ldi	r16, 0x00	; 0
    10b0:	2d c0       	rjmp	.+90     	; 0x110c <kernel_process_all_tasks+0x7a>
    10b2:	c0 2e       	mov	r12, r16
    10b4:	d1 2c       	mov	r13, r1
    10b6:	f6 01       	movw	r30, r12
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e8 59       	subi	r30, 0x98	; 152
    10c2:	f9 4d       	sbci	r31, 0xD9	; 217
    10c4:	c0 81       	ld	r28, Z
    10c6:	d1 81       	ldd	r29, Z+1	; 0x01
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	15 c0       	rjmp	.+42     	; 0x10f6 <kernel_process_all_tasks+0x64>
    10cc:	e8 80       	ld	r14, Y
    10ce:	f9 80       	ldd	r15, Y+1	; 0x01
    10d0:	f7 01       	movw	r30, r14
    10d2:	81 85       	ldd	r24, Z+9	; 0x09
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	59 f4       	brne	.+22     	; 0x10ee <kernel_process_all_tasks+0x5c>
    10d8:	c7 01       	movw	r24, r14
    10da:	0c 96       	adiw	r24, 0x0c	; 12
    10dc:	0e 94 44 0b 	call	0x1688	; 0x1688 <timer_time_remaining>
    10e0:	6c 83       	std	Y+4, r22	; 0x04
    10e2:	7d 83       	std	Y+5, r23	; 0x05
    10e4:	67 2b       	or	r22, r23
    10e6:	19 f4       	brne	.+6      	; 0x10ee <kernel_process_all_tasks+0x5c>
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	f7 01       	movw	r30, r14
    10ec:	81 87       	std	Z+9, r24	; 0x09
    10ee:	0a 80       	ldd	r0, Y+2	; 0x02
    10f0:	db 81       	ldd	r29, Y+3	; 0x03
    10f2:	c0 2d       	mov	r28, r0
    10f4:	1f 5f       	subi	r17, 0xFF	; 255
    10f6:	f6 01       	movw	r30, r12
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	e8 59       	subi	r30, 0x98	; 152
    1102:	f9 4d       	sbci	r31, 0xD9	; 217
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	18 17       	cp	r17, r24
    1108:	08 f3       	brcs	.-62     	; 0x10cc <kernel_process_all_tasks+0x3a>
    110a:	0f 5f       	subi	r16, 0xFF	; 255
    110c:	08 30       	cpi	r16, 0x08	; 8
    110e:	88 f2       	brcs	.-94     	; 0x10b2 <kernel_process_all_tasks+0x20>
    1110:	0e 94 88 07 	call	0xf10	; 0xf10 <kernel_swap_task>
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	08 95       	ret

00001126 <kernel_disable_scheduler>:
 }

 void kernel_disable_scheduler(void) {
	scheduler.status = STOPPED;
    1126:	10 92 8a 26 	sts	0x268A, r1	; 0x80268a <scheduler>
    112a:	08 95       	ret

0000112c <kernel_no_return>:
 }

 void kernel_no_return(void) {
	asm volatile ("rjmp .-2 \n\t");
    112c:	ff cf       	rjmp	.-2      	; 0x112c <kernel_no_return>
    112e:	08 95       	ret

00001130 <queue_sort>:
	}
}

 void* queue_peek(Queue *queue) {
	 return queue->head->data;
 }
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	dc 01       	movw	r26, r24
    113a:	12 96       	adiw	r26, 0x02	; 2
    113c:	2c 91       	ld	r18, X
    113e:	12 97       	sbiw	r26, 0x02	; 2
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	08 f4       	brcc	.+2      	; 0x1146 <queue_sort+0x16>
    1144:	5d c0       	rjmp	.+186    	; 0x1200 <queue_sort+0xd0>
    1146:	0d 90       	ld	r0, X+
    1148:	bc 91       	ld	r27, X
    114a:	a0 2d       	mov	r26, r0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	51 c0       	rjmp	.+162    	; 0x11f4 <queue_sort+0xc4>
    1152:	04 81       	ldd	r16, Z+4	; 0x04
    1154:	15 81       	ldd	r17, Z+5	; 0x05
    1156:	c2 81       	ldd	r28, Z+2	; 0x02
    1158:	d3 81       	ldd	r29, Z+3	; 0x03
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	20 17       	cp	r18, r16
    1160:	31 07       	cpc	r19, r17
    1162:	80 f5       	brcc	.+96     	; 0x11c4 <queue_sort+0x94>
    1164:	41 15       	cp	r20, r1
    1166:	51 05       	cpc	r21, r1
    1168:	c1 f4       	brne	.+48     	; 0x119a <queue_sort+0x6a>
    116a:	dc 01       	movw	r26, r24
    116c:	0d 91       	ld	r16, X+
    116e:	1c 91       	ld	r17, X
    1170:	11 97       	sbiw	r26, 0x01	; 1
    1172:	cd 93       	st	X+, r28
    1174:	dc 93       	st	X, r29
    1176:	11 97       	sbiw	r26, 0x01	; 1
    1178:	02 80       	ldd	r0, Z+2	; 0x02
    117a:	f3 81       	ldd	r31, Z+3	; 0x03
    117c:	e0 2d       	mov	r30, r0
    117e:	22 81       	ldd	r18, Z+2	; 0x02
    1180:	33 81       	ldd	r19, Z+3	; 0x03
    1182:	e8 01       	movw	r28, r16
    1184:	2a 83       	std	Y+2, r18	; 0x02
    1186:	3b 83       	std	Y+3, r19	; 0x03
    1188:	ed 91       	ld	r30, X+
    118a:	fc 91       	ld	r31, X
    118c:	11 97       	sbiw	r26, 0x01	; 1
    118e:	02 83       	std	Z+2, r16	; 0x02
    1190:	13 83       	std	Z+3, r17	; 0x03
    1192:	0d 90       	ld	r0, X+
    1194:	bc 91       	ld	r27, X
    1196:	a0 2d       	mov	r26, r0
    1198:	16 c0       	rjmp	.+44     	; 0x11c6 <queue_sort+0x96>
    119a:	12 96       	adiw	r26, 0x02	; 2
    119c:	cd 93       	st	X+, r28
    119e:	dc 93       	st	X, r29
    11a0:	13 97       	sbiw	r26, 0x03	; 3
    11a2:	c2 81       	ldd	r28, Z+2	; 0x02
    11a4:	d3 81       	ldd	r29, Z+3	; 0x03
    11a6:	2a 81       	ldd	r18, Y+2	; 0x02
    11a8:	3b 81       	ldd	r19, Y+3	; 0x03
    11aa:	22 83       	std	Z+2, r18	; 0x02
    11ac:	33 83       	std	Z+3, r19	; 0x03
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	cd 91       	ld	r28, X+
    11b2:	dc 91       	ld	r29, X
    11b4:	13 97       	sbiw	r26, 0x03	; 3
    11b6:	ea 83       	std	Y+2, r30	; 0x02
    11b8:	fb 83       	std	Y+3, r31	; 0x03
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	0d 90       	ld	r0, X+
    11be:	bc 91       	ld	r27, X
    11c0:	a0 2d       	mov	r26, r0
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <queue_sort+0x96>
    11c4:	df 01       	movw	r26, r30
    11c6:	12 96       	adiw	r26, 0x02	; 2
    11c8:	ed 91       	ld	r30, X+
    11ca:	fc 91       	ld	r31, X
    11cc:	13 97       	sbiw	r26, 0x03	; 3
    11ce:	4f 5f       	subi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <queue_sort+0xaa>
    11d4:	fd 01       	movw	r30, r26
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	ec 01       	movw	r28, r24
    11dc:	2a 81       	ldd	r18, Y+2	; 0x02
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	21 50       	subi	r18, 0x01	; 1
    11e2:	31 09       	sbc	r19, r1
    11e4:	42 17       	cp	r20, r18
    11e6:	53 07       	cpc	r21, r19
    11e8:	0c f4       	brge	.+2      	; 0x11ec <queue_sort+0xbc>
    11ea:	b3 cf       	rjmp	.-154    	; 0x1152 <queue_sort+0x22>
    11ec:	a8 81       	ld	r26, Y
    11ee:	b9 81       	ldd	r27, Y+1	; 0x01
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	fc 01       	movw	r30, r24
    11f6:	22 81       	ldd	r18, Z+2	; 0x02
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	62 17       	cp	r22, r18
    11fc:	73 07       	cpc	r23, r19
    11fe:	54 f3       	brlt	.-44     	; 0x11d4 <queue_sort+0xa4>
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <queue_find_node>:

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;
    120a:	dc 01       	movw	r26, r24
    120c:	ed 91       	ld	r30, X+
    120e:	fc 91       	ld	r31, X

	while (n != NULL && n->data != data)
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <queue_find_node+0xe>
		n = n->next;
    1212:	02 80       	ldd	r0, Z+2	; 0x02
    1214:	f3 81       	ldd	r31, Z+3	; 0x03
    1216:	e0 2d       	mov	r30, r0
 }

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;

	while (n != NULL && n->data != data)
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	29 f0       	breq	.+10     	; 0x1226 <queue_find_node+0x1c>
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	86 17       	cp	r24, r22
    1222:	97 07       	cpc	r25, r23
    1224:	b1 f7       	brne	.-20     	; 0x1212 <queue_find_node+0x8>
		n = n->next;

	return n;
 }
    1226:	cf 01       	movw	r24, r30
    1228:	08 95       	ret

0000122a <bios_interrupt_init>:
	bios_interrupt_init();
	serial_init();
}

void bios_interrupt_init(void) {
	PMIC.CTRL = PMIC_LOLVLEX_bm;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1230:	78 94       	sei
    1232:	08 95       	ret

00001234 <bios_io_ports_init>:
}

void bios_io_ports_init(void) {
    1234:	ef 92       	push	r14
    1236:	0f 93       	push	r16
	PORT_ConfigurePins( &PORTB,
    1238:	e1 2c       	mov	r14, r1
    123a:	08 e1       	ldi	r16, 0x18	; 24
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	60 e4       	ldi	r22, 0x40	; 64
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	96 e0       	ldi	r25, 0x06	; 6
    1246:	0e 94 b9 09 	call	0x1372	; 0x1372 <PORT_ConfigurePins>
	PIN6_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTB, PIN6_bm);
    124a:	e0 e2       	ldi	r30, 0x20	; 32
    124c:	f6 e0       	ldi	r31, 0x06	; 6
    124e:	80 e4       	ldi	r24, 0x40	; 64
    1250:	80 83       	st	Z, r24
	(&PORTB)->OUT |= PIN6_bm;
    1252:	84 81       	ldd	r24, Z+4	; 0x04
    1254:	80 64       	ori	r24, 0x40	; 64
    1256:	84 83       	std	Z+4, r24	; 0x04

	PORT_ConfigurePins( &PORTC,
    1258:	00 e0       	ldi	r16, 0x00	; 0
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	68 e0       	ldi	r22, 0x08	; 8
    1260:	80 e4       	ldi	r24, 0x40	; 64
    1262:	96 e0       	ldi	r25, 0x06	; 6
    1264:	0e 94 b9 09 	call	0x1372	; 0x1372 <PORT_ConfigurePins>
	PIN3_bm,	// configure pin0, pin1, pin3, pin4, pin5, pin7.
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_TOTEM_gc,				// Totempole
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTC, PIN3_bm);
    1268:	88 e0       	ldi	r24, 0x08	; 8
    126a:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>

	PORT_ConfigurePins( &PORTF,
    126e:	08 e1       	ldi	r16, 0x18	; 24
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	64 e0       	ldi	r22, 0x04	; 4
    1276:	80 ea       	ldi	r24, 0xA0	; 160
    1278:	96 e0       	ldi	r25, 0x06	; 6
    127a:	0e 94 b9 09 	call	0x1372	; 0x1372 <PORT_ConfigurePins>
	PIN2_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTF, PIN2_bm);
    127e:	e0 ea       	ldi	r30, 0xA0	; 160
    1280:	f6 e0       	ldi	r31, 0x06	; 6
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	80 83       	st	Z, r24
	(&PORTF)->OUT |= PIN2_bm;
    1286:	84 81       	ldd	r24, Z+4	; 0x04
    1288:	84 60       	ori	r24, 0x04	; 4
    128a:	84 83       	std	Z+4, r24	; 0x04
}
    128c:	0f 91       	pop	r16
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <bios_clock_normal>:

void bios_clock_normal( void ) {
	CLKSYS_Enable( OSC_RC32MEN_bm | OSC_RC32KEN_bm);						// enabled RC32KHz internal oscillator as source for 32MHz calibrated source.
    1292:	e0 e5       	ldi	r30, 0x50	; 80
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	86 60       	ori	r24, 0x06	; 6
    129a:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );		//The output cpu and peripheral clocks are the same as the original source.
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 82 09 	call	0x1304	; 0x1304 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );					// Wait for RC 32KHz stabilized
    12a4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    12a8:	82 ff       	sbrs	r24, 2
    12aa:	fc cf       	rjmp	.-8      	; 0x12a4 <bios_clock_normal+0x12>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    12ac:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    12b0:	81 ff       	sbrs	r24, 1
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <bios_clock_normal+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 88 09 	call	0x1310	; 0x1310 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_AutoCalibration_Enable( OSC_RC32MCREF_bm, 0 );				// Enabled CLKSYS auto calibration in order to work with Rev.I ATxmega192D3 chip.
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	0e 94 9d 09 	call	0x133a	; 0x133a <CLKSYS_AutoCalibration_Enable>
    12c2:	08 95       	ret

000012c4 <bios_init>:
void bios_io_ports_init(void);
void bios_timer_init(void);
void bios_interrupt_init(void);

void bios_init(void) {
	bios_io_ports_init();
    12c4:	0e 94 1a 09 	call	0x1234	; 0x1234 <bios_io_ports_init>
	bios_clock_normal();
    12c8:	0e 94 49 09 	call	0x1292	; 0x1292 <bios_clock_normal>
	tick_init();
    12cc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <tick_init>
	bios_interrupt_init();
    12d0:	0e 94 15 09 	call	0x122a	; 0x122a <bios_interrupt_init>
	serial_init();
    12d4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <serial_init>
    12d8:	08 95       	ret

000012da <CCPWrite>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    12da:	0f 93       	push	r16
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	1f 92       	push	r1
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2f b7       	in	r18, 0x3f	; 63
    12e8:	29 83       	std	Y+1, r18	; 0x01
    12ea:	f8 94       	cli
    12ec:	1b be       	out	0x3b, r1	; 59
    12ee:	fc 01       	movw	r30, r24
    12f0:	08 ed       	ldi	r16, 0xD8	; 216
    12f2:	04 bf       	out	0x34, r16	; 52
    12f4:	60 83       	st	Z, r22
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	8f bf       	out	0x3f, r24	; 63
    12fa:	0f 90       	pop	r0
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <CLKSYS_Prescalers_Config>:
    1304:	68 2b       	or	r22, r24
    1306:	81 e4       	ldi	r24, 0x41	; 65
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 6d 09 	call	0x12da	; 0x12da <CCPWrite>
    130e:	08 95       	ret

00001310 <CLKSYS_Main_ClockSource_Select>:
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	c8 2f       	mov	r28, r24
    1318:	00 e4       	ldi	r16, 0x40	; 64
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	f8 01       	movw	r30, r16
    131e:	60 81       	ld	r22, Z
    1320:	68 7f       	andi	r22, 0xF8	; 248
    1322:	68 2b       	or	r22, r24
    1324:	80 e4       	ldi	r24, 0x40	; 64
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 6d 09 	call	0x12da	; 0x12da <CCPWrite>
    132c:	f8 01       	movw	r30, r16
    132e:	80 81       	ld	r24, Z
    1330:	8c 23       	and	r24, r28
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	08 95       	ret

0000133a <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    133a:	20 91 56 00 	lds	r18, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    133e:	38 2f       	mov	r19, r24
    1340:	98 2f       	mov	r25, r24
    1342:	90 95       	com	r25
    1344:	92 23       	and	r25, r18
    1346:	61 11       	cpse	r22, r1
    1348:	01 c0       	rjmp	.+2      	; 0x134c <CLKSYS_AutoCalibration_Enable+0x12>
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	93 2b       	or	r25, r19
    134e:	90 93 56 00 	sts	0x0056, r25	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	31 f4       	brne	.+12     	; 0x1362 <CLKSYS_AutoCalibration_Enable+0x28>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    1356:	e8 e6       	ldi	r30, 0x68	; 104
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	80 83       	st	Z, r24
    1360:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	29 f4       	brne	.+10     	; 0x1370 <CLKSYS_AutoCalibration_Enable+0x36>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1366:	e0 e6       	ldi	r30, 0x60	; 96
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	81 60       	ori	r24, 0x01	; 1
    136e:	80 83       	st	Z, r24
    1370:	08 95       	ret

00001372 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    1372:	ef 92       	push	r14
    1374:	0f 93       	push	r16
    1376:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    1378:	0e 29       	or	r16, r14
    137a:	44 23       	and	r20, r20
    137c:	11 f0       	breq	.+4      	; 0x1382 <PORT_ConfigurePins+0x10>
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <PORT_ConfigurePins+0x12>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 2b       	or	r16, r24
    1386:	22 23       	and	r18, r18
    1388:	11 f0       	breq	.+4      	; 0x138e <PORT_ConfigurePins+0x1c>
    138a:	80 e4       	ldi	r24, 0x40	; 64
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <PORT_ConfigurePins+0x1e>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    1392:	9f b7       	in	r25, 0x3f	; 63

	cli();
    1394:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    1396:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
    139a:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
    139c:	9f bf       	out	0x3f, r25	; 63
}
    139e:	0f 91       	pop	r16
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <serial_init>:

USART_data_t 	usart0_data; // RD1/TD1

void serial_init(void) {
	// PC3 (TXD0) as output.
	PORTC.DIRSET   = PIN3_bm;
    13a4:	e0 e4       	ldi	r30, 0x40	; 64
    13a6:	f6 e0       	ldi	r31, 0x06	; 6
    13a8:	88 e0       	ldi	r24, 0x08	; 8
    13aa:	81 83       	std	Z+1, r24	; 0x01
	// PC2 (RXD0) as input.
	PORTC.DIRCLR   = PIN2_bm;
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	82 83       	std	Z+2, r24	; 0x02

	USART_InterruptDriver_Initialize( &usart0_data, &usart0, USART_DREINTLVL_LO_gc);
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	60 ea       	ldi	r22, 0xA0	; 160
    13b4:	78 e0       	ldi	r23, 0x08	; 8
    13b6:	8b e8       	ldi	r24, 0x8B	; 139
    13b8:	96 e2       	ldi	r25, 0x26	; 38
    13ba:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_InterruptDriver_Initialize>

	// 8 Data bits, No Parity, 2 Stop bits.
	USART_Format_Set( usart0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    13be:	e0 91 8b 26 	lds	r30, 0x268B	; 0x80268b <usart0_data>
    13c2:	f0 91 8c 26 	lds	r31, 0x268C	; 0x80268c <usart0_data+0x1>
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	85 83       	std	Z+5, r24	; 0x05

	// Enable RXC interrupt.
	USART_RxdInterruptLevel_Set( usart0_data.usart, USART_RXCINTLVL_LO_gc);
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	8f 7c       	andi	r24, 0xCF	; 207
    13ce:	80 61       	ori	r24, 0x10	; 16
    13d0:	83 83       	std	Z+3, r24	; 0x03
	//USART_TxdInterruptLevel_Set( usart0_data.usart, USART_TXCINTLVL_LO_gc);

	USART_Baudrate_Set( &usart0, SR_BAUD_9600_V , 0 );
    13d2:	a0 ea       	ldi	r26, 0xA0	; 160
    13d4:	b8 e0       	ldi	r27, 0x08	; 8
    13d6:	8f ec       	ldi	r24, 0xCF	; 207
    13d8:	16 96       	adiw	r26, 0x06	; 6
    13da:	8c 93       	st	X, r24
    13dc:	16 97       	sbiw	r26, 0x06	; 6
    13de:	17 96       	adiw	r26, 0x07	; 7
    13e0:	1c 92       	st	X, r1

	// Enable both RX and TX.
	USART_Rx_Enable( usart0_data.usart );
    13e2:	84 81       	ldd	r24, Z+4	; 0x04
    13e4:	80 61       	ori	r24, 0x10	; 16
    13e6:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable( usart0_data.usart );
    13e8:	84 81       	ldd	r24, Z+4	; 0x04
    13ea:	88 60       	ori	r24, 0x08	; 8
    13ec:	84 83       	std	Z+4, r24	; 0x04
    13ee:	08 95       	ret

000013f0 <serial_send_string>:

	/* Enable PMIC interrupt level low. */
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < strlen(str); i++)
    13fa:	c0 e0       	ldi	r28, 0x00	; 0
    13fc:	d0 e0       	ldi	r29, 0x00	; 0
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <serial_send_string+0x22>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
    1400:	f8 01       	movw	r30, r16
    1402:	ec 0f       	add	r30, r28
    1404:	fd 1f       	adc	r31, r29
    1406:	60 81       	ld	r22, Z
    1408:	8b e8       	ldi	r24, 0x8B	; 139
    140a:	96 e2       	ldi	r25, 0x26	; 38
    140c:	0e 94 86 0a 	call	0x150c	; 0x150c <USART_TXBuffer_PutByte>
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
	int i;
	for (i = 0; i < strlen(str); i++)
    1410:	21 96       	adiw	r28, 0x01	; 1
    1412:	f8 01       	movw	r30, r16
    1414:	01 90       	ld	r0, Z+
    1416:	00 20       	and	r0, r0
    1418:	e9 f7       	brne	.-6      	; 0x1414 <serial_send_string+0x24>
    141a:	31 97       	sbiw	r30, 0x01	; 1
    141c:	e0 1b       	sub	r30, r16
    141e:	f1 0b       	sbc	r31, r17
    1420:	ce 17       	cp	r28, r30
    1422:	df 07       	cpc	r29, r31
    1424:	68 f3       	brcs	.-38     	; 0x1400 <serial_send_string+0x10>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

00001430 <__vector_25>:

void USARTC0_RXC_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_RXC_vect (void)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	0b b6       	in	r0, 0x3b	; 59
    143c:	0f 92       	push	r0
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
	USART_RXComplete( &usart0_data );
    1456:	8b e8       	ldi	r24, 0x8B	; 139
    1458:	96 e2       	ldi	r25, 0x26	; 38
    145a:	0e 94 a6 0a 	call	0x154c	; 0x154c <USART_RXComplete>
}
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	0f 90       	pop	r0
    1478:	0b be       	out	0x3b, r0	; 59
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_26>:

void USARTC0_DRE_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_DRE_vect (void)
{
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1
    148e:	0b b6       	in	r0, 0x3b	; 59
    1490:	0f 92       	push	r0
    1492:	2f 93       	push	r18
    1494:	3f 93       	push	r19
    1496:	4f 93       	push	r20
    1498:	5f 93       	push	r21
    149a:	6f 93       	push	r22
    149c:	7f 93       	push	r23
    149e:	8f 93       	push	r24
    14a0:	9f 93       	push	r25
    14a2:	af 93       	push	r26
    14a4:	bf 93       	push	r27
    14a6:	ef 93       	push	r30
    14a8:	ff 93       	push	r31
	USART_DataRegEmpty( &usart0_data );
    14aa:	8b e8       	ldi	r24, 0x8B	; 139
    14ac:	96 e2       	ldi	r25, 0x26	; 38
    14ae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <USART_DataRegEmpty>
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0b be       	out	0x3b, r0	; 59
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
    14d8:	fc 01       	movw	r30, r24
    14da:	60 83       	st	Z, r22
    14dc:	71 83       	std	Z+1, r23	; 0x01
    14de:	42 83       	std	Z+2, r20	; 0x02
    14e0:	ec 5f       	subi	r30, 0xFC	; 252
    14e2:	fd 4f       	sbci	r31, 0xFD	; 253
    14e4:	10 82       	st	Z, r1
    14e6:	31 97       	sbiw	r30, 0x01	; 1
    14e8:	10 82       	st	Z, r1
    14ea:	33 96       	adiw	r30, 0x03	; 3
    14ec:	10 82       	st	Z, r1
    14ee:	31 97       	sbiw	r30, 0x01	; 1
    14f0:	10 82       	st	Z, r1
    14f2:	08 95       	ret

000014f4 <USART_TXBuffer_FreeSpace>:
    14f4:	fc 01       	movw	r30, r24
    14f6:	eb 5f       	subi	r30, 0xFB	; 251
    14f8:	fd 4f       	sbci	r31, 0xFD	; 253
    14fa:	20 81       	ld	r18, Z
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	90 81       	ld	r25, Z
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	29 13       	cpse	r18, r25
    1506:	01 c0       	rjmp	.+2      	; 0x150a <USART_TXBuffer_FreeSpace+0x16>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret

0000150c <USART_TXBuffer_PutByte>:
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
    1514:	16 2f       	mov	r17, r22
    1516:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <USART_TXBuffer_FreeSpace>
    151a:	88 23       	and	r24, r24
    151c:	99 f0       	breq	.+38     	; 0x1544 <USART_TXBuffer_PutByte+0x38>
    151e:	de 01       	movw	r26, r28
    1520:	ab 5f       	subi	r26, 0xFB	; 251
    1522:	bd 4f       	sbci	r27, 0xFD	; 253
    1524:	9c 91       	ld	r25, X
    1526:	fe 01       	movw	r30, r28
    1528:	e9 0f       	add	r30, r25
    152a:	f1 1d       	adc	r31, r1
    152c:	ed 5f       	subi	r30, 0xFD	; 253
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	10 83       	st	Z, r17
    1532:	9f 5f       	subi	r25, 0xFF	; 255
    1534:	9c 93       	st	X, r25
    1536:	e8 81       	ld	r30, Y
    1538:	f9 81       	ldd	r31, Y+1	; 0x01
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	2a 81       	ldd	r18, Y+2	; 0x02
    153e:	9c 7f       	andi	r25, 0xFC	; 252
    1540:	92 2b       	or	r25, r18
    1542:	93 83       	std	Z+3, r25	; 0x03
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	08 95       	ret

0000154c <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    154c:	fc 01       	movw	r30, r24
    154e:	ed 5f       	subi	r30, 0xFD	; 253
    1550:	fd 4f       	sbci	r31, 0xFD	; 253
    1552:	20 81       	ld	r18, Z
    1554:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1556:	31 96       	adiw	r30, 0x01	; 1
    1558:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    155a:	dc 01       	movw	r26, r24
    155c:	ed 91       	ld	r30, X+
    155e:	fc 91       	ld	r31, X
    1560:	11 97       	sbiw	r26, 0x01	; 1
    1562:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    1564:	23 17       	cp	r18, r19
    1566:	59 f0       	breq	.+22     	; 0x157e <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1568:	fc 01       	movw	r30, r24
    156a:	ed 5f       	subi	r30, 0xFD	; 253
    156c:	fd 4f       	sbci	r31, 0xFD	; 253
    156e:	30 81       	ld	r19, Z
    1570:	a3 0f       	add	r26, r19
    1572:	b1 1d       	adc	r27, r1
    1574:	13 96       	adiw	r26, 0x03	; 3
    1576:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    1578:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    157e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1580:	08 95       	ret

00001582 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    1586:	fc 01       	movw	r30, r24
    1588:	ea 5f       	subi	r30, 0xFA	; 250
    158a:	fd 4f       	sbci	r31, 0xFD	; 253
    158c:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    158e:	31 97       	sbiw	r30, 0x01	; 1
    1590:	20 81       	ld	r18, Z
    1592:	32 13       	cpse	r19, r18
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    1596:	dc 01       	movw	r26, r24
    1598:	ed 91       	ld	r30, X+
    159a:	fc 91       	ld	r31, X
    159c:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    159e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    15a0:	83 83       	std	Z+3, r24	; 0x03
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    15a4:	fc 01       	movw	r30, r24
    15a6:	ea 5f       	subi	r30, 0xFA	; 250
    15a8:	fd 4f       	sbci	r31, 0xFD	; 253
    15aa:	20 81       	ld	r18, Z
    15ac:	dc 01       	movw	r26, r24
    15ae:	a2 0f       	add	r26, r18
    15b0:	b1 1d       	adc	r27, r1
    15b2:	ad 5f       	subi	r26, 0xFD	; 253
    15b4:	be 4f       	sbci	r27, 0xFE	; 254
    15b6:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    15b8:	ec 01       	movw	r28, r24
    15ba:	a8 81       	ld	r26, Y
    15bc:	b9 81       	ldd	r27, Y+1	; 0x01
    15be:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
	}
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <main>:
#include "unittest.h"
#endif

int main(void)
{
	bios_init();
    15cc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <bios_init>
	kernel_init();
    15d0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <kernel_init>
	#if TEST_MODULES
		do_tests();
    15d4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <do_tests>
	#endif
	kernel_no_return();
    15d8:	0e 94 96 08 	call	0x112c	; 0x112c <kernel_no_return>
}
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	08 95       	ret

000015e2 <timer_set>:
 #define maxTimerVal ((uint32_t)(4294967295 / TIMER_PERIOD)) * TIMER_PERIOD

 uint32_t calc_time_elapsed(Timer *timer);

 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
    15e2:	fc 01       	movw	r30, r24
    15e4:	42 83       	std	Z+2, r20	; 0x02
    15e6:	53 83       	std	Z+3, r21	; 0x03
	timer->start = current_ms;
    15e8:	40 91 92 28 	lds	r20, 0x2892	; 0x802892 <current_ms>
    15ec:	50 91 93 28 	lds	r21, 0x2893	; 0x802893 <current_ms+0x1>
    15f0:	60 91 94 28 	lds	r22, 0x2894	; 0x802894 <current_ms+0x2>
    15f4:	70 91 95 28 	lds	r23, 0x2895	; 0x802895 <current_ms+0x3>
    15f8:	40 83       	st	Z, r20
    15fa:	51 83       	std	Z+1, r21	; 0x01
    15fc:	08 95       	ret

000015fe <calc_time_elapsed>:
	if (timer->interval > elapsedTime)
		return timer->interval - elapsedTime;
	return 0;
 }

 uint32_t calc_time_elapsed(Timer *timer) {
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	fc 01       	movw	r30, r24
	uint32_t curMs = current_ms;
    1604:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <current_ms>
    1608:	90 91 93 28 	lds	r25, 0x2893	; 0x802893 <current_ms+0x1>
    160c:	a0 91 94 28 	lds	r26, 0x2894	; 0x802894 <current_ms+0x2>
    1610:	b0 91 95 28 	lds	r27, 0x2895	; 0x802895 <current_ms+0x3>
	uint32_t elapsedTime;

	if (curMs >= timer->start) // timer has not wrapped around
    1614:	00 81       	ld	r16, Z
    1616:	11 81       	ldd	r17, Z+1	; 0x01
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	80 17       	cp	r24, r16
    161e:	91 07       	cpc	r25, r17
    1620:	a2 07       	cpc	r26, r18
    1622:	b3 07       	cpc	r27, r19
    1624:	38 f0       	brcs	.+14     	; 0x1634 <calc_time_elapsed+0x36>
		elapsedTime = curMs - timer->start;
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	60 1b       	sub	r22, r16
    162c:	71 0b       	sbc	r23, r17
    162e:	82 0b       	sbc	r24, r18
    1630:	93 0b       	sbc	r25, r19
    1632:	0a c0       	rjmp	.+20     	; 0x1648 <calc_time_elapsed+0x4a>
	else // timer has wrapped around
		elapsedTime = maxTimerVal - (timer->start - curMs);
    1634:	80 1b       	sub	r24, r16
    1636:	91 0b       	sbc	r25, r17
    1638:	a2 0b       	sbc	r26, r18
    163a:	b3 0b       	sbc	r27, r19
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	64 53       	subi	r22, 0x34	; 52
    1642:	73 4f       	sbci	r23, 0xF3	; 243
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255

	return elapsedTime;
 }
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <timer_has_expired>:
 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
	timer->start = current_ms;
 }

 bool timer_has_expired(Timer *timer) {
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
	uint32_t elapsedTime = calc_time_elapsed(timer);
    165c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <calc_time_elapsed>
	return elapsedTime >= timer->interval;
    1660:	4a 81       	ldd	r20, Y+2	; 0x02
    1662:	5b 81       	ldd	r21, Y+3	; 0x03
    1664:	6a 01       	movw	r12, r20
    1666:	e1 2c       	mov	r14, r1
    1668:	f1 2c       	mov	r15, r1
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	6c 15       	cp	r22, r12
    166e:	7d 05       	cpc	r23, r13
    1670:	8e 05       	cpc	r24, r14
    1672:	9f 05       	cpc	r25, r15
    1674:	08 f4       	brcc	.+2      	; 0x1678 <timer_has_expired+0x2a>
    1676:	20 e0       	ldi	r18, 0x00	; 0
 }
    1678:	82 2f       	mov	r24, r18
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	08 95       	ret

00001688 <timer_time_remaining>:

 uint32_t timer_time_remaining(Timer *timer) {
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
	 uint32_t elapsedTime = calc_time_elapsed(timer);
    169a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <calc_time_elapsed>

	if (timer->interval > elapsedTime)
    169e:	2a 81       	ldd	r18, Y+2	; 0x02
    16a0:	3b 81       	ldd	r19, Y+3	; 0x03
    16a2:	89 01       	movw	r16, r18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	60 17       	cp	r22, r16
    16aa:	71 07       	cpc	r23, r17
    16ac:	82 07       	cpc	r24, r18
    16ae:	93 07       	cpc	r25, r19
    16b0:	48 f4       	brcc	.+18     	; 0x16c4 <timer_time_remaining+0x3c>
		return timer->interval - elapsedTime;
    16b2:	68 01       	movw	r12, r16
    16b4:	79 01       	movw	r14, r18
    16b6:	c6 1a       	sub	r12, r22
    16b8:	d7 0a       	sbc	r13, r23
    16ba:	e8 0a       	sbc	r14, r24
    16bc:	f9 0a       	sbc	r15, r25
    16be:	c7 01       	movw	r24, r14
    16c0:	b6 01       	movw	r22, r12
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <timer_time_remaining+0x42>
	return 0;
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	cb 01       	movw	r24, r22
 }
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	08 95       	ret

000016dc <onTimerTick>:

	return elapsedTime;
 }

 void onTimerTick(void) {
	if (++timerVal >= maxTimerVal)
    16dc:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <timerVal>
    16e0:	90 91 97 28 	lds	r25, 0x2897	; 0x802897 <timerVal+0x1>
    16e4:	a0 91 98 28 	lds	r26, 0x2898	; 0x802898 <timerVal+0x2>
    16e8:	b0 91 99 28 	lds	r27, 0x2899	; 0x802899 <timerVal+0x3>
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	a1 1d       	adc	r26, r1
    16f0:	b1 1d       	adc	r27, r1
    16f2:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <timerVal>
    16f6:	90 93 97 28 	sts	0x2897, r25	; 0x802897 <timerVal+0x1>
    16fa:	a0 93 98 28 	sts	0x2898, r26	; 0x802898 <timerVal+0x2>
    16fe:	b0 93 99 28 	sts	0x2899, r27	; 0x802899 <timerVal+0x3>
    1702:	8c 3c       	cpi	r24, 0xCC	; 204
    1704:	9c 40       	sbci	r25, 0x0C	; 12
    1706:	a1 05       	cpc	r26, r1
    1708:	b1 05       	cpc	r27, r1
    170a:	40 f0       	brcs	.+16     	; 0x171c <onTimerTick+0x40>
		timerVal = 0;
    170c:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <timerVal>
    1710:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <timerVal+0x1>
    1714:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <timerVal+0x2>
    1718:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <timerVal+0x3>
	current_ms = timerVal * TIMER_MS;
    171c:	20 91 96 28 	lds	r18, 0x2896	; 0x802896 <timerVal>
    1720:	30 91 97 28 	lds	r19, 0x2897	; 0x802897 <timerVal+0x1>
    1724:	40 91 98 28 	lds	r20, 0x2898	; 0x802898 <timerVal+0x2>
    1728:	50 91 99 28 	lds	r21, 0x2899	; 0x802899 <timerVal+0x3>
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__muluhisi3>
    1734:	60 93 92 28 	sts	0x2892, r22	; 0x802892 <current_ms>
    1738:	70 93 93 28 	sts	0x2893, r23	; 0x802893 <current_ms+0x1>
    173c:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <current_ms+0x2>
    1740:	90 93 95 28 	sts	0x2895, r25	; 0x802895 <current_ms+0x3>
    1744:	08 95       	ret

00001746 <test_mem_manager>:

volatile int tick_count;
void test_tick(void) {
	while (tick_count < 5);
	m_assert(tick_count == 5);
	testsPassed++;
    1746:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mem_manager_test>
    174a:	0e 94 08 05 	call	0xa10	; 0xa10 <mem_manager_test2>
    174e:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <testsPassed>
    1752:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <testsPassed+0x1>
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <testsPassed>
    175c:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <testsPassed+0x1>
    1760:	08 95       	ret

00001762 <test_init>:
    1762:	8c e2       	ldi	r24, 0x2C	; 44
    1764:	94 e2       	ldi	r25, 0x24	; 36
    1766:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
    176a:	08 95       	ret

0000176c <test_tick_callback>:
}

void test_tick_callback(void) {
	tick_count++;
    176c:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <tick_count>
    1770:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <tick_count+0x1>
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	80 93 9c 28 	sts	0x289C, r24	; 0x80289c <tick_count>
    177a:	90 93 9d 28 	sts	0x289D, r25	; 0x80289d <tick_count+0x1>
	(&PORTB)->OUT ^= PIN6_bm;
    177e:	e0 e2       	ldi	r30, 0x20	; 32
    1780:	f6 e0       	ldi	r31, 0x06	; 6
    1782:	94 81       	ldd	r25, Z+4	; 0x04
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	89 27       	eor	r24, r25
    1788:	84 83       	std	Z+4, r24	; 0x04
    178a:	08 95       	ret

0000178c <test_print_results>:
}

void test_print_results(void) {
	serial_send_string("\n\rTests finished\r\n");
    178c:	85 e8       	ldi	r24, 0x85	; 133
    178e:	95 e2       	ldi	r25, 0x25	; 37
    1790:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
	sprintf(gStrBuf, "Passed: %d\n\rFailed: %d\n\r\n\rResult: %s\n\r", testsPassed, NUM_TESTS - testsPassed, (testsPassed != NUM_TESTS ? "Fail" : "Pass"));
    1794:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <testsPassed>
    1798:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <testsPassed+0x1>
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <test_print_results+0x1c>
    17a2:	2b e7       	ldi	r18, 0x7B	; 123
    17a4:	35 e2       	ldi	r19, 0x25	; 37
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <test_print_results+0x20>
    17a8:	20 e8       	ldi	r18, 0x80	; 128
    17aa:	35 e2       	ldi	r19, 0x25	; 37
    17ac:	3f 93       	push	r19
    17ae:	2f 93       	push	r18
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	28 1b       	sub	r18, r24
    17b6:	39 0b       	sbc	r19, r25
    17b8:	3f 93       	push	r19
    17ba:	2f 93       	push	r18
    17bc:	9f 93       	push	r25
    17be:	8f 93       	push	r24
    17c0:	88 e9       	ldi	r24, 0x98	; 152
    17c2:	95 e2       	ldi	r25, 0x25	; 37
    17c4:	9f 93       	push	r25
    17c6:	8f 93       	push	r24
    17c8:	81 ee       	ldi	r24, 0xE1	; 225
    17ca:	95 e2       	ldi	r25, 0x25	; 37
    17cc:	9f 93       	push	r25
    17ce:	8f 93       	push	r24
    17d0:	0e 94 41 0c 	call	0x1882	; 0x1882 <sprintf>
	serial_send_string(gStrBuf);
    17d4:	81 ee       	ldi	r24, 0xE1	; 225
    17d6:	95 e2       	ldi	r25, 0x25	; 37
    17d8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <serial_send_string>
    17dc:	8d b7       	in	r24, 0x3d	; 61
    17de:	9e b7       	in	r25, 0x3e	; 62
    17e0:	0a 96       	adiw	r24, 0x0a	; 10
    17e2:	8d bf       	out	0x3d, r24	; 61
    17e4:	9e bf       	out	0x3e, r25	; 62
    17e6:	08 95       	ret

000017e8 <do_tests>:
void test_init(void);
void test_print_results(void);

#define NUM_TESTS sizeof(testList) / sizeof(*testList)

void do_tests(void) {
    17e8:	cf 93       	push	r28
	uint8_t i;
	test_init();
    17ea:	0e 94 b1 0b 	call	0x1762	; 0x1762 <test_init>

	for (i = 0; i < NUM_TESTS; i++)
    17ee:	c0 e0       	ldi	r28, 0x00	; 0
    17f0:	0b c0       	rjmp	.+22     	; 0x1808 <do_tests+0x20>
		testList[i]();
    17f2:	ec 2f       	mov	r30, r28
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	e0 58       	subi	r30, 0x80	; 128
    17fc:	ff 4d       	sbci	r31, 0xDF	; 223
    17fe:	01 90       	ld	r0, Z+
    1800:	f0 81       	ld	r31, Z
    1802:	e0 2d       	mov	r30, r0
    1804:	19 95       	eicall

void do_tests(void) {
	uint8_t i;
	test_init();

	for (i = 0; i < NUM_TESTS; i++)
    1806:	cf 5f       	subi	r28, 0xFF	; 255
    1808:	cc 23       	and	r28, r28
    180a:	99 f3       	breq	.-26     	; 0x17f2 <do_tests+0xa>
		testList[i]();

	test_print_results();
    180c:	0e 94 c6 0b 	call	0x178c	; 0x178c <test_print_results>
}
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <__muluhisi3>:
    1814:	0e 94 15 0c 	call	0x182a	; 0x182a <__umulhisi3>
    1818:	a5 9f       	mul	r26, r21
    181a:	90 0d       	add	r25, r0
    181c:	b4 9f       	mul	r27, r20
    181e:	90 0d       	add	r25, r0
    1820:	a4 9f       	mul	r26, r20
    1822:	80 0d       	add	r24, r0
    1824:	91 1d       	adc	r25, r1
    1826:	11 24       	eor	r1, r1
    1828:	08 95       	ret

0000182a <__umulhisi3>:
    182a:	a2 9f       	mul	r26, r18
    182c:	b0 01       	movw	r22, r0
    182e:	b3 9f       	mul	r27, r19
    1830:	c0 01       	movw	r24, r0
    1832:	a3 9f       	mul	r26, r19
    1834:	70 0d       	add	r23, r0
    1836:	81 1d       	adc	r24, r1
    1838:	11 24       	eor	r1, r1
    183a:	91 1d       	adc	r25, r1
    183c:	b2 9f       	mul	r27, r18
    183e:	70 0d       	add	r23, r0
    1840:	81 1d       	adc	r24, r1
    1842:	11 24       	eor	r1, r1
    1844:	91 1d       	adc	r25, r1
    1846:	08 95       	ret

00001848 <memcmp>:
    1848:	fb 01       	movw	r30, r22
    184a:	dc 01       	movw	r26, r24
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <memcmp+0xe>
    184e:	8d 91       	ld	r24, X+
    1850:	01 90       	ld	r0, Z+
    1852:	80 19       	sub	r24, r0
    1854:	21 f4       	brne	.+8      	; 0x185e <memcmp+0x16>
    1856:	41 50       	subi	r20, 0x01	; 1
    1858:	50 40       	sbci	r21, 0x00	; 0
    185a:	c8 f7       	brcc	.-14     	; 0x184e <memcmp+0x6>
    185c:	88 1b       	sub	r24, r24
    185e:	99 0b       	sbc	r25, r25
    1860:	08 95       	ret

00001862 <memcpy>:
    1862:	fb 01       	movw	r30, r22
    1864:	dc 01       	movw	r26, r24
    1866:	02 c0       	rjmp	.+4      	; 0x186c <memcpy+0xa>
    1868:	01 90       	ld	r0, Z+
    186a:	0d 92       	st	X+, r0
    186c:	41 50       	subi	r20, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	d8 f7       	brcc	.-10     	; 0x1868 <memcpy+0x6>
    1872:	08 95       	ret

00001874 <memset>:
    1874:	dc 01       	movw	r26, r24
    1876:	01 c0       	rjmp	.+2      	; 0x187a <memset+0x6>
    1878:	6d 93       	st	X+, r22
    187a:	41 50       	subi	r20, 0x01	; 1
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	e0 f7       	brcc	.-8      	; 0x1878 <memset+0x4>
    1880:	08 95       	ret

00001882 <sprintf>:
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2e 97       	sbiw	r28, 0x0e	; 14
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0e 89       	ldd	r16, Y+22	; 0x16
    1896:	1f 89       	ldd	r17, Y+23	; 0x17
    1898:	86 e0       	ldi	r24, 0x06	; 6
    189a:	8c 83       	std	Y+4, r24	; 0x04
    189c:	09 83       	std	Y+1, r16	; 0x01
    189e:	1a 83       	std	Y+2, r17	; 0x02
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	9f e7       	ldi	r25, 0x7F	; 127
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	ae 01       	movw	r20, r28
    18aa:	46 5e       	subi	r20, 0xE6	; 230
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	68 8d       	ldd	r22, Y+24	; 0x18
    18b0:	79 8d       	ldd	r23, Y+25	; 0x19
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vfprintf>
    18ba:	ef 81       	ldd	r30, Y+7	; 0x07
    18bc:	f8 85       	ldd	r31, Y+8	; 0x08
    18be:	e0 0f       	add	r30, r16
    18c0:	f1 1f       	adc	r31, r17
    18c2:	10 82       	st	Z, r1
    18c4:	2e 96       	adiw	r28, 0x0e	; 14
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <vfprintf>:
    18d4:	2f 92       	push	r2
    18d6:	3f 92       	push	r3
    18d8:	4f 92       	push	r4
    18da:	5f 92       	push	r5
    18dc:	6f 92       	push	r6
    18de:	7f 92       	push	r7
    18e0:	8f 92       	push	r8
    18e2:	9f 92       	push	r9
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	2b 97       	sbiw	r28, 0x0b	; 11
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	6c 01       	movw	r12, r24
    1904:	7b 01       	movw	r14, r22
    1906:	8a 01       	movw	r16, r20
    1908:	fc 01       	movw	r30, r24
    190a:	16 82       	std	Z+6, r1	; 0x06
    190c:	17 82       	std	Z+7, r1	; 0x07
    190e:	83 81       	ldd	r24, Z+3	; 0x03
    1910:	81 ff       	sbrs	r24, 1
    1912:	cc c1       	rjmp	.+920    	; 0x1cac <vfprintf+0x3d8>
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	3c 01       	movw	r6, r24
    191a:	f6 01       	movw	r30, r12
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	f7 01       	movw	r30, r14
    1920:	93 fd       	sbrc	r25, 3
    1922:	85 91       	lpm	r24, Z+
    1924:	93 ff       	sbrs	r25, 3
    1926:	81 91       	ld	r24, Z+
    1928:	7f 01       	movw	r14, r30
    192a:	88 23       	and	r24, r24
    192c:	09 f4       	brne	.+2      	; 0x1930 <vfprintf+0x5c>
    192e:	ba c1       	rjmp	.+884    	; 0x1ca4 <vfprintf+0x3d0>
    1930:	85 32       	cpi	r24, 0x25	; 37
    1932:	39 f4       	brne	.+14     	; 0x1942 <vfprintf+0x6e>
    1934:	93 fd       	sbrc	r25, 3
    1936:	85 91       	lpm	r24, Z+
    1938:	93 ff       	sbrs	r25, 3
    193a:	81 91       	ld	r24, Z+
    193c:	7f 01       	movw	r14, r30
    193e:	85 32       	cpi	r24, 0x25	; 37
    1940:	29 f4       	brne	.+10     	; 0x194c <vfprintf+0x78>
    1942:	b6 01       	movw	r22, r12
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    194a:	e7 cf       	rjmp	.-50     	; 0x191a <vfprintf+0x46>
    194c:	91 2c       	mov	r9, r1
    194e:	21 2c       	mov	r2, r1
    1950:	31 2c       	mov	r3, r1
    1952:	ff e1       	ldi	r31, 0x1F	; 31
    1954:	f3 15       	cp	r31, r3
    1956:	d8 f0       	brcs	.+54     	; 0x198e <vfprintf+0xba>
    1958:	8b 32       	cpi	r24, 0x2B	; 43
    195a:	79 f0       	breq	.+30     	; 0x197a <vfprintf+0xa6>
    195c:	38 f4       	brcc	.+14     	; 0x196c <vfprintf+0x98>
    195e:	80 32       	cpi	r24, 0x20	; 32
    1960:	79 f0       	breq	.+30     	; 0x1980 <vfprintf+0xac>
    1962:	83 32       	cpi	r24, 0x23	; 35
    1964:	a1 f4       	brne	.+40     	; 0x198e <vfprintf+0xba>
    1966:	23 2d       	mov	r18, r3
    1968:	20 61       	ori	r18, 0x10	; 16
    196a:	1d c0       	rjmp	.+58     	; 0x19a6 <vfprintf+0xd2>
    196c:	8d 32       	cpi	r24, 0x2D	; 45
    196e:	61 f0       	breq	.+24     	; 0x1988 <vfprintf+0xb4>
    1970:	80 33       	cpi	r24, 0x30	; 48
    1972:	69 f4       	brne	.+26     	; 0x198e <vfprintf+0xba>
    1974:	23 2d       	mov	r18, r3
    1976:	21 60       	ori	r18, 0x01	; 1
    1978:	16 c0       	rjmp	.+44     	; 0x19a6 <vfprintf+0xd2>
    197a:	83 2d       	mov	r24, r3
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	38 2e       	mov	r3, r24
    1980:	e3 2d       	mov	r30, r3
    1982:	e4 60       	ori	r30, 0x04	; 4
    1984:	3e 2e       	mov	r3, r30
    1986:	2a c0       	rjmp	.+84     	; 0x19dc <vfprintf+0x108>
    1988:	f3 2d       	mov	r31, r3
    198a:	f8 60       	ori	r31, 0x08	; 8
    198c:	1d c0       	rjmp	.+58     	; 0x19c8 <vfprintf+0xf4>
    198e:	37 fc       	sbrc	r3, 7
    1990:	2d c0       	rjmp	.+90     	; 0x19ec <vfprintf+0x118>
    1992:	20 ed       	ldi	r18, 0xD0	; 208
    1994:	28 0f       	add	r18, r24
    1996:	2a 30       	cpi	r18, 0x0A	; 10
    1998:	40 f0       	brcs	.+16     	; 0x19aa <vfprintf+0xd6>
    199a:	8e 32       	cpi	r24, 0x2E	; 46
    199c:	b9 f4       	brne	.+46     	; 0x19cc <vfprintf+0xf8>
    199e:	36 fc       	sbrc	r3, 6
    19a0:	81 c1       	rjmp	.+770    	; 0x1ca4 <vfprintf+0x3d0>
    19a2:	23 2d       	mov	r18, r3
    19a4:	20 64       	ori	r18, 0x40	; 64
    19a6:	32 2e       	mov	r3, r18
    19a8:	19 c0       	rjmp	.+50     	; 0x19dc <vfprintf+0x108>
    19aa:	36 fe       	sbrs	r3, 6
    19ac:	06 c0       	rjmp	.+12     	; 0x19ba <vfprintf+0xe6>
    19ae:	8a e0       	ldi	r24, 0x0A	; 10
    19b0:	98 9e       	mul	r9, r24
    19b2:	20 0d       	add	r18, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	92 2e       	mov	r9, r18
    19b8:	11 c0       	rjmp	.+34     	; 0x19dc <vfprintf+0x108>
    19ba:	ea e0       	ldi	r30, 0x0A	; 10
    19bc:	2e 9e       	mul	r2, r30
    19be:	20 0d       	add	r18, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	22 2e       	mov	r2, r18
    19c4:	f3 2d       	mov	r31, r3
    19c6:	f0 62       	ori	r31, 0x20	; 32
    19c8:	3f 2e       	mov	r3, r31
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <vfprintf+0x108>
    19cc:	8c 36       	cpi	r24, 0x6C	; 108
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <vfprintf+0x104>
    19d0:	83 2d       	mov	r24, r3
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	38 2e       	mov	r3, r24
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfprintf+0x108>
    19d8:	88 36       	cpi	r24, 0x68	; 104
    19da:	41 f4       	brne	.+16     	; 0x19ec <vfprintf+0x118>
    19dc:	f7 01       	movw	r30, r14
    19de:	93 fd       	sbrc	r25, 3
    19e0:	85 91       	lpm	r24, Z+
    19e2:	93 ff       	sbrs	r25, 3
    19e4:	81 91       	ld	r24, Z+
    19e6:	7f 01       	movw	r14, r30
    19e8:	81 11       	cpse	r24, r1
    19ea:	b3 cf       	rjmp	.-154    	; 0x1952 <vfprintf+0x7e>
    19ec:	98 2f       	mov	r25, r24
    19ee:	9f 7d       	andi	r25, 0xDF	; 223
    19f0:	95 54       	subi	r25, 0x45	; 69
    19f2:	93 30       	cpi	r25, 0x03	; 3
    19f4:	28 f4       	brcc	.+10     	; 0x1a00 <vfprintf+0x12c>
    19f6:	0c 5f       	subi	r16, 0xFC	; 252
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	9f e3       	ldi	r25, 0x3F	; 63
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <vfprintf+0x146>
    1a00:	83 36       	cpi	r24, 0x63	; 99
    1a02:	31 f0       	breq	.+12     	; 0x1a10 <vfprintf+0x13c>
    1a04:	83 37       	cpi	r24, 0x73	; 115
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <vfprintf+0x150>
    1a08:	83 35       	cpi	r24, 0x53	; 83
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <vfprintf+0x13a>
    1a0c:	59 c0       	rjmp	.+178    	; 0x1ac0 <vfprintf+0x1ec>
    1a0e:	21 c0       	rjmp	.+66     	; 0x1a52 <vfprintf+0x17e>
    1a10:	f8 01       	movw	r30, r16
    1a12:	80 81       	ld	r24, Z
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	0e 5f       	subi	r16, 0xFE	; 254
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	88 24       	eor	r8, r8
    1a1c:	83 94       	inc	r8
    1a1e:	91 2c       	mov	r9, r1
    1a20:	53 01       	movw	r10, r6
    1a22:	13 c0       	rjmp	.+38     	; 0x1a4a <vfprintf+0x176>
    1a24:	28 01       	movw	r4, r16
    1a26:	f2 e0       	ldi	r31, 0x02	; 2
    1a28:	4f 0e       	add	r4, r31
    1a2a:	51 1c       	adc	r5, r1
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	a0 80       	ld	r10, Z
    1a30:	b1 80       	ldd	r11, Z+1	; 0x01
    1a32:	36 fe       	sbrs	r3, 6
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <vfprintf+0x168>
    1a36:	69 2d       	mov	r22, r9
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <vfprintf+0x16c>
    1a3c:	6f ef       	ldi	r22, 0xFF	; 255
    1a3e:	7f ef       	ldi	r23, 0xFF	; 255
    1a40:	c5 01       	movw	r24, r10
    1a42:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <strnlen>
    1a46:	4c 01       	movw	r8, r24
    1a48:	82 01       	movw	r16, r4
    1a4a:	f3 2d       	mov	r31, r3
    1a4c:	ff 77       	andi	r31, 0x7F	; 127
    1a4e:	3f 2e       	mov	r3, r31
    1a50:	16 c0       	rjmp	.+44     	; 0x1a7e <vfprintf+0x1aa>
    1a52:	28 01       	movw	r4, r16
    1a54:	22 e0       	ldi	r18, 0x02	; 2
    1a56:	42 0e       	add	r4, r18
    1a58:	51 1c       	adc	r5, r1
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	a0 80       	ld	r10, Z
    1a5e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a60:	36 fe       	sbrs	r3, 6
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <vfprintf+0x196>
    1a64:	69 2d       	mov	r22, r9
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <vfprintf+0x19a>
    1a6a:	6f ef       	ldi	r22, 0xFF	; 255
    1a6c:	7f ef       	ldi	r23, 0xFF	; 255
    1a6e:	c5 01       	movw	r24, r10
    1a70:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <strnlen_P>
    1a74:	4c 01       	movw	r8, r24
    1a76:	f3 2d       	mov	r31, r3
    1a78:	f0 68       	ori	r31, 0x80	; 128
    1a7a:	3f 2e       	mov	r3, r31
    1a7c:	82 01       	movw	r16, r4
    1a7e:	33 fc       	sbrc	r3, 3
    1a80:	1b c0       	rjmp	.+54     	; 0x1ab8 <vfprintf+0x1e4>
    1a82:	82 2d       	mov	r24, r2
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	88 16       	cp	r8, r24
    1a88:	99 06       	cpc	r9, r25
    1a8a:	b0 f4       	brcc	.+44     	; 0x1ab8 <vfprintf+0x1e4>
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	80 e2       	ldi	r24, 0x20	; 32
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1a96:	2a 94       	dec	r2
    1a98:	f4 cf       	rjmp	.-24     	; 0x1a82 <vfprintf+0x1ae>
    1a9a:	f5 01       	movw	r30, r10
    1a9c:	37 fc       	sbrc	r3, 7
    1a9e:	85 91       	lpm	r24, Z+
    1aa0:	37 fe       	sbrs	r3, 7
    1aa2:	81 91       	ld	r24, Z+
    1aa4:	5f 01       	movw	r10, r30
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1aae:	21 10       	cpse	r2, r1
    1ab0:	2a 94       	dec	r2
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	82 1a       	sub	r8, r18
    1ab6:	91 08       	sbc	r9, r1
    1ab8:	81 14       	cp	r8, r1
    1aba:	91 04       	cpc	r9, r1
    1abc:	71 f7       	brne	.-36     	; 0x1a9a <vfprintf+0x1c6>
    1abe:	e8 c0       	rjmp	.+464    	; 0x1c90 <vfprintf+0x3bc>
    1ac0:	84 36       	cpi	r24, 0x64	; 100
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <vfprintf+0x1f4>
    1ac4:	89 36       	cpi	r24, 0x69	; 105
    1ac6:	41 f5       	brne	.+80     	; 0x1b18 <vfprintf+0x244>
    1ac8:	f8 01       	movw	r30, r16
    1aca:	37 fe       	sbrs	r3, 7
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <vfprintf+0x208>
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0c 5f       	subi	r16, 0xFC	; 252
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	08 c0       	rjmp	.+16     	; 0x1aec <vfprintf+0x218>
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	07 2e       	mov	r0, r23
    1ae2:	00 0c       	add	r0, r0
    1ae4:	88 0b       	sbc	r24, r24
    1ae6:	99 0b       	sbc	r25, r25
    1ae8:	0e 5f       	subi	r16, 0xFE	; 254
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	f3 2d       	mov	r31, r3
    1aee:	ff 76       	andi	r31, 0x6F	; 111
    1af0:	3f 2e       	mov	r3, r31
    1af2:	97 ff       	sbrs	r25, 7
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <vfprintf+0x234>
    1af6:	90 95       	com	r25
    1af8:	80 95       	com	r24
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	f0 68       	ori	r31, 0x80	; 128
    1b06:	3f 2e       	mov	r3, r31
    1b08:	2a e0       	ldi	r18, 0x0A	; 10
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	a3 01       	movw	r20, r6
    1b0e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__ultoa_invert>
    1b12:	88 2e       	mov	r8, r24
    1b14:	86 18       	sub	r8, r6
    1b16:	45 c0       	rjmp	.+138    	; 0x1ba2 <vfprintf+0x2ce>
    1b18:	85 37       	cpi	r24, 0x75	; 117
    1b1a:	31 f4       	brne	.+12     	; 0x1b28 <vfprintf+0x254>
    1b1c:	23 2d       	mov	r18, r3
    1b1e:	2f 7e       	andi	r18, 0xEF	; 239
    1b20:	b2 2e       	mov	r11, r18
    1b22:	2a e0       	ldi	r18, 0x0A	; 10
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	25 c0       	rjmp	.+74     	; 0x1b72 <vfprintf+0x29e>
    1b28:	93 2d       	mov	r25, r3
    1b2a:	99 7f       	andi	r25, 0xF9	; 249
    1b2c:	b9 2e       	mov	r11, r25
    1b2e:	8f 36       	cpi	r24, 0x6F	; 111
    1b30:	c1 f0       	breq	.+48     	; 0x1b62 <vfprintf+0x28e>
    1b32:	18 f4       	brcc	.+6      	; 0x1b3a <vfprintf+0x266>
    1b34:	88 35       	cpi	r24, 0x58	; 88
    1b36:	79 f0       	breq	.+30     	; 0x1b56 <vfprintf+0x282>
    1b38:	b5 c0       	rjmp	.+362    	; 0x1ca4 <vfprintf+0x3d0>
    1b3a:	80 37       	cpi	r24, 0x70	; 112
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <vfprintf+0x270>
    1b3e:	88 37       	cpi	r24, 0x78	; 120
    1b40:	21 f0       	breq	.+8      	; 0x1b4a <vfprintf+0x276>
    1b42:	b0 c0       	rjmp	.+352    	; 0x1ca4 <vfprintf+0x3d0>
    1b44:	e9 2f       	mov	r30, r25
    1b46:	e0 61       	ori	r30, 0x10	; 16
    1b48:	be 2e       	mov	r11, r30
    1b4a:	b4 fe       	sbrs	r11, 4
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <vfprintf+0x294>
    1b4e:	fb 2d       	mov	r31, r11
    1b50:	f4 60       	ori	r31, 0x04	; 4
    1b52:	bf 2e       	mov	r11, r31
    1b54:	09 c0       	rjmp	.+18     	; 0x1b68 <vfprintf+0x294>
    1b56:	34 fe       	sbrs	r3, 4
    1b58:	0a c0       	rjmp	.+20     	; 0x1b6e <vfprintf+0x29a>
    1b5a:	29 2f       	mov	r18, r25
    1b5c:	26 60       	ori	r18, 0x06	; 6
    1b5e:	b2 2e       	mov	r11, r18
    1b60:	06 c0       	rjmp	.+12     	; 0x1b6e <vfprintf+0x29a>
    1b62:	28 e0       	ldi	r18, 0x08	; 8
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <vfprintf+0x29e>
    1b68:	20 e1       	ldi	r18, 0x10	; 16
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <vfprintf+0x29e>
    1b6e:	20 e1       	ldi	r18, 0x10	; 16
    1b70:	32 e0       	ldi	r19, 0x02	; 2
    1b72:	f8 01       	movw	r30, r16
    1b74:	b7 fe       	sbrs	r11, 7
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <vfprintf+0x2b2>
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	0c 5f       	subi	r16, 0xFC	; 252
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <vfprintf+0x2be>
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 5f       	subi	r16, 0xFE	; 254
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	a3 01       	movw	r20, r6
    1b94:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__ultoa_invert>
    1b98:	88 2e       	mov	r8, r24
    1b9a:	86 18       	sub	r8, r6
    1b9c:	fb 2d       	mov	r31, r11
    1b9e:	ff 77       	andi	r31, 0x7F	; 127
    1ba0:	3f 2e       	mov	r3, r31
    1ba2:	36 fe       	sbrs	r3, 6
    1ba4:	0d c0       	rjmp	.+26     	; 0x1bc0 <vfprintf+0x2ec>
    1ba6:	23 2d       	mov	r18, r3
    1ba8:	2e 7f       	andi	r18, 0xFE	; 254
    1baa:	a2 2e       	mov	r10, r18
    1bac:	89 14       	cp	r8, r9
    1bae:	58 f4       	brcc	.+22     	; 0x1bc6 <vfprintf+0x2f2>
    1bb0:	34 fe       	sbrs	r3, 4
    1bb2:	0b c0       	rjmp	.+22     	; 0x1bca <vfprintf+0x2f6>
    1bb4:	32 fc       	sbrc	r3, 2
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <vfprintf+0x2f6>
    1bb8:	83 2d       	mov	r24, r3
    1bba:	8e 7e       	andi	r24, 0xEE	; 238
    1bbc:	a8 2e       	mov	r10, r24
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <vfprintf+0x2f6>
    1bc0:	b8 2c       	mov	r11, r8
    1bc2:	a3 2c       	mov	r10, r3
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <vfprintf+0x2f8>
    1bc6:	b8 2c       	mov	r11, r8
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <vfprintf+0x2f8>
    1bca:	b9 2c       	mov	r11, r9
    1bcc:	a4 fe       	sbrs	r10, 4
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <vfprintf+0x31a>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e8 0d       	add	r30, r8
    1bd4:	f1 1d       	adc	r31, r1
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 33       	cpi	r24, 0x30	; 48
    1bda:	21 f4       	brne	.+8      	; 0x1be4 <vfprintf+0x310>
    1bdc:	9a 2d       	mov	r25, r10
    1bde:	99 7e       	andi	r25, 0xE9	; 233
    1be0:	a9 2e       	mov	r10, r25
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <vfprintf+0x322>
    1be4:	a2 fe       	sbrs	r10, 2
    1be6:	06 c0       	rjmp	.+12     	; 0x1bf4 <vfprintf+0x320>
    1be8:	b3 94       	inc	r11
    1bea:	b3 94       	inc	r11
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <vfprintf+0x322>
    1bee:	8a 2d       	mov	r24, r10
    1bf0:	86 78       	andi	r24, 0x86	; 134
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <vfprintf+0x322>
    1bf4:	b3 94       	inc	r11
    1bf6:	a3 fc       	sbrc	r10, 3
    1bf8:	11 c0       	rjmp	.+34     	; 0x1c1c <vfprintf+0x348>
    1bfa:	a0 fe       	sbrs	r10, 0
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <vfprintf+0x336>
    1bfe:	b2 14       	cp	r11, r2
    1c00:	88 f4       	brcc	.+34     	; 0x1c24 <vfprintf+0x350>
    1c02:	28 0c       	add	r2, r8
    1c04:	92 2c       	mov	r9, r2
    1c06:	9b 18       	sub	r9, r11
    1c08:	0e c0       	rjmp	.+28     	; 0x1c26 <vfprintf+0x352>
    1c0a:	b2 14       	cp	r11, r2
    1c0c:	60 f4       	brcc	.+24     	; 0x1c26 <vfprintf+0x352>
    1c0e:	b6 01       	movw	r22, r12
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1c18:	b3 94       	inc	r11
    1c1a:	f7 cf       	rjmp	.-18     	; 0x1c0a <vfprintf+0x336>
    1c1c:	b2 14       	cp	r11, r2
    1c1e:	18 f4       	brcc	.+6      	; 0x1c26 <vfprintf+0x352>
    1c20:	2b 18       	sub	r2, r11
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x354>
    1c24:	98 2c       	mov	r9, r8
    1c26:	21 2c       	mov	r2, r1
    1c28:	a4 fe       	sbrs	r10, 4
    1c2a:	10 c0       	rjmp	.+32     	; 0x1c4c <vfprintf+0x378>
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	80 e3       	ldi	r24, 0x30	; 48
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1c36:	a2 fe       	sbrs	r10, 2
    1c38:	17 c0       	rjmp	.+46     	; 0x1c68 <vfprintf+0x394>
    1c3a:	a1 fc       	sbrc	r10, 1
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <vfprintf+0x370>
    1c3e:	88 e7       	ldi	r24, 0x78	; 120
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0x374>
    1c44:	88 e5       	ldi	r24, 0x58	; 88
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	b6 01       	movw	r22, r12
    1c4a:	0c c0       	rjmp	.+24     	; 0x1c64 <vfprintf+0x390>
    1c4c:	8a 2d       	mov	r24, r10
    1c4e:	86 78       	andi	r24, 0x86	; 134
    1c50:	59 f0       	breq	.+22     	; 0x1c68 <vfprintf+0x394>
    1c52:	a1 fe       	sbrs	r10, 1
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x386>
    1c56:	8b e2       	ldi	r24, 0x2B	; 43
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <vfprintf+0x388>
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	a7 fc       	sbrc	r10, 7
    1c5e:	8d e2       	ldi	r24, 0x2D	; 45
    1c60:	b6 01       	movw	r22, r12
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1c68:	89 14       	cp	r8, r9
    1c6a:	38 f4       	brcc	.+14     	; 0x1c7a <vfprintf+0x3a6>
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	80 e3       	ldi	r24, 0x30	; 48
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1c76:	9a 94       	dec	r9
    1c78:	f7 cf       	rjmp	.-18     	; 0x1c68 <vfprintf+0x394>
    1c7a:	8a 94       	dec	r8
    1c7c:	f3 01       	movw	r30, r6
    1c7e:	e8 0d       	add	r30, r8
    1c80:	f1 1d       	adc	r31, r1
    1c82:	80 81       	ld	r24, Z
    1c84:	b6 01       	movw	r22, r12
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1c8c:	81 10       	cpse	r8, r1
    1c8e:	f5 cf       	rjmp	.-22     	; 0x1c7a <vfprintf+0x3a6>
    1c90:	22 20       	and	r2, r2
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <vfprintf+0x3c2>
    1c94:	42 ce       	rjmp	.-892    	; 0x191a <vfprintf+0x46>
    1c96:	b6 01       	movw	r22, r12
    1c98:	80 e2       	ldi	r24, 0x20	; 32
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputc>
    1ca0:	2a 94       	dec	r2
    1ca2:	f6 cf       	rjmp	.-20     	; 0x1c90 <vfprintf+0x3bc>
    1ca4:	f6 01       	movw	r30, r12
    1ca6:	86 81       	ldd	r24, Z+6	; 0x06
    1ca8:	97 81       	ldd	r25, Z+7	; 0x07
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <vfprintf+0x3dc>
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	2b 96       	adiw	r28, 0x0b	; 11
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	af 90       	pop	r10
    1cca:	9f 90       	pop	r9
    1ccc:	8f 90       	pop	r8
    1cce:	7f 90       	pop	r7
    1cd0:	6f 90       	pop	r6
    1cd2:	5f 90       	pop	r5
    1cd4:	4f 90       	pop	r4
    1cd6:	3f 90       	pop	r3
    1cd8:	2f 90       	pop	r2
    1cda:	08 95       	ret

00001cdc <strnlen_P>:
    1cdc:	fc 01       	movw	r30, r24
    1cde:	05 90       	lpm	r0, Z+
    1ce0:	61 50       	subi	r22, 0x01	; 1
    1ce2:	70 40       	sbci	r23, 0x00	; 0
    1ce4:	01 10       	cpse	r0, r1
    1ce6:	d8 f7       	brcc	.-10     	; 0x1cde <strnlen_P+0x2>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	8e 0f       	add	r24, r30
    1cee:	9f 1f       	adc	r25, r31
    1cf0:	08 95       	ret

00001cf2 <strnlen>:
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	61 50       	subi	r22, 0x01	; 1
    1cf6:	70 40       	sbci	r23, 0x00	; 0
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	01 10       	cpse	r0, r1
    1cfc:	d8 f7       	brcc	.-10     	; 0x1cf4 <strnlen+0x2>
    1cfe:	80 95       	com	r24
    1d00:	90 95       	com	r25
    1d02:	8e 0f       	add	r24, r30
    1d04:	9f 1f       	adc	r25, r31
    1d06:	08 95       	ret

00001d08 <fputc>:
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	fb 01       	movw	r30, r22
    1d12:	23 81       	ldd	r18, Z+3	; 0x03
    1d14:	21 fd       	sbrc	r18, 1
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <fputc+0x16>
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	9f ef       	ldi	r25, 0xFF	; 255
    1d1c:	2c c0       	rjmp	.+88     	; 0x1d76 <fputc+0x6e>
    1d1e:	22 ff       	sbrs	r18, 2
    1d20:	16 c0       	rjmp	.+44     	; 0x1d4e <fputc+0x46>
    1d22:	46 81       	ldd	r20, Z+6	; 0x06
    1d24:	57 81       	ldd	r21, Z+7	; 0x07
    1d26:	24 81       	ldd	r18, Z+4	; 0x04
    1d28:	35 81       	ldd	r19, Z+5	; 0x05
    1d2a:	42 17       	cp	r20, r18
    1d2c:	53 07       	cpc	r21, r19
    1d2e:	44 f4       	brge	.+16     	; 0x1d40 <fputc+0x38>
    1d30:	a0 81       	ld	r26, Z
    1d32:	b1 81       	ldd	r27, Z+1	; 0x01
    1d34:	9d 01       	movw	r18, r26
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	20 83       	st	Z, r18
    1d3c:	31 83       	std	Z+1, r19	; 0x01
    1d3e:	8c 93       	st	X, r24
    1d40:	26 81       	ldd	r18, Z+6	; 0x06
    1d42:	37 81       	ldd	r19, Z+7	; 0x07
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	26 83       	std	Z+6, r18	; 0x06
    1d4a:	37 83       	std	Z+7, r19	; 0x07
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <fputc+0x6e>
    1d4e:	8b 01       	movw	r16, r22
    1d50:	ec 01       	movw	r28, r24
    1d52:	fb 01       	movw	r30, r22
    1d54:	00 84       	ldd	r0, Z+8	; 0x08
    1d56:	f1 85       	ldd	r31, Z+9	; 0x09
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	19 95       	eicall
    1d5c:	89 2b       	or	r24, r25
    1d5e:	e1 f6       	brne	.-72     	; 0x1d18 <fputc+0x10>
    1d60:	d8 01       	movw	r26, r16
    1d62:	16 96       	adiw	r26, 0x06	; 6
    1d64:	8d 91       	ld	r24, X+
    1d66:	9c 91       	ld	r25, X
    1d68:	17 97       	sbiw	r26, 0x07	; 7
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	16 96       	adiw	r26, 0x06	; 6
    1d6e:	8d 93       	st	X+, r24
    1d70:	9c 93       	st	X, r25
    1d72:	17 97       	sbiw	r26, 0x07	; 7
    1d74:	ce 01       	movw	r24, r28
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <__ultoa_invert>:
    1d80:	fa 01       	movw	r30, r20
    1d82:	aa 27       	eor	r26, r26
    1d84:	28 30       	cpi	r18, 0x08	; 8
    1d86:	51 f1       	breq	.+84     	; 0x1ddc <__ultoa_invert+0x5c>
    1d88:	20 31       	cpi	r18, 0x10	; 16
    1d8a:	81 f1       	breq	.+96     	; 0x1dec <__ultoa_invert+0x6c>
    1d8c:	e8 94       	clt
    1d8e:	6f 93       	push	r22
    1d90:	6e 7f       	andi	r22, 0xFE	; 254
    1d92:	6e 5f       	subi	r22, 0xFE	; 254
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	8f 4f       	sbci	r24, 0xFF	; 255
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	af 4f       	sbci	r26, 0xFF	; 255
    1d9c:	b1 e0       	ldi	r27, 0x01	; 1
    1d9e:	3e d0       	rcall	.+124    	; 0x1e1c <__ultoa_invert+0x9c>
    1da0:	b4 e0       	ldi	r27, 0x04	; 4
    1da2:	3c d0       	rcall	.+120    	; 0x1e1c <__ultoa_invert+0x9c>
    1da4:	67 0f       	add	r22, r23
    1da6:	78 1f       	adc	r23, r24
    1da8:	89 1f       	adc	r24, r25
    1daa:	9a 1f       	adc	r25, r26
    1dac:	a1 1d       	adc	r26, r1
    1dae:	68 0f       	add	r22, r24
    1db0:	79 1f       	adc	r23, r25
    1db2:	8a 1f       	adc	r24, r26
    1db4:	91 1d       	adc	r25, r1
    1db6:	a1 1d       	adc	r26, r1
    1db8:	6a 0f       	add	r22, r26
    1dba:	71 1d       	adc	r23, r1
    1dbc:	81 1d       	adc	r24, r1
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	a1 1d       	adc	r26, r1
    1dc2:	20 d0       	rcall	.+64     	; 0x1e04 <__ultoa_invert+0x84>
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <__ultoa_invert+0x48>
    1dc6:	68 94       	set
    1dc8:	3f 91       	pop	r19
    1dca:	2a e0       	ldi	r18, 0x0A	; 10
    1dcc:	26 9f       	mul	r18, r22
    1dce:	11 24       	eor	r1, r1
    1dd0:	30 19       	sub	r19, r0
    1dd2:	30 5d       	subi	r19, 0xD0	; 208
    1dd4:	31 93       	st	Z+, r19
    1dd6:	de f6       	brtc	.-74     	; 0x1d8e <__ultoa_invert+0xe>
    1dd8:	cf 01       	movw	r24, r30
    1dda:	08 95       	ret
    1ddc:	46 2f       	mov	r20, r22
    1dde:	47 70       	andi	r20, 0x07	; 7
    1de0:	40 5d       	subi	r20, 0xD0	; 208
    1de2:	41 93       	st	Z+, r20
    1de4:	b3 e0       	ldi	r27, 0x03	; 3
    1de6:	0f d0       	rcall	.+30     	; 0x1e06 <__ultoa_invert+0x86>
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0x5c>
    1dea:	f6 cf       	rjmp	.-20     	; 0x1dd8 <__ultoa_invert+0x58>
    1dec:	46 2f       	mov	r20, r22
    1dee:	4f 70       	andi	r20, 0x0F	; 15
    1df0:	40 5d       	subi	r20, 0xD0	; 208
    1df2:	4a 33       	cpi	r20, 0x3A	; 58
    1df4:	18 f0       	brcs	.+6      	; 0x1dfc <__ultoa_invert+0x7c>
    1df6:	49 5d       	subi	r20, 0xD9	; 217
    1df8:	31 fd       	sbrc	r19, 1
    1dfa:	40 52       	subi	r20, 0x20	; 32
    1dfc:	41 93       	st	Z+, r20
    1dfe:	02 d0       	rcall	.+4      	; 0x1e04 <__ultoa_invert+0x84>
    1e00:	a9 f7       	brne	.-22     	; 0x1dec <__ultoa_invert+0x6c>
    1e02:	ea cf       	rjmp	.-44     	; 0x1dd8 <__ultoa_invert+0x58>
    1e04:	b4 e0       	ldi	r27, 0x04	; 4
    1e06:	a6 95       	lsr	r26
    1e08:	97 95       	ror	r25
    1e0a:	87 95       	ror	r24
    1e0c:	77 95       	ror	r23
    1e0e:	67 95       	ror	r22
    1e10:	ba 95       	dec	r27
    1e12:	c9 f7       	brne	.-14     	; 0x1e06 <__ultoa_invert+0x86>
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 05       	cpc	r22, r1
    1e18:	71 05       	cpc	r23, r1
    1e1a:	08 95       	ret
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	ac 01       	movw	r20, r24
    1e20:	0a 2e       	mov	r0, r26
    1e22:	06 94       	lsr	r0
    1e24:	57 95       	ror	r21
    1e26:	47 95       	ror	r20
    1e28:	37 95       	ror	r19
    1e2a:	27 95       	ror	r18
    1e2c:	ba 95       	dec	r27
    1e2e:	c9 f7       	brne	.-14     	; 0x1e22 <__ultoa_invert+0xa2>
    1e30:	62 0f       	add	r22, r18
    1e32:	73 1f       	adc	r23, r19
    1e34:	84 1f       	adc	r24, r20
    1e36:	95 1f       	adc	r25, r21
    1e38:	a0 1d       	adc	r26, r0
    1e3a:	08 95       	ret

00001e3c <_exit>:
    1e3c:	f8 94       	cli

00001e3e <__stop_program>:
    1e3e:	ff cf       	rjmp	.-2      	; 0x1e3e <__stop_program>
