
ScaleTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f4  00802000  000021dc  00002270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000012c3  008022f4  008022f4  00002564  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e21  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e3  00000000  00000000  00008809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026bd  00000000  00000000  00009aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  0000c1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002295  00000000  00000000  0000cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f68  00000000  00000000  0000eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  00011e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_14>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_20>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_25>
      68:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_26>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <_task_test_func2>
     1cc:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <_task_test_func3>
     1d0:	0c 94 35 0b 	jmp	0x166a	; 0x166a <test_tick>
     1d4:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_task_test_post_func>
     1d8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_task_test_func1>
     1dc:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <test_create_task>
     1e0:	0c 94 11 07 	jmp	0xe22	; 0xe22 <kernel_catch_task_return>
     1e4:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <test_timer>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df e5       	ldi	r29, 0x5F	; 95
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	12 e2       	ldi	r17, 0x22	; 34
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ec ed       	ldi	r30, 0xDC	; 220
     200:	f1 e2       	ldi	r31, 0x21	; 33
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a4 3f       	cpi	r26, 0xF4	; 244
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	25 e3       	ldi	r18, 0x35	; 53
     214:	a4 ef       	ldi	r26, 0xF4	; 244
     216:	b2 e2       	ldi	r27, 0x22	; 34
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a7 3b       	cpi	r26, 0xB7	; 183
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <main>
     226:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <mem_man_init>:

	CRITICAL_SYNC_START();
	blk &= ~IN_USE_bm;
	memcpy(addr, &blk, HEADER_SIZE);
	totalAllocatedMemory -= blk;
	CRITICAL_SYNC_END();
     22e:	08 95       	ret

00000230 <combine_unused_blocks>:
}

void combine_unused_blocks(uint16_t index) {
     230:	bc 01       	movw	r22, r24
	uint8_t inUse = 0;
	uint16_t nextBlk, blkSize = 0;
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
	totalAllocatedMemory -= blk;
	CRITICAL_SYNC_END();
}

void combine_unused_blocks(uint16_t index) {
	uint8_t inUse = 0;
     236:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t nextBlk, blkSize = 0;

	while (inUse == 0 && index + blkSize < MEMORY_SIZE) {
     238:	14 c0       	rjmp	.+40     	; 0x262 <combine_unused_blocks+0x32>
		memcpy(&nextBlk, &memory[index] + blkSize, HEADER_SIZE);
     23a:	fb 01       	movw	r30, r22
     23c:	eb 50       	subi	r30, 0x0B	; 11
     23e:	fd 4d       	sbci	r31, 0xDD	; 221
     240:	df 01       	movw	r26, r30
     242:	a2 0f       	add	r26, r18
     244:	b3 1f       	adc	r27, r19
     246:	4d 91       	ld	r20, X+
     248:	5c 91       	ld	r21, X
		if (nextBlk == 0)
     24a:	41 15       	cp	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	89 f0       	breq	.+34     	; 0x272 <combine_unused_blocks+0x42>
			break;
		inUse = (nextBlk & IN_USE_bm) >> 8;
     250:	ca 01       	movw	r24, r20
     252:	88 27       	eor	r24, r24
     254:	90 78       	andi	r25, 0x80	; 128
		if (!inUse) {
     256:	91 11       	cpse	r25, r1
     258:	04 c0       	rjmp	.+8      	; 0x262 <combine_unused_blocks+0x32>
			blkSize += nextBlk;
     25a:	24 0f       	add	r18, r20
     25c:	35 1f       	adc	r19, r21
			memcpy(&memory[index], &blkSize, HEADER_SIZE);
     25e:	20 83       	st	Z, r18
     260:	31 83       	std	Z+1, r19	; 0x01

void combine_unused_blocks(uint16_t index) {
	uint8_t inUse = 0;
	uint16_t nextBlk, blkSize = 0;

	while (inUse == 0 && index + blkSize < MEMORY_SIZE) {
     262:	91 11       	cpse	r25, r1
     264:	06 c0       	rjmp	.+12     	; 0x272 <combine_unused_blocks+0x42>
     266:	cb 01       	movw	r24, r22
     268:	82 0f       	add	r24, r18
     26a:	93 1f       	adc	r25, r19
     26c:	81 15       	cp	r24, r1
     26e:	90 41       	sbci	r25, 0x10	; 16
     270:	20 f3       	brcs	.-56     	; 0x23a <combine_unused_blocks+0xa>
     272:	08 95       	ret

00000274 <internal_malloc>:

void mem_man_init(void) {
	//memset(memory, 0, MEMORY_SIZE);
}

mem_loc* internal_malloc(uint16_t size) {
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
	uint8_t inUse;

	if (size > MEMORY_SIZE - HEADER_SIZE || MEMORY_SIZE - totalAllocatedMemory < size + HEADER_SIZE)
     27c:	8f 3f       	cpi	r24, 0xFF	; 255
     27e:	2f e0       	ldi	r18, 0x0F	; 15
     280:	92 07       	cpc	r25, r18
     282:	08 f0       	brcs	.+2      	; 0x286 <internal_malloc+0x12>
     284:	76 c0       	rjmp	.+236    	; 0x372 <internal_malloc+0xfe>
     286:	40 91 76 33 	lds	r20, 0x3376	; 0x803376 <totalAllocatedMemory>
     28a:	50 91 77 33 	lds	r21, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e1       	ldi	r19, 0x10	; 16
     292:	24 1b       	sub	r18, r20
     294:	35 0b       	sbc	r19, r21
     296:	8c 01       	movw	r16, r24
     298:	0e 5f       	subi	r16, 0xFE	; 254
     29a:	1f 4f       	sbci	r17, 0xFF	; 255
     29c:	20 17       	cp	r18, r16
     29e:	31 07       	cpc	r19, r17
     2a0:	08 f4       	brcc	.+2      	; 0x2a4 <internal_malloc+0x30>
     2a2:	6a c0       	rjmp	.+212    	; 0x378 <internal_malloc+0x104>
		return NULL;

	CRITICAL_SYNC_START();
     2a4:	20 91 f4 22 	lds	r18, 0x22F4	; 0x8022f4 <__data_end>
     2a8:	31 e0       	ldi	r19, 0x01	; 1
     2aa:	32 0f       	add	r19, r18
     2ac:	30 93 f4 22 	sts	0x22F4, r19	; 0x8022f4 <__data_end>
     2b0:	21 11       	cpse	r18, r1
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <internal_malloc+0x48>
     2b4:	2f b7       	in	r18, 0x3f	; 63
     2b6:	20 93 75 33 	sts	0x3375, r18	; 0x803375 <_sreg>
     2ba:	f8 94       	cli
     2bc:	ec 01       	movw	r28, r24
	4 bytes
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 18 01 	call	0x230	; 0x230 <combine_unused_blocks>
	//memset(memory, 0, MEMORY_SIZE);
}

mem_loc* internal_malloc(uint16_t size) {
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
void mem_man_init(void) {
	//memset(memory, 0, MEMORY_SIZE);
}

mem_loc* internal_malloc(uint16_t size) {
	uint16_t index = 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
	while (index < MEMORY_SIZE) {
     2ce:	11 c0       	rjmp	.+34     	; 0x2f2 <internal_malloc+0x7e>
		memcpy(&blkSize, &memory[index], HEADER_SIZE);
     2d0:	fc 01       	movw	r30, r24
     2d2:	eb 50       	subi	r30, 0x0B	; 11
     2d4:	fd 4d       	sbci	r31, 0xDD	; 221
     2d6:	40 81       	ld	r20, Z
     2d8:	51 81       	ldd	r21, Z+1	; 0x01
		inUse = (blkSize & IN_USE_bm) > 0;
		blkSize &= ~IN_USE_bm;
     2da:	9a 01       	movw	r18, r20
     2dc:	3f 77       	andi	r19, 0x7F	; 127

		if (inUse == 0 && (blkSize == 0 || blkSize >= intSize))
     2de:	55 23       	and	r21, r21
     2e0:	34 f0       	brlt	.+12     	; 0x2ee <internal_malloc+0x7a>
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	49 f0       	breq	.+18     	; 0x2fa <internal_malloc+0x86>
     2e8:	20 17       	cp	r18, r16
     2ea:	31 07       	cpc	r19, r17
     2ec:	30 f4       	brcc	.+12     	; 0x2fa <internal_malloc+0x86>
			break;
		index += blkSize;
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
	hhmm mm
	xxxx xxxx xxxx xxxx
	0    4    8    12
	************************************************************************/
	combine_unused_blocks(0);
	while (index < MEMORY_SIZE) {
     2f2:	81 15       	cp	r24, r1
     2f4:	40 e1       	ldi	r20, 0x10	; 16
     2f6:	94 07       	cpc	r25, r20
     2f8:	58 f3       	brcs	.-42     	; 0x2d0 <internal_malloc+0x5c>
			break;
		index += blkSize;
	}

	// found a block that was freed that we can re-purpose
	if (index < MEMORY_SIZE && blkSize > 0)
     2fa:	81 15       	cp	r24, r1
     2fc:	40 e1       	ldi	r20, 0x10	; 16
     2fe:	94 07       	cpc	r25, r20
     300:	48 f4       	brcc	.+18     	; 0x314 <internal_malloc+0xa0>
     302:	23 2b       	or	r18, r19
     304:	39 f0       	breq	.+14     	; 0x314 <internal_malloc+0xa0>
		return internal_realloc(&memory[index], size, false);
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	be 01       	movw	r22, r28
     30a:	8b 50       	subi	r24, 0x0B	; 11
     30c:	9d 4d       	sbci	r25, 0xDD	; 221
     30e:	0e 94 c6 01 	call	0x38c	; 0x38c <internal_realloc>
     312:	37 c0       	rjmp	.+110    	; 0x382 <internal_malloc+0x10e>

	if (index >= MEMORY_SIZE) {
     314:	81 15       	cp	r24, r1
     316:	20 e1       	ldi	r18, 0x10	; 16
     318:	92 07       	cpc	r25, r18
     31a:	68 f0       	brcs	.+26     	; 0x336 <internal_malloc+0xc2>
		CRITICAL_SYNC_END();
     31c:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     320:	81 50       	subi	r24, 0x01	; 1
     322:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     326:	81 11       	cpse	r24, r1
     328:	2a c0       	rjmp	.+84     	; 0x37e <internal_malloc+0x10a>
     32a:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     32e:	8f bf       	out	0x3f, r24	; 63
		return NULL;
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	26 c0       	rjmp	.+76     	; 0x382 <internal_malloc+0x10e>
	}

	intSize |= IN_USE_bm;
     336:	10 68       	ori	r17, 0x80	; 128
	memcpy(&memory[index], &intSize, HEADER_SIZE);
     338:	fc 01       	movw	r30, r24
     33a:	eb 50       	subi	r30, 0x0B	; 11
     33c:	fd 4d       	sbci	r31, 0xDD	; 221
     33e:	00 83       	st	Z, r16
     340:	11 83       	std	Z+1, r17	; 0x01
	totalAllocatedMemory += size + HEADER_SIZE;
     342:	20 91 76 33 	lds	r18, 0x3376	; 0x803376 <totalAllocatedMemory>
     346:	30 91 77 33 	lds	r19, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     34a:	c2 0f       	add	r28, r18
     34c:	d3 1f       	adc	r29, r19
     34e:	22 96       	adiw	r28, 0x02	; 2
     350:	c0 93 76 33 	sts	0x3376, r28	; 0x803376 <totalAllocatedMemory>
     354:	d0 93 77 33 	sts	0x3377, r29	; 0x803377 <totalAllocatedMemory+0x1>

	CRITICAL_SYNC_END();
     358:	20 91 f4 22 	lds	r18, 0x22F4	; 0x8022f4 <__data_end>
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	20 93 f4 22 	sts	0x22F4, r18	; 0x8022f4 <__data_end>
     362:	21 11       	cpse	r18, r1
     364:	03 c0       	rjmp	.+6      	; 0x36c <internal_malloc+0xf8>
     366:	20 91 75 33 	lds	r18, 0x3375	; 0x803375 <_sreg>
     36a:	2f bf       	out	0x3f, r18	; 63
	return &memory[index + HEADER_SIZE];
     36c:	89 50       	subi	r24, 0x09	; 9
     36e:	9d 4d       	sbci	r25, 0xDD	; 221
     370:	08 c0       	rjmp	.+16     	; 0x382 <internal_malloc+0x10e>
	uint16_t index = 0;
	uint16_t intSize, blkSize = 0;
	uint8_t inUse;

	if (size > MEMORY_SIZE - HEADER_SIZE || MEMORY_SIZE - totalAllocatedMemory < size + HEADER_SIZE)
		return NULL;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	05 c0       	rjmp	.+10     	; 0x382 <internal_malloc+0x10e>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 c0       	rjmp	.+4      	; 0x382 <internal_malloc+0x10e>
	if (index < MEMORY_SIZE && blkSize > 0)
		return internal_realloc(&memory[index], size, false);

	if (index >= MEMORY_SIZE) {
		CRITICAL_SYNC_END();
		return NULL;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
	memcpy(&memory[index], &intSize, HEADER_SIZE);
	totalAllocatedMemory += size + HEADER_SIZE;

	CRITICAL_SYNC_END();
	return &memory[index + HEADER_SIZE];
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <internal_realloc>:
	memset(ptr, 0, size);
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
     38c:	2f 92       	push	r2
     38e:	3f 92       	push	r3
     390:	4f 92       	push	r4
     392:	5f 92       	push	r5
     394:	6f 92       	push	r6
     396:	7f 92       	push	r7
     398:	8f 92       	push	r8
     39a:	9f 92       	push	r9
     39c:	af 92       	push	r10
     39e:	bf 92       	push	r11
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     3b0:	c5 ef       	ldi	r28, 0xF5	; 245
     3b2:	d2 e2       	ldi	r29, 0x22	; 34
	mem_loc retPtr = 0;

	if (size > MEMORY_SIZE - HEADER_SIZE || ptr < memory || ptr >= memory + MEMORY_SIZE)
     3b4:	6f 3f       	cpi	r22, 0xFF	; 255
     3b6:	2f e0       	ldi	r18, 0x0F	; 15
     3b8:	72 07       	cpc	r23, r18
     3ba:	08 f0       	brcs	.+2      	; 0x3be <internal_realloc+0x32>
     3bc:	4e c1       	rjmp	.+668    	; 0x65a <__FUSE_REGION_LENGTH__+0x25a>
     3be:	8c 17       	cp	r24, r28
     3c0:	9d 07       	cpc	r25, r29
     3c2:	08 f4       	brcc	.+2      	; 0x3c6 <internal_realloc+0x3a>
     3c4:	4d c1       	rjmp	.+666    	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
     3c6:	f2 e3       	ldi	r31, 0x32	; 50
     3c8:	85 3f       	cpi	r24, 0xF5	; 245
     3ca:	9f 07       	cpc	r25, r31
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <internal_realloc+0x44>
     3ce:	4b c1       	rjmp	.+662    	; 0x666 <__FUSE_REGION_LENGTH__+0x266>
     3d0:	6b 01       	movw	r12, r22
     3d2:	3c 01       	movw	r6, r24
		return NULL;

	if (ptr == NULL)
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	21 f4       	brne	.+8      	; 0x3e0 <internal_realloc+0x54>
		return m_malloc(size);
     3d8:	cb 01       	movw	r24, r22
     3da:	0e 94 3a 01 	call	0x274	; 0x274 <internal_malloc>
     3de:	50 c1       	rjmp	.+672    	; 0x680 <__FUSE_REGION_LENGTH__+0x280>

	retPtr = ptr;
	retPtr -= HEADER_SIZE;
     3e0:	8c 01       	movw	r16, r24
     3e2:	02 50       	subi	r16, 0x02	; 2
     3e4:	11 09       	sbc	r17, r1
	memcpy(&blk, retPtr, HEADER_SIZE);
     3e6:	28 01       	movw	r4, r16
     3e8:	f8 01       	movw	r30, r16
     3ea:	e0 80       	ld	r14, Z
     3ec:	f1 80       	ldd	r15, Z+1	; 0x01
	if (verifyIsAllocated && (blk & IN_USE_bm) == 0)
     3ee:	44 23       	and	r20, r20
     3f0:	19 f0       	breq	.+6      	; 0x3f8 <internal_realloc+0x6c>
     3f2:	ff 20       	and	r15, r15
     3f4:	0c f0       	brlt	.+2      	; 0x3f8 <internal_realloc+0x6c>
     3f6:	3a c1       	rjmp	.+628    	; 0x66c <__FUSE_REGION_LENGTH__+0x26c>
		return NULL;

	origBlkSize = blkSize = blk & ~IN_USE_bm;
     3f8:	57 01       	movw	r10, r14
     3fa:	e8 94       	clt
     3fc:	b7 f8       	bld	r11, 7

	// remaining the same size
	if (blkSize == size + HEADER_SIZE)
     3fe:	46 01       	movw	r8, r12
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	8f 0e       	add	r8, r31
     404:	91 1c       	adc	r9, r1
     406:	a8 14       	cp	r10, r8
     408:	b9 04       	cpc	r11, r9
     40a:	09 f4       	brne	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     40c:	32 c1       	rjmp	.+612    	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
		return ptr;

	CRITICAL_SYNC_START();
     40e:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	98 0f       	add	r25, r24
     416:	90 93 f4 22 	sts	0x22F4, r25	; 0x8022f4 <__data_end>
     41a:	81 11       	cpse	r24, r1
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     41e:	8f b7       	in	r24, 0x3f	; 63
     420:	80 93 75 33 	sts	0x3375, r24	; 0x803375 <_sreg>
     424:	f8 94       	cli

	combine_unused_blocks(0);
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 18 01 	call	0x230	; 0x230 <combine_unused_blocks>
	// grab the previous block
	if (retPtr != memory) {
     42e:	25 ef       	ldi	r18, 0xF5	; 245
     430:	42 16       	cp	r4, r18
     432:	22 e2       	ldi	r18, 0x22	; 34
     434:	52 06       	cpc	r5, r18
     436:	89 f4       	brne	.+34     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     438:	e5 ef       	ldi	r30, 0xF5	; 245
     43a:	f2 e2       	ldi	r31, 0x22	; 34
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	17 c0       	rjmp	.+46     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>

	combine_unused_blocks(0);
	// grab the previous block
	if (retPtr != memory) {
		while (nextAddr != retPtr && nextAddr < memory + MEMORY_SIZE) {
			memcpy(&prevBlk, nextAddr, HEADER_SIZE);
     44a:	20 81       	ld	r18, Z
     44c:	31 81       	ldd	r19, Z+1	; 0x01
			prevBlkSize = prevBlk & ~IN_USE_bm;
     44e:	c9 01       	movw	r24, r18
     450:	9f 77       	andi	r25, 0x7F	; 127
			prevAddr = nextAddr;
     452:	bf 01       	movw	r22, r30
			nextAddr += prevBlkSize;
     454:	e8 0f       	add	r30, r24
     456:	f9 1f       	adc	r31, r25
     458:	08 c0       	rjmp	.+16     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     45a:	e5 ef       	ldi	r30, 0xF5	; 245
     45c:	f2 e2       	ldi	r31, 0x22	; 34
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
	CRITICAL_SYNC_START();

	combine_unused_blocks(0);
	// grab the previous block
	if (retPtr != memory) {
		while (nextAddr != retPtr && nextAddr < memory + MEMORY_SIZE) {
     46a:	e0 17       	cp	r30, r16
     46c:	f1 07       	cpc	r31, r17
     46e:	21 f0       	breq	.+8      	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
     470:	42 e3       	ldi	r20, 0x32	; 50
     472:	e5 3f       	cpi	r30, 0xF5	; 245
     474:	f4 07       	cpc	r31, r20
     476:	48 f3       	brcs	.-46     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			nextAddr += prevBlkSize;
		}
	}

	// grab the next block
	if (retPtr + blkSize < memory + MEMORY_SIZE) {
     478:	d8 01       	movw	r26, r16
     47a:	aa 0d       	add	r26, r10
     47c:	bb 1d       	adc	r27, r11
     47e:	42 e3       	ldi	r20, 0x32	; 50
     480:	a5 3f       	cpi	r26, 0xF5	; 245
     482:	b4 07       	cpc	r27, r20
     484:	38 f4       	brcc	.+14     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
		memcpy(&nextBlk, retPtr + blkSize, HEADER_SIZE);
     486:	2d 90       	ld	r2, X+
     488:	3c 90       	ld	r3, X
     48a:	11 97       	sbiw	r26, 0x01	; 1
		nextBlkSize = nextBlk & ~IN_USE_bm;
     48c:	a1 01       	movw	r20, r2
     48e:	5f 77       	andi	r21, 0x7F	; 127
		nextAddr = retPtr + blkSize;
     490:	fd 01       	movw	r30, r26
     492:	04 c0       	rjmp	.+8      	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
	CRITICAL_SYNC_END();
	return ptr;
}

mem_loc* internal_realloc(mem_loc *ptr, uint16_t size, bool verifyIsAllocated) {
	uint16_t blk, nextBlk = 0, prevBlk = 0;
     494:	21 2c       	mov	r2, r1
     496:	31 2c       	mov	r3, r1
	uint16_t blkSize, nextBlkSize = 0, prevBlkSize = 0, origBlkSize;
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
		nextBlkSize = nextBlk & ~IN_USE_bm;
		nextAddr = retPtr + blkSize;
	}

	// shrinking
	if (size < blkSize) {
     49c:	ca 14       	cp	r12, r10
     49e:	db 04       	cpc	r13, r11
     4a0:	a0 f4       	brcc	.+40     	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
		if (blkSize - size < HEADER_SIZE)
     4a2:	75 01       	movw	r14, r10
     4a4:	ec 18       	sub	r14, r12
     4a6:	fd 08       	sbc	r15, r13
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	e8 16       	cp	r14, r24
     4ac:	f1 04       	cpc	r15, r1
     4ae:	08 f4       	brcc	.+2      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4b0:	c4 c0       	rjmp	.+392    	; 0x63a <__FUSE_REGION_LENGTH__+0x23a>
			goto realloc_end;

		space = blkSize - size - HEADER_SIZE;
     4b2:	e2 e0       	ldi	r30, 0x02	; 2
     4b4:	ee 1a       	sub	r14, r30
     4b6:	f1 08       	sbc	r15, r1
		blkSize = size + HEADER_SIZE;
		blk = blkSize | IN_USE_bm;
     4b8:	24 01       	movw	r4, r8
     4ba:	68 94       	set
     4bc:	57 f8       	bld	r5, 7
		if ((nextBlk & IN_USE_bm) == 0)
     4be:	33 20       	and	r3, r3
     4c0:	0c f4       	brge	.+2      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c2:	52 c0       	rjmp	.+164    	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
			space += nextBlkSize;
     4c4:	e4 0e       	add	r14, r20
     4c6:	f5 1e       	adc	r15, r21
     4c8:	4f c0       	rjmp	.+158    	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
		addr = retPtr;
		if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
     4ca:	33 23       	and	r19, r19
     4cc:	3c f0       	brlt	.+14     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     4ce:	61 15       	cp	r22, r1
     4d0:	71 05       	cpc	r23, r1
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
			space += prevBlkSize;
     4d4:	8a 0d       	add	r24, r10
     4d6:	9b 1d       	adc	r25, r11
			addr = prevAddr;
     4d8:	db 01       	movw	r26, r22
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
		addr = retPtr;
     4dc:	d8 01       	movw	r26, r16
	}
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
     4de:	c5 01       	movw	r24, r10
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
		addr = retPtr;
     4e2:	d8 01       	movw	r26, r16
	}
	// growing
	else {
		// if the previous block is unused, shift current block back to it if there's going to be enough room between
		// prev/current/next (if available) to resize the current block
		space = blkSize;
     4e4:	c5 01       	movw	r24, r10
		addr = retPtr;
		if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
			space += prevBlkSize;
			addr = prevAddr;
		}
		if ((nextBlk & IN_USE_bm) == 0 && nextAddr != NULL)
     4e6:	33 20       	and	r3, r3
     4e8:	24 f0       	brlt	.+8      	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
     4ea:	ef 2b       	or	r30, r31
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
			space += nextBlkSize;
     4ee:	84 0f       	add	r24, r20
     4f0:	95 1f       	adc	r25, r21

		if (space >= size && addr + size + HEADER_SIZE <= memory + MEMORY_SIZE) {
     4f2:	8c 15       	cp	r24, r12
     4f4:	9d 05       	cpc	r25, r13
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
     4f8:	5b c0       	rjmp	.+182    	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
     4fa:	ad 01       	movw	r20, r26
     4fc:	4c 0d       	add	r20, r12
     4fe:	5d 1d       	adc	r21, r13
     500:	4e 5f       	subi	r20, 0xFE	; 254
     502:	5f 4f       	sbci	r21, 0xFF	; 255
     504:	45 5f       	subi	r20, 0xF5	; 245
     506:	52 43       	sbci	r21, 0x32	; 50
     508:	11 f0       	breq	.+4      	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
     50a:	08 f0       	brcs	.+2      	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
     50c:	53 c0       	rjmp	.+166    	; 0x5b4 <__FUSE_REGION_LENGTH__+0x1b4>
     50e:	eb 01       	movw	r28, r22
     510:	03 c0       	rjmp	.+6      	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
				CRITICAL_SYNC_END();
				return NULL;
			}

			// found a spot we can use
			prevBlk = blk;
     512:	97 01       	movw	r18, r14
     514:	01 c0       	rjmp	.+2      	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
     516:	97 01       	movw	r18, r14
			space += nextBlkSize;

		if (space >= size && addr + size + HEADER_SIZE <= memory + MEMORY_SIZE) {
			move_block:

			blk = (size | IN_USE_bm) + HEADER_SIZE;
     518:	26 01       	movw	r4, r12
     51a:	68 94       	set
     51c:	57 f8       	bld	r5, 7
     51e:	42 e0       	ldi	r20, 0x02	; 2
     520:	44 0e       	add	r4, r20
     522:	51 1c       	adc	r5, r1
			space = size + HEADER_SIZE > space ? 0 : space - size - HEADER_SIZE;
     524:	88 15       	cp	r24, r8
     526:	99 05       	cpc	r25, r9
     528:	38 f0       	brcs	.+14     	; 0x538 <__FUSE_REGION_LENGTH__+0x138>
     52a:	8c 19       	sub	r24, r12
     52c:	9d 09       	sbc	r25, r13
     52e:	7c 01       	movw	r14, r24
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	ee 1a       	sub	r14, r30
     534:	f1 08       	sbc	r15, r1
     536:	02 c0       	rjmp	.+4      	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
     538:	e1 2c       	mov	r14, r1
     53a:	f1 2c       	mov	r15, r1

			if ((prevBlk & IN_USE_bm) == 0 && prevAddr != NULL) {
     53c:	33 23       	and	r19, r19
     53e:	a4 f0       	brlt	.+40     	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     540:	20 97       	sbiw	r28, 0x00	; 0
     542:	91 f0       	breq	.+36     	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
				memcpy(prevAddr + HEADER_SIZE, retPtr + HEADER_SIZE, blkSize - HEADER_SIZE);
     544:	a5 01       	movw	r20, r10
     546:	42 50       	subi	r20, 0x02	; 2
     548:	51 09       	sbc	r21, r1
     54a:	b3 01       	movw	r22, r6
     54c:	ce 01       	movw	r24, r28
     54e:	02 96       	adiw	r24, 0x02	; 2
     550:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <memcpy>
				memset(retPtr + 1, 0, blkSize - 1);
     554:	a5 01       	movw	r20, r10
     556:	41 50       	subi	r20, 0x01	; 1
     558:	51 09       	sbc	r21, r1
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	c3 01       	movw	r24, r6
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <memset>
				retPtr = prevAddr;
     566:	8e 01       	movw	r16, r28
			}
		
			link_block:
			// if there's not enough room for a header after we expand this block, simply claim the extra space
			if (space < HEADER_SIZE)
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	ef 16       	cp	r14, r31
     56c:	f1 04       	cpc	r15, r1
     56e:	18 f4       	brcc	.+6      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
				blk += space;
     570:	4e 0c       	add	r4, r14
     572:	5f 1c       	adc	r5, r15
     574:	08 c0       	rjmp	.+16     	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
			// otherwise create a free'd header for the next block
			else {
				blkSize = blk & ~IN_USE_bm;
     576:	f2 01       	movw	r30, r4
     578:	ff 77       	andi	r31, 0x7F	; 127
				nextAddr = retPtr + blkSize;
     57a:	e0 0f       	add	r30, r16
     57c:	f1 1f       	adc	r31, r17
				nextBlkSize = space;
				nextBlk = nextBlkSize;
				memcpy(nextAddr, &nextBlk, HEADER_SIZE);
     57e:	e0 82       	st	Z, r14
     580:	f1 82       	std	Z+1, r15	; 0x01
				space = 0;
     582:	e1 2c       	mov	r14, r1
     584:	f1 2c       	mov	r15, r1
			}

			memcpy(retPtr, &blk, HEADER_SIZE);
     586:	f8 01       	movw	r30, r16
     588:	40 82       	st	Z, r4
     58a:	51 82       	std	Z+1, r5	; 0x01

			goto move_block;
		}
	}

	if (size + HEADER_SIZE > origBlkSize)
     58c:	a8 14       	cp	r10, r8
     58e:	b9 04       	cpc	r11, r9
     590:	98 f1       	brcs	.+102    	; 0x5f8 <__FUSE_REGION_LENGTH__+0x1f8>
     592:	44 c0       	rjmp	.+136    	; 0x61c <__FUSE_REGION_LENGTH__+0x21c>
		// the only possible option at this point is to find a free block with equal
		// or lesser size than the desired size since we already combined unused blocks
		else {
			addr = memory;
			while (addr < memory + MEMORY_SIZE) {
				memcpy(&blk, addr, HEADER_SIZE);
     594:	e8 80       	ld	r14, Y
     596:	f9 80       	ldd	r15, Y+1	; 0x01
				blkSize = blk & ~IN_USE_bm;
     598:	c7 01       	movw	r24, r14
     59a:	9f 77       	andi	r25, 0x7F	; 127

				if ((blk & IN_USE_bm) == 0 && (blkSize == 0 || blkSize >= size + HEADER_SIZE))
     59c:	ff 20       	and	r15, r15
     59e:	2c f0       	brlt	.+10     	; 0x5aa <__FUSE_REGION_LENGTH__+0x1aa>
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	71 f0       	breq	.+28     	; 0x5c0 <__FUSE_REGION_LENGTH__+0x1c0>
     5a4:	88 15       	cp	r24, r8
     5a6:	99 05       	cpc	r25, r9
     5a8:	58 f4       	brcc	.+22     	; 0x5c0 <__FUSE_REGION_LENGTH__+0x1c0>
					break;
				addr += blkSize;
     5aa:	c8 0f       	add	r28, r24
     5ac:	d9 1f       	adc	r29, r25
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <__FUSE_REGION_LENGTH__+0x1b6>
     5b0:	c5 01       	movw	r24, r10
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <__FUSE_REGION_LENGTH__+0x1b6>
     5b4:	c5 01       	movw	r24, r10
		// no room to expand in-place, try looking elsewhere for an available block
		// the only possible option at this point is to find a free block with equal
		// or lesser size than the desired size since we already combined unused blocks
		else {
			addr = memory;
			while (addr < memory + MEMORY_SIZE) {
     5b6:	9e 01       	movw	r18, r28
     5b8:	f2 e3       	ldi	r31, 0x32	; 50
     5ba:	c5 3f       	cpi	r28, 0xF5	; 245
     5bc:	df 07       	cpc	r29, r31
     5be:	50 f3       	brcs	.-44     	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
				if ((blk & IN_USE_bm) == 0 && (blkSize == 0 || blkSize >= size + HEADER_SIZE))
					break;
				addr += blkSize;
			}
			// if no space left
			if (addr >= memory + MEMORY_SIZE || (blkSize == 0 && addr + size + HEADER_SIZE >= memory + MEMORY_SIZE)) {
     5c0:	25 5f       	subi	r18, 0xF5	; 245
     5c2:	32 43       	sbci	r19, 0x32	; 50
     5c4:	60 f4       	brcc	.+24     	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__FUSE_REGION_LENGTH__+0x1cc>
     5ca:	a3 cf       	rjmp	.-186    	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
     5cc:	9e 01       	movw	r18, r28
     5ce:	2c 0d       	add	r18, r12
     5d0:	3d 1d       	adc	r19, r13
     5d2:	2e 5f       	subi	r18, 0xFE	; 254
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	25 5f       	subi	r18, 0xF5	; 245
     5d8:	32 43       	sbci	r19, 0x32	; 50
     5da:	08 f4       	brcc	.+2      	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
     5dc:	9c cf       	rjmp	.-200    	; 0x516 <__FUSE_REGION_LENGTH__+0x116>
				CRITICAL_SYNC_END();
     5de:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     5e2:	81 50       	subi	r24, 0x01	; 1
     5e4:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     5e8:	81 11       	cpse	r24, r1
     5ea:	45 c0       	rjmp	.+138    	; 0x676 <__FUSE_REGION_LENGTH__+0x276>
     5ec:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     5f0:	8f bf       	out	0x3f, r24	; 63
				return NULL;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	44 c0       	rjmp	.+136    	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
			goto move_block;
		}
	}

	if (size + HEADER_SIZE > origBlkSize)
		totalAllocatedMemory += (size + HEADER_SIZE) - origBlkSize + space;
     5f8:	ca 18       	sub	r12, r10
     5fa:	db 08       	sbc	r13, r11
     5fc:	ec 0c       	add	r14, r12
     5fe:	fd 1c       	adc	r15, r13
     600:	20 91 76 33 	lds	r18, 0x3376	; 0x803376 <totalAllocatedMemory>
     604:	30 91 77 33 	lds	r19, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     608:	e2 0e       	add	r14, r18
     60a:	f3 1e       	adc	r15, r19
     60c:	f2 e0       	ldi	r31, 0x02	; 2
     60e:	ef 0e       	add	r14, r31
     610:	f1 1c       	adc	r15, r1
     612:	e0 92 76 33 	sts	0x3376, r14	; 0x803376 <totalAllocatedMemory>
     616:	f0 92 77 33 	sts	0x3377, r15	; 0x803377 <totalAllocatedMemory+0x1>
     61a:	0f c0       	rjmp	.+30     	; 0x63a <__FUSE_REGION_LENGTH__+0x23a>
	else
		totalAllocatedMemory -= origBlkSize - size - HEADER_SIZE;
     61c:	ca 18       	sub	r12, r10
     61e:	db 08       	sbc	r13, r11
     620:	60 91 76 33 	lds	r22, 0x3376	; 0x803376 <totalAllocatedMemory>
     624:	70 91 77 33 	lds	r23, 0x3377	; 0x803377 <totalAllocatedMemory+0x1>
     628:	c6 0e       	add	r12, r22
     62a:	d7 1e       	adc	r13, r23
     62c:	22 e0       	ldi	r18, 0x02	; 2
     62e:	c2 0e       	add	r12, r18
     630:	d1 1c       	adc	r13, r1
     632:	c0 92 76 33 	sts	0x3376, r12	; 0x803376 <totalAllocatedMemory>
     636:	d0 92 77 33 	sts	0x3377, r13	; 0x803377 <totalAllocatedMemory+0x1>

	realloc_end:
	CRITICAL_SYNC_END();
     63a:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <__data_end>
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <__data_end>
     644:	81 11       	cpse	r24, r1
     646:	03 c0       	rjmp	.+6      	; 0x64e <__FUSE_REGION_LENGTH__+0x24e>
     648:	80 91 75 33 	lds	r24, 0x3375	; 0x803375 <_sreg>
     64c:	8f bf       	out	0x3f, r24	; 63
	return retPtr == 0 ? 0 : retPtr + HEADER_SIZE;
     64e:	01 15       	cp	r16, r1
     650:	11 05       	cpc	r17, r1
     652:	a1 f0       	breq	.+40     	; 0x67c <__FUSE_REGION_LENGTH__+0x27c>
     654:	c8 01       	movw	r24, r16
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	13 c0       	rjmp	.+38     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
	uint16_t space = 0;
	mem_loc nextAddr = memory, prevAddr = 0, addr;
	mem_loc retPtr = 0;

	if (size > MEMORY_SIZE - HEADER_SIZE || ptr < memory || ptr >= memory + MEMORY_SIZE)
		return NULL;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	10 c0       	rjmp	.+32     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0d c0       	rjmp	.+26     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0a c0       	rjmp	.+20     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>

	retPtr = ptr;
	retPtr -= HEADER_SIZE;
	memcpy(&blk, retPtr, HEADER_SIZE);
	if (verifyIsAllocated && (blk & IN_USE_bm) == 0)
		return NULL;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	07 c0       	rjmp	.+14     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>

	origBlkSize = blkSize = blk & ~IN_USE_bm;

	// remaining the same size
	if (blkSize == size + HEADER_SIZE)
		return ptr;
     672:	c3 01       	movw	r24, r6
     674:	05 c0       	rjmp	.+10     	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
				addr += blkSize;
			}
			// if no space left
			if (addr >= memory + MEMORY_SIZE || (blkSize == 0 && addr + size + HEADER_SIZE >= memory + MEMORY_SIZE)) {
				CRITICAL_SYNC_END();
				return NULL;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 c0       	rjmp	.+4      	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
	else
		totalAllocatedMemory -= origBlkSize - size - HEADER_SIZE;

	realloc_end:
	CRITICAL_SYNC_END();
	return retPtr == 0 ? 0 : retPtr + HEADER_SIZE;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	6f 90       	pop	r6
     69c:	5f 90       	pop	r5
     69e:	4f 90       	pop	r4
     6a0:	3f 90       	pop	r3
     6a2:	2f 90       	pop	r2
     6a4:	08 95       	ret

000006a6 <tick_init>:
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

void tick_trigger_interrupt(void) {
	TCC0_OVF_vect ();
     6a6:	e0 e0       	ldi	r30, 0x00	; 0
     6a8:	f8 e0       	ldi	r31, 0x08	; 8
     6aa:	8f e8       	ldi	r24, 0x8F	; 143
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	86 a3       	std	Z+38, r24	; 0x26
     6b0:	97 a3       	std	Z+39, r25	; 0x27
     6b2:	97 e0       	ldi	r25, 0x07	; 7
     6b4:	90 83       	st	Z, r25
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	86 83       	std	Z+6, r24	; 0x06
     6ba:	e0 e4       	ldi	r30, 0x40	; 64
     6bc:	f8 e0       	ldi	r31, 0x08	; 8
     6be:	26 e6       	ldi	r18, 0x66	; 102
     6c0:	36 e0       	ldi	r19, 0x06	; 6
     6c2:	26 a3       	std	Z+38, r18	; 0x26
     6c4:	37 a3       	std	Z+39, r19	; 0x27
     6c6:	90 83       	st	Z, r25
     6c8:	86 83       	std	Z+6, r24	; 0x06
     6ca:	08 95       	ret

000006cc <__vector_14>:
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	0f 92       	push	r0
     6d4:	08 b6       	in	r0, 0x38	; 56
     6d6:	0f 92       	push	r0
     6d8:	09 b6       	in	r0, 0x39	; 57
     6da:	0f 92       	push	r0
     6dc:	0a b6       	in	r0, 0x3a	; 58
     6de:	0f 92       	push	r0
     6e0:	0b b6       	in	r0, 0x3b	; 59
     6e2:	0f 92       	push	r0
     6e4:	1f 92       	push	r1
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 92       	push	r2
     6ea:	3f 92       	push	r3
     6ec:	4f 92       	push	r4
     6ee:	5f 92       	push	r5
     6f0:	6f 92       	push	r6
     6f2:	7f 92       	push	r7
     6f4:	8f 92       	push	r8
     6f6:	9f 92       	push	r9
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	2f 93       	push	r18
     70a:	3f 93       	push	r19
     70c:	4f 93       	push	r20
     70e:	5f 93       	push	r21
     710:	6f 93       	push	r22
     712:	7f 93       	push	r23
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
     724:	a0 91 7a 33 	lds	r26, 0x337A	; 0x80337a <ptrStackP>
     728:	b0 91 7b 33 	lds	r27, 0x337B	; 0x80337b <ptrStackP+0x1>
     72c:	0d b6       	in	r0, 0x3d	; 61
     72e:	0d 92       	st	X+, r0
     730:	0e b6       	in	r0, 0x3e	; 62
     732:	0d 92       	st	X+, r0
     734:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     738:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     73c:	0e 94 a9 06 	call	0xd52	; 0xd52 <kernel_process_all_tasks>
     740:	a0 91 7a 33 	lds	r26, 0x337A	; 0x80337a <ptrStackP>
     744:	b0 91 7b 33 	lds	r27, 0x337B	; 0x80337b <ptrStackP+0x1>
     748:	0d 90       	ld	r0, X+
     74a:	1c 90       	ld	r1, X
     74c:	0d be       	out	0x3d, r0	; 61
     74e:	1e be       	out	0x3e, r1	; 62
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	bf 91       	pop	r27
     75a:	af 91       	pop	r26
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	7f 91       	pop	r23
     762:	6f 91       	pop	r22
     764:	5f 91       	pop	r21
     766:	4f 91       	pop	r20
     768:	3f 91       	pop	r19
     76a:	2f 91       	pop	r18
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	bf 90       	pop	r11
     77a:	af 90       	pop	r10
     77c:	9f 90       	pop	r9
     77e:	8f 90       	pop	r8
     780:	7f 90       	pop	r7
     782:	6f 90       	pop	r6
     784:	5f 90       	pop	r5
     786:	4f 90       	pop	r4
     788:	3f 90       	pop	r3
     78a:	2f 90       	pop	r2
     78c:	1f 90       	pop	r1
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	0a be       	out	0x3a, r0	; 58
     796:	0f 90       	pop	r0
     798:	09 be       	out	0x39, r0	; 57
     79a:	0f 90       	pop	r0
     79c:	08 be       	out	0x38, r0	; 56
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	18 95       	reti

000007a6 <__vector_20>:
	portRESTORE_CONTEXT();
	reti();
}

void TCC1_OVF_vect (void) __attribute__ ((signal, __INTR_ATTRS));
void TCC1_OVF_vect (void) {
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	0b b6       	in	r0, 0x3b	; 59
     7b2:	0f 92       	push	r0
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
	onTimerTick();
     7cc:	0e 94 00 0b 	call	0x1600	; 0x1600 <onTimerTick>
#if TEST_MODULES
	test_tick_callback();
     7d0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <test_tick_callback>
#endif
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	bf 91       	pop	r27
     7da:	af 91       	pop	r26
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	7f 91       	pop	r23
     7e2:	6f 91       	pop	r22
     7e4:	5f 91       	pop	r21
     7e6:	4f 91       	pop	r20
     7e8:	3f 91       	pop	r19
     7ea:	2f 91       	pop	r18
     7ec:	0f 90       	pop	r0
     7ee:	0b be       	out	0x3b, r0	; 59
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <__m_assert>:
 #include <stdio.h>
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
     7fa:	e0 e0       	ldi	r30, 0x00	; 0
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <__m_assert+0x8>
		prefix++;
     800:	31 96       	adiw	r30, 0x01	; 1
 #endif

 bool __m_assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {
 #if DEBUG_TRACE
	 int prefix = 0;
	 while (*(__file + prefix) == '.' || *(__file + prefix) == '/')
     802:	db 01       	movw	r26, r22
     804:	ae 0f       	add	r26, r30
     806:	bf 1f       	adc	r27, r31
     808:	8c 91       	ld	r24, X
     80a:	8e 52       	subi	r24, 0x2E	; 46
     80c:	82 30       	cpi	r24, 0x02	; 2
     80e:	c0 f3       	brcs	.-16     	; 0x800 <__m_assert+0x6>
		prefix++;
	 sprintf(gStrBuf, "Assert failure!\n\rFile: %s\n\rLine: %d\n\rExp: %s\n\r", __file + prefix, __lineno, __sexp);
     810:	3f 93       	push	r19
     812:	2f 93       	push	r18
     814:	5f 93       	push	r21
     816:	4f 93       	push	r20
     818:	bf 93       	push	r27
     81a:	af 93       	push	r26
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	90 e2       	ldi	r25, 0x20	; 32
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	85 ef       	ldi	r24, 0xF5	; 245
     826:	92 e3       	ldi	r25, 0x32	; 50
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <sprintf>
	 serial_send_string(gStrBuf);
     830:	85 ef       	ldi	r24, 0xF5	; 245
     832:	92 e3       	ldi	r25, 0x32	; 50
     834:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
#endif
	kernel_disable_scheduler();
     838:	0e 94 7b 07 	call	0xef6	; 0xef6 <kernel_disable_scheduler>
	 return false;
     83c:	8d b7       	in	r24, 0x3d	; 61
     83e:	9e b7       	in	r25, 0x3e	; 62
     840:	0a 96       	adiw	r24, 0x0a	; 10
     842:	8d bf       	out	0x3d, r24	; 61
     844:	9e bf       	out	0x3e, r25	; 62
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret

0000084a <kernel_init>:
 void kernel_catch_task_return(void);
 Context* kernel_find_highest_priority_ready_task(void);
 void kernel_swap_task(void);

 void kernel_init(void) {
	ptrStackP = &defaultStackP;
     84a:	88 e7       	ldi	r24, 0x78	; 120
     84c:	93 e3       	ldi	r25, 0x33	; 51
     84e:	80 93 7a 33 	sts	0x337A, r24	; 0x80337a <ptrStackP>
     852:	90 93 7b 33 	sts	0x337B, r25	; 0x80337b <ptrStackP+0x1>
	mem_man_init();
     856:	0e 94 17 01 	call	0x22e	; 0x22e <mem_man_init>
     85a:	08 95       	ret

0000085c <kernel_init_stack>:
	queue_add_with_priority(&contextList[priority], c, 0);

	return c;
 }

 void kernel_init_stack(Context *c) {
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <kernel_init_stack+0xa>
     866:	1f 92       	push	r1
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	dc 01       	movw	r26, r24
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
     86e:	41 e1       	ldi	r20, 0x11	; 17
     870:	57 e0       	ldi	r21, 0x07	; 7
     872:	05 2e       	mov	r0, r21
     874:	00 0c       	add	r0, r0
     876:	66 0b       	sbc	r22, r22
     878:	77 0b       	sbc	r23, r23
     87a:	49 83       	std	Y+1, r20	; 0x01
     87c:	5a 83       	std	Y+2, r21	; 0x02
     87e:	6b 83       	std	Y+3, r22	; 0x03
     880:	7c 83       	std	Y+4, r23	; 0x04
	for (i = j = 0; i < 4; i++)
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	22 c0       	rjmp	.+68     	; 0x8d0 <kernel_init_stack+0x74>
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
     88c:	4d 91       	ld	r20, X+
     88e:	5c 91       	ld	r21, X
     890:	11 97       	sbiw	r26, 0x01	; 1
     892:	17 96       	adiw	r26, 0x07	; 7
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	18 97       	sbiw	r26, 0x08	; 8
     89a:	e2 1b       	sub	r30, r18
     89c:	f3 0b       	sbc	r31, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	e4 0f       	add	r30, r20
     8a2:	f5 1f       	adc	r31, r21
     8a4:	49 81       	ldd	r20, Y+1	; 0x01
     8a6:	5a 81       	ldd	r21, Y+2	; 0x02
     8a8:	6b 81       	ldd	r22, Y+3	; 0x03
     8aa:	7c 81       	ldd	r23, Y+4	; 0x04
     8ac:	8c 01       	movw	r16, r24
     8ae:	00 0f       	add	r16, r16
     8b0:	11 1f       	adc	r17, r17
     8b2:	00 0f       	add	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	00 0f       	add	r16, r16
     8b8:	11 1f       	adc	r17, r17
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <kernel_init_stack+0x68>
     8bc:	76 95       	lsr	r23
     8be:	67 95       	ror	r22
     8c0:	57 95       	ror	r21
     8c2:	47 95       	ror	r20
     8c4:	0a 95       	dec	r16
     8c6:	d2 f7       	brpl	.-12     	; 0x8bc <kernel_init_stack+0x60>
     8c8:	40 83       	st	Z, r20
 }

 void kernel_init_stack(Context *c) {
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
     8ca:	01 96       	adiw	r24, 0x01	; 1
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 }

 void kernel_init_stack(Context *c) {
	uint16_t i, j;
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	91 05       	cpc	r25, r1
     8d4:	d8 f2       	brcs	.-74     	; 0x88c <kernel_init_stack+0x30>
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
     8d6:	1a 96       	adiw	r26, 0x0a	; 10
     8d8:	4d 91       	ld	r20, X+
     8da:	5c 91       	ld	r21, X
     8dc:	1b 97       	sbiw	r26, 0x0b	; 11
     8de:	05 2e       	mov	r0, r21
     8e0:	00 0c       	add	r0, r0
     8e2:	66 0b       	sbc	r22, r22
     8e4:	77 0b       	sbc	r23, r23
     8e6:	49 83       	std	Y+1, r20	; 0x01
     8e8:	5a 83       	std	Y+2, r21	; 0x02
     8ea:	6b 83       	std	Y+3, r22	; 0x03
     8ec:	7c 83       	std	Y+4, r23	; 0x04
	for (i = 0; i < 4; i++)
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	21 c0       	rjmp	.+66     	; 0x936 <kernel_init_stack+0xda>
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;
     8f4:	4d 91       	ld	r20, X+
     8f6:	5c 91       	ld	r21, X
     8f8:	11 97       	sbiw	r26, 0x01	; 1
     8fa:	17 96       	adiw	r26, 0x07	; 7
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	18 97       	sbiw	r26, 0x08	; 8
     902:	e2 1b       	sub	r30, r18
     904:	f3 0b       	sbc	r31, r19
     906:	e4 0f       	add	r30, r20
     908:	f5 1f       	adc	r31, r21
     90a:	49 81       	ldd	r20, Y+1	; 0x01
     90c:	5a 81       	ldd	r21, Y+2	; 0x02
     90e:	6b 81       	ldd	r22, Y+3	; 0x03
     910:	7c 81       	ldd	r23, Y+4	; 0x04
     912:	8c 01       	movw	r16, r24
     914:	00 0f       	add	r16, r16
     916:	11 1f       	adc	r17, r17
     918:	00 0f       	add	r16, r16
     91a:	11 1f       	adc	r17, r17
     91c:	00 0f       	add	r16, r16
     91e:	11 1f       	adc	r17, r17
     920:	04 c0       	rjmp	.+8      	; 0x92a <kernel_init_stack+0xce>
     922:	76 95       	lsr	r23
     924:	67 95       	ror	r22
     926:	57 95       	ror	r21
     928:	47 95       	ror	r20
     92a:	0a 95       	dec	r16
     92c:	d2 f7       	brpl	.-12     	; 0x922 <kernel_init_stack+0xc6>
     92e:	40 83       	st	Z, r20
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
	for (i = 0; i < 4; i++)
     930:	01 96       	adiw	r24, 0x01	; 1
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
	volatile uint32_t addr = kernel_catch_task_return;
	for (i = j = 0; i < 4; i++)
		c->stack[c->stackSize - j++ - 1] = (addr >> (i * 8)) & 0xff;
	
	addr = c->entryPoint;
	for (i = 0; i < 4; i++)
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	91 05       	cpc	r25, r1
     93a:	e0 f2       	brcs	.-72     	; 0x8f4 <kernel_init_stack+0x98>
		c->stack[c->stackSize - j++] = (addr >> (i * 8)) & 0xff;

	c->stack[c->stackSize - j] = 0x80; // global interrupt enable
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	11 97       	sbiw	r26, 0x01	; 1
     942:	17 96       	adiw	r26, 0x07	; 7
     944:	ed 91       	ld	r30, X+
     946:	fc 91       	ld	r31, X
     948:	18 97       	sbiw	r26, 0x08	; 8
     94a:	e2 1b       	sub	r30, r18
     94c:	f3 0b       	sbc	r31, r19
     94e:	e8 0f       	add	r30, r24
     950:	f9 1f       	adc	r31, r25
     952:	80 e8       	ldi	r24, 0x80	; 128
     954:	80 83       	st	Z, r24
	c->stackPointer = &c->stack[c->stackSize - j - 36]; // 37 pops in RESTORE_CONTEXT
     956:	4d 91       	ld	r20, X+
     958:	5c 91       	ld	r21, X
     95a:	11 97       	sbiw	r26, 0x01	; 1
     95c:	17 96       	adiw	r26, 0x07	; 7
     95e:	8d 91       	ld	r24, X+
     960:	9c 91       	ld	r25, X
     962:	18 97       	sbiw	r26, 0x08	; 8
     964:	82 1b       	sub	r24, r18
     966:	93 0b       	sbc	r25, r19
     968:	84 97       	sbiw	r24, 0x24	; 36
     96a:	84 0f       	add	r24, r20
     96c:	95 1f       	adc	r25, r21
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	8d 93       	st	X+, r24
     972:	9c 93       	st	X, r25
     974:	13 97       	sbiw	r26, 0x03	; 3
 }
     976:	24 96       	adiw	r28, 0x04	; 4
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <kernel_create_task>:
 void kernel_init(void) {
	ptrStackP = &defaultStackP;
	mem_man_init();
 }

 Context* kernel_create_task(void (*task)(void), uint8_t priority, const char *taskName, uint16_t stackSize) {
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	d6 2e       	mov	r13, r22
     99c:	7a 01       	movw	r14, r20
     99e:	89 01       	movw	r16, r18
	Context *c;
	QueueNode *n;
	uint8_t i;

	m_assert(priority < MAX_PRIORITY);
     9a0:	87 e0       	ldi	r24, 0x07	; 7
     9a2:	86 17       	cp	r24, r22
     9a4:	58 f4       	brcc	.+22     	; 0x9bc <kernel_create_task+0x36>
     9a6:	2b e3       	ldi	r18, 0x3B	; 59
     9a8:	30 e2       	ldi	r19, 0x20	; 32
     9aa:	4e e2       	ldi	r20, 0x2E	; 46
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	63 e5       	ldi	r22, 0x53	; 83
     9b0:	70 e2       	ldi	r23, 0x20	; 32
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	91 e2       	ldi	r25, 0x21	; 33
     9b6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     9ba:	ff cf       	rjmp	.-2      	; 0x9ba <kernel_create_task+0x34>
	m_assert(taskName != NULL);
     9bc:	e1 14       	cp	r14, r1
     9be:	f1 04       	cpc	r15, r1
     9c0:	59 f4       	brne	.+22     	; 0x9d8 <kernel_create_task+0x52>
     9c2:	2e e8       	ldi	r18, 0x8E	; 142
     9c4:	30 e2       	ldi	r19, 0x20	; 32
     9c6:	4f e2       	ldi	r20, 0x2F	; 47
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	63 e5       	ldi	r22, 0x53	; 83
     9cc:	70 e2       	ldi	r23, 0x20	; 32
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	91 e2       	ldi	r25, 0x21	; 33
     9d2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <kernel_create_task+0x50>
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips
     9d8:	0e 32       	cpi	r16, 0x2E	; 46
     9da:	11 05       	cpc	r17, r1
     9dc:	58 f4       	brcc	.+22     	; 0x9f4 <kernel_create_task+0x6e>
     9de:	21 e6       	ldi	r18, 0x61	; 97
     9e0:	30 e2       	ldi	r19, 0x20	; 32
     9e2:	40 e3       	ldi	r20, 0x30	; 48
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	63 e5       	ldi	r22, 0x53	; 83
     9e8:	70 e2       	ldi	r23, 0x20	; 32
     9ea:	85 e0       	ldi	r24, 0x05	; 5
     9ec:	91 e2       	ldi	r25, 0x21	; 33
     9ee:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <kernel_create_task+0x6c>

	for (i = 0; i < MAX_PRIORITY; i++) {
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	1c c0       	rjmp	.+56     	; 0xa30 <kernel_create_task+0xaa>
		n = contextList[i].head;
     9f8:	e2 2f       	mov	r30, r18
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	e4 58       	subi	r30, 0x84	; 132
     a06:	fc 4c       	sbci	r31, 0xCC	; 204
     a08:	01 90       	ld	r0, Z+
     a0a:	f0 81       	ld	r31, Z
     a0c:	e0 2d       	mov	r30, r0
		while (n != NULL) {
     a0e:	0d c0       	rjmp	.+26     	; 0xa2a <kernel_create_task+0xa4>
			c = (Context*) n->data;
     a10:	a0 81       	ld	r26, Z
     a12:	b1 81       	ldd	r27, Z+1	; 0x01
			if (c->entryPoint == task)
     a14:	1a 96       	adiw	r26, 0x0a	; 10
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	1b 97       	sbiw	r26, 0x0b	; 11
     a1c:	8c 17       	cp	r24, r28
     a1e:	9d 07       	cpc	r25, r29
     a20:	09 f4       	brne	.+2      	; 0xa24 <kernel_create_task+0x9e>
     a22:	6e c0       	rjmp	.+220    	; 0xb00 <kernel_create_task+0x17a>
				return NULL;
			n = n->next;
     a24:	02 80       	ldd	r0, Z+2	; 0x02
     a26:	f3 81       	ldd	r31, Z+3	; 0x03
     a28:	e0 2d       	mov	r30, r0
	m_assert(taskName != NULL);
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips

	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		while (n != NULL) {
     a2a:	30 97       	sbiw	r30, 0x00	; 0
     a2c:	89 f7       	brne	.-30     	; 0xa10 <kernel_create_task+0x8a>

	m_assert(priority < MAX_PRIORITY);
	m_assert(taskName != NULL);
	m_assert(stackSize > 45); // each task requires 45 bytes of overhead on Atmel xmega chips

	for (i = 0; i < MAX_PRIORITY; i++) {
     a2e:	2f 5f       	subi	r18, 0xFF	; 255
     a30:	28 30       	cpi	r18, 0x08	; 8
     a32:	10 f3       	brcs	.-60     	; 0x9f8 <kernel_create_task+0x72>
				return NULL;
			n = n->next;
		}
	}

	c = m_malloc(sizeof(Context));
     a34:	82 e1       	ldi	r24, 0x12	; 18
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 3a 01 	call	0x274	; 0x274 <internal_malloc>
     a3c:	5c 01       	movw	r10, r24
	m_assert(c != NULL);
     a3e:	89 2b       	or	r24, r25
     a40:	59 f4       	brne	.+22     	; 0xa58 <kernel_create_task+0xd2>
     a42:	20 e7       	ldi	r18, 0x70	; 112
     a44:	30 e2       	ldi	r19, 0x20	; 32
     a46:	4d e3       	ldi	r20, 0x3D	; 61
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	63 e5       	ldi	r22, 0x53	; 83
     a4c:	70 e2       	ldi	r23, 0x20	; 32
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	91 e2       	ldi	r25, 0x21	; 33
     a52:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     a56:	ff cf       	rjmp	.-2      	; 0xa56 <kernel_create_task+0xd0>
	c->stack = (uint8_t*) m_malloc(stackSize);
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 3a 01 	call	0x274	; 0x274 <internal_malloc>
     a5e:	f5 01       	movw	r30, r10
     a60:	80 83       	st	Z, r24
     a62:	91 83       	std	Z+1, r25	; 0x01
	m_assert(c->stack != NULL);
     a64:	89 2b       	or	r24, r25
     a66:	59 f4       	brne	.+22     	; 0xa7e <kernel_create_task+0xf8>
     a68:	2a e7       	ldi	r18, 0x7A	; 122
     a6a:	30 e2       	ldi	r19, 0x20	; 32
     a6c:	4f e3       	ldi	r20, 0x3F	; 63
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	63 e5       	ldi	r22, 0x53	; 83
     a72:	70 e2       	ldi	r23, 0x20	; 32
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	91 e2       	ldi	r25, 0x21	; 33
     a78:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     a7c:	ff cf       	rjmp	.-2      	; 0xa7c <kernel_create_task+0xf6>

	c->taskName = (char*) m_malloc(strlen(taskName) + 1);
     a7e:	f7 01       	movw	r30, r14
     a80:	01 90       	ld	r0, Z+
     a82:	00 20       	and	r0, r0
     a84:	e9 f7       	brne	.-6      	; 0xa80 <kernel_create_task+0xfa>
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	cf 01       	movw	r24, r30
     a8a:	8e 19       	sub	r24, r14
     a8c:	9f 09       	sbc	r25, r15
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 3a 01 	call	0x274	; 0x274 <internal_malloc>
     a94:	f5 01       	movw	r30, r10
     a96:	84 83       	std	Z+4, r24	; 0x04
     a98:	95 83       	std	Z+5, r25	; 0x05
	m_assert(c->taskName != NULL);
     a9a:	89 2b       	or	r24, r25
     a9c:	59 f4       	brne	.+22     	; 0xab4 <kernel_create_task+0x12e>
     a9e:	2b e8       	ldi	r18, 0x8B	; 139
     aa0:	30 e2       	ldi	r19, 0x20	; 32
     aa2:	42 e4       	ldi	r20, 0x42	; 66
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	63 e5       	ldi	r22, 0x53	; 83
     aa8:	70 e2       	ldi	r23, 0x20	; 32
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	91 e2       	ldi	r25, 0x21	; 33
     aae:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     ab2:	ff cf       	rjmp	.-2      	; 0xab2 <kernel_create_task+0x12c>

	c->stackSize = stackSize;
     ab4:	f5 01       	movw	r30, r10
     ab6:	07 83       	std	Z+7, r16	; 0x07
     ab8:	10 87       	std	Z+8, r17	; 0x08
#if DEBUG_TRACE
	c->stackTop = c->stack + stackSize;
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	08 0f       	add	r16, r24
     ac0:	19 1f       	adc	r17, r25
     ac2:	00 8b       	std	Z+16, r16	; 0x10
     ac4:	11 8b       	std	Z+17, r17	; 0x11
#endif
	c->priority = priority;
     ac6:	d6 82       	std	Z+6, r13	; 0x06
	c->entryPoint = task;
     ac8:	c2 87       	std	Z+10, r28	; 0x0a
     aca:	d3 87       	std	Z+11, r29	; 0x0b
	c->status = READY;
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	81 87       	std	Z+9, r24	; 0x09
	strcpy(c->taskName, taskName);
     ad0:	b7 01       	movw	r22, r14
     ad2:	84 81       	ldd	r24, Z+4	; 0x04
     ad4:	95 81       	ldd	r25, Z+5	; 0x05
     ad6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <strcpy>
	kernel_init_stack(c);
     ada:	c5 01       	movw	r24, r10
     adc:	0e 94 2e 04 	call	0x85c	; 0x85c <kernel_init_stack>

	queue_add_with_priority(&contextList[priority], c, 0);
     ae0:	8d 2d       	mov	r24, r13
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	b5 01       	movw	r22, r10
     af2:	84 58       	subi	r24, 0x84	; 132
     af4:	9c 4c       	sbci	r25, 0xCC	; 204
     af6:	0e 94 80 07 	call	0xf00	; 0xf00 <queue_add_with_priority>

	return c;
     afa:	8a 2d       	mov	r24, r10
     afc:	9b 2d       	mov	r25, r11
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <kernel_create_task+0x17e>
	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		while (n != NULL) {
			c = (Context*) n->data;
			if (c->entryPoint == task)
				return NULL;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
	kernel_init_stack(c);

	queue_add_with_priority(&contextList[priority], c, 0);

	return c;
 }
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	08 95       	ret

00000b18 <kernel_remove_task>:
			}
		}
	}
 }

 void kernel_remove_task(Context *c) {
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
	Queue *q = &contextList[c->priority];
     b1e:	8e 81       	ldd	r24, Y+6	; 0x06
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
	queue_remove(q, (void*)c);
     b2a:	be 01       	movw	r22, r28
     b2c:	84 58       	subi	r24, 0x84	; 132
     b2e:	9c 4c       	sbci	r25, 0xCC	; 204
     b30:	0e 94 fa 07 	call	0xff4	; 0xff4 <queue_remove>
	free(c->stack);
     b34:	88 81       	ld	r24, Y
     b36:	99 81       	ldd	r25, Y+1	; 0x01
     b38:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <free>
	free(c->taskName);
     b3c:	8c 81       	ldd	r24, Y+4	; 0x04
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
     b40:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <free>
	free(c);
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <free>
 }
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <kernel_swap_to_task>:

 void kernel_swap_to_task(Context *c) {
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
	sprintf(gStrBuf, "Switching to task %s\n\r", c->taskName);
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	8f 93       	push	r24
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	8f 93       	push	r24
     b5e:	8f e9       	ldi	r24, 0x9F	; 159
     b60:	90 e2       	ldi	r25, 0x20	; 32
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	85 ef       	ldi	r24, 0xF5	; 245
     b68:	92 e3       	ldi	r25, 0x32	; 50
     b6a:	9f 93       	push	r25
     b6c:	8f 93       	push	r24
     b6e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <sprintf>
	serial_send_string(gStrBuf);
     b72:	85 ef       	ldi	r24, 0xF5	; 245
     b74:	92 e3       	ldi	r25, 0x32	; 50
     b76:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
	ptrStackP = &c->stackPointer;
     b7a:	ce 01       	movw	r24, r28
     b7c:	02 96       	adiw	r24, 0x02	; 2
     b7e:	80 93 7a 33 	sts	0x337A, r24	; 0x80337a <ptrStackP>
     b82:	90 93 7b 33 	sts	0x337B, r25	; 0x80337b <ptrStackP+0x1>

	activeContext = c;
     b86:	c0 93 9c 33 	sts	0x339C, r28	; 0x80339c <activeContext>
     b8a:	d0 93 9d 33 	sts	0x339D, r29	; 0x80339d <activeContext+0x1>
	activeContext->status = ACTIVE;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	89 87       	std	Y+9, r24	; 0x09
	timer_set(&c->timer, DEFAULT_BLOCK_DURATION);
     b92:	46 e9       	ldi	r20, 0x96	; 150
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	ce 01       	movw	r24, r28
     b9c:	0c 96       	adiw	r24, 0x0c	; 12
     b9e:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
 }
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <kernel_swap_task>:
	}

	kernel_swap_task();
 }

 void kernel_swap_task(void) {
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
	Context *c;
	bool needContextSwitch = false;
	Queue *q;
	QueueNode *n;

	if (activeContext != NULL) {
     bbc:	a0 91 9c 33 	lds	r26, 0x339C	; 0x80339c <activeContext>
     bc0:	b0 91 9d 33 	lds	r27, 0x339D	; 0x80339d <activeContext+0x1>
     bc4:	10 97       	sbiw	r26, 0x00	; 0
     bc6:	c9 f0       	breq	.+50     	; 0xbfa <kernel_swap_task+0x46>
		for (i = activeContext->priority - 1; i >= 0; i--) {
     bc8:	16 96       	adiw	r26, 0x06	; 6
     bca:	9c 91       	ld	r25, X
     bcc:	16 97       	sbiw	r26, 0x06	; 6
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <kernel_swap_task+0x3e>
			c = (Context*) contextList[i].head->data;
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	98 02       	muls	r25, r24
     bd6:	f0 01       	movw	r30, r0
     bd8:	11 24       	eor	r1, r1
     bda:	e4 58       	subi	r30, 0x84	; 132
     bdc:	fc 4c       	sbci	r31, 0xCC	; 204
     bde:	01 90       	ld	r0, Z+
     be0:	f0 81       	ld	r31, Z
     be2:	e0 2d       	mov	r30, r0
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
			if (c->status == READY) {
     bea:	21 85       	ldd	r18, Z+9	; 0x09
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	39 f0       	breq	.+14     	; 0xbfe <kernel_swap_task+0x4a>
	bool needContextSwitch = false;
	Queue *q;
	QueueNode *n;

	if (activeContext != NULL) {
		for (i = activeContext->priority - 1; i >= 0; i--) {
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	99 23       	and	r25, r25
     bf4:	74 f7       	brge	.-36     	; 0xbd2 <kernel_swap_task+0x1e>
 }

 void kernel_swap_task(void) {
	int8_t i;
	Context *c;
	bool needContextSwitch = false;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <kernel_swap_task+0x4c>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <kernel_swap_task+0x4c>

	if (activeContext != NULL) {
		for (i = activeContext->priority - 1; i >= 0; i--) {
			c = (Context*) contextList[i].head->data;
			if (c->status == READY) {
				needContextSwitch = true;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
		}
	}

	if (activeContext == NULL || needContextSwitch || activeContext->status == BLOCKED || timer_has_expired(&activeContext->timer)) {
     c00:	10 97       	sbiw	r26, 0x00	; 0
     c02:	71 f0       	breq	.+28     	; 0xc20 <kernel_swap_task+0x6c>
     c04:	81 11       	cpse	r24, r1
     c06:	0c c0       	rjmp	.+24     	; 0xc20 <kernel_swap_task+0x6c>
     c08:	19 96       	adiw	r26, 0x09	; 9
     c0a:	8c 91       	ld	r24, X
     c0c:	19 97       	sbiw	r26, 0x09	; 9
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	39 f0       	breq	.+14     	; 0xc20 <kernel_swap_task+0x6c>
     c12:	cd 01       	movw	r24, r26
     c14:	0c 96       	adiw	r24, 0x0c	; 12
     c16:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
     c1a:	88 23       	and	r24, r24
     c1c:	09 f4       	brne	.+2      	; 0xc20 <kernel_swap_task+0x6c>
     c1e:	61 c0       	rjmp	.+194    	; 0xce2 <kernel_swap_task+0x12e>
		if (activeContext != NULL) {
     c20:	e0 91 9c 33 	lds	r30, 0x339C	; 0x80339c <activeContext>
     c24:	f0 91 9d 33 	lds	r31, 0x339D	; 0x80339d <activeContext+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	51 f1       	breq	.+84     	; 0xc80 <kernel_swap_task+0xcc>
			q = &contextList[activeContext->priority];
     c2c:	c6 81       	ldd	r28, Z+6	; 0x06
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
     c30:	cc 0f       	add	r28, r28
     c32:	dd 1f       	adc	r29, r29
     c34:	cc 0f       	add	r28, r28
     c36:	dd 1f       	adc	r29, r29
     c38:	c4 58       	subi	r28, 0x84	; 132
     c3a:	dc 4c       	sbci	r29, 0xCC	; 204
			if (activeContext->status != BLOCKED) {
     c3c:	81 85       	ldd	r24, Z+9	; 0x09
     c3e:	83 30       	cpi	r24, 0x03	; 3
     c40:	51 f0       	breq	.+20     	; 0xc56 <kernel_swap_task+0xa2>
				activeContext->status = BLOCKED;
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	81 87       	std	Z+9, r24	; 0x09
				timer_set(&activeContext->timer, DEFAULT_BLOCK_DURATION);
     c46:	46 e9       	ldi	r20, 0x96	; 150
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	cf 01       	movw	r24, r30
     c50:	0c 96       	adiw	r24, 0x0c	; 12
     c52:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
			}
			n = queue_find_node(q, (void*)activeContext);
     c56:	60 91 9c 33 	lds	r22, 0x339C	; 0x80339c <activeContext>
     c5a:	70 91 9d 33 	lds	r23, 0x339D	; 0x80339d <activeContext+0x1>
     c5e:	ce 01       	movw	r24, r28
     c60:	0e 94 97 08 	call	0x112e	; 0x112e <queue_find_node>
     c64:	8c 01       	movw	r16, r24
			n->priority = timer_time_remaining(&activeContext->timer);
     c66:	80 91 9c 33 	lds	r24, 0x339C	; 0x80339c <activeContext>
     c6a:	90 91 9d 33 	lds	r25, 0x339D	; 0x80339d <activeContext+0x1>
     c6e:	0c 96       	adiw	r24, 0x0c	; 12
     c70:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <timer_time_remaining>
     c74:	f8 01       	movw	r30, r16
     c76:	64 83       	std	Z+4, r22	; 0x04
     c78:	75 83       	std	Z+5, r23	; 0x05
			queue_sort(q);
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 2a 08 	call	0x1054	; 0x1054 <queue_sort>
		}

		for (i = 0; i < MAX_PRIORITY; i++) {
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <kernel_swap_task+0xfc>
			c = (Context*) contextList[i].head->data;
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	98 02       	muls	r25, r24
     c88:	f0 01       	movw	r30, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	e4 58       	subi	r30, 0x84	; 132
     c8e:	fc 4c       	sbci	r31, 0xCC	; 204
     c90:	01 90       	ld	r0, Z+
     c92:	f0 81       	ld	r31, Z
     c94:	e0 2d       	mov	r30, r0
     c96:	01 90       	ld	r0, Z+
     c98:	f0 81       	ld	r31, Z
     c9a:	e0 2d       	mov	r30, r0
			if (c != NULL && c->status == READY) {
     c9c:	30 97       	sbiw	r30, 0x00	; 0
     c9e:	39 f0       	breq	.+14     	; 0xcae <kernel_swap_task+0xfa>
     ca0:	81 85       	ldd	r24, Z+9	; 0x09
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	21 f4       	brne	.+8      	; 0xcae <kernel_swap_task+0xfa>
				kernel_swap_to_task(c);
     ca6:	cf 01       	movw	r24, r30
     ca8:	0e 94 a8 05 	call	0xb50	; 0xb50 <kernel_swap_to_task>
				return;
     cac:	1a c0       	rjmp	.+52     	; 0xce2 <kernel_swap_task+0x12e>
			n = queue_find_node(q, (void*)activeContext);
			n->priority = timer_time_remaining(&activeContext->timer);
			queue_sort(q);
		}

		for (i = 0; i < MAX_PRIORITY; i++) {
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	98 30       	cpi	r25, 0x08	; 8
     cb2:	44 f3       	brlt	.-48     	; 0xc84 <kernel_swap_task+0xd0>
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	13 c0       	rjmp	.+38     	; 0xcde <kernel_swap_task+0x12a>
				kernel_swap_to_task(c);
				return;
			}
		}
		for (i = 0; i < MAX_PRIORITY; i++) {
			c = (Context*) contextList[i].head->data;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	98 02       	muls	r25, r24
     cbc:	f0 01       	movw	r30, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	e4 58       	subi	r30, 0x84	; 132
     cc2:	fc 4c       	sbci	r31, 0xCC	; 204
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
			if (c != NULL) {
     cce:	21 15       	cp	r18, r1
     cd0:	31 05       	cpc	r19, r1
     cd2:	21 f0       	breq	.+8      	; 0xcdc <kernel_swap_task+0x128>
				kernel_swap_to_task(c);
     cd4:	c9 01       	movw	r24, r18
     cd6:	0e 94 a8 05 	call	0xb50	; 0xb50 <kernel_swap_to_task>
				return;
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <kernel_swap_task+0x12e>
			if (c != NULL && c->status == READY) {
				kernel_swap_to_task(c);
				return;
			}
		}
		for (i = 0; i < MAX_PRIORITY; i++) {
     cdc:	9f 5f       	subi	r25, 0xFF	; 255
     cde:	98 30       	cpi	r25, 0x08	; 8
     ce0:	5c f3       	brlt	.-42     	; 0xcb8 <kernel_swap_task+0x104>
				kernel_swap_to_task(c);
				return;
			}
		}
	}
 }
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <kernel_yield_from_task>:
	activeContext = c;
	activeContext->status = ACTIVE;
	timer_set(&c->timer, DEFAULT_BLOCK_DURATION);
 }

 void kernel_yield_from_task(uint16_t duration) {
     cec:	ac 01       	movw	r20, r24
	activeContext->status = BLOCKED;
     cee:	80 91 9c 33 	lds	r24, 0x339C	; 0x80339c <activeContext>
     cf2:	90 91 9d 33 	lds	r25, 0x339D	; 0x80339d <activeContext+0x1>
     cf6:	23 e0       	ldi	r18, 0x03	; 3
     cf8:	fc 01       	movw	r30, r24
     cfa:	21 87       	std	Z+9, r18	; 0x09
	timer_set(&activeContext->timer, duration);
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	0c 96       	adiw	r24, 0x0c	; 12
     d02:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
     d06:	08 95       	ret

00000d08 <kernel_check_stack_overflow>:
	//TCC0.CNT = TCC0.PER;
	//tick_trigger_interrupt();
 }

 void kernel_check_stack_overflow(void) {
	if (activeContext->stackPointer < activeContext->stack) {
     d08:	e0 91 9c 33 	lds	r30, 0x339C	; 0x80339c <activeContext>
     d0c:	f0 91 9d 33 	lds	r31, 0x339D	; 0x80339d <activeContext+0x1>
     d10:	22 81       	ldd	r18, Z+2	; 0x02
     d12:	33 81       	ldd	r19, Z+3	; 0x03
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	c8 f4       	brcc	.+50     	; 0xd50 <kernel_check_stack_overflow+0x48>
		#if DEBUG_TRACE
			sprintf(gStrBuf, "Stack overflow detected in task %s!\n\r", activeContext->taskName);
     d1e:	85 81       	ldd	r24, Z+5	; 0x05
     d20:	8f 93       	push	r24
     d22:	84 81       	ldd	r24, Z+4	; 0x04
     d24:	8f 93       	push	r24
     d26:	86 eb       	ldi	r24, 0xB6	; 182
     d28:	90 e2       	ldi	r25, 0x20	; 32
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	85 ef       	ldi	r24, 0xF5	; 245
     d30:	92 e3       	ldi	r25, 0x32	; 50
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <sprintf>
			serial_send_string(gStrBuf);
     d3a:	85 ef       	ldi	r24, 0xF5	; 245
     d3c:	92 e3       	ldi	r25, 0x32	; 50
     d3e:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	ff cf       	rjmp	.-2      	; 0xd4e <kernel_check_stack_overflow+0x46>
     d50:	08 95       	ret

00000d52 <kernel_process_all_tasks>:

	c->stack[c->stackSize - j] = 0x80; // global interrupt enable
	c->stackPointer = &c->stack[c->stackSize - j - 36]; // 37 pops in RESTORE_CONTEXT
 }

 void kernel_process_all_tasks(void) {
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
	uint8_t i, j;
	Context *c;
	QueueNode *n;

	if (scheduler.status != RUNNING)
     d62:	80 91 9e 33 	lds	r24, 0x339E	; 0x80339e <scheduler>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a9 f5       	brne	.+106    	; 0xdd4 <kernel_process_all_tasks+0x82>
		return;

	kernel_check_stack_overflow();
     d6a:	0e 94 84 06 	call	0xd08	; 0xd08 <kernel_check_stack_overflow>

	for (i = 0; i < MAX_PRIORITY; i++) {
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	2d c0       	rjmp	.+90     	; 0xdcc <kernel_process_all_tasks+0x7a>
		n = contextList[i].head;
     d72:	c0 2e       	mov	r12, r16
     d74:	d1 2c       	mov	r13, r1
     d76:	f6 01       	movw	r30, r12
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	e4 58       	subi	r30, 0x84	; 132
     d82:	fc 4c       	sbci	r31, 0xCC	; 204
     d84:	c0 81       	ld	r28, Z
     d86:	d1 81       	ldd	r29, Z+1	; 0x01
		for (j = 0; j < contextList[i].size; j++) {
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	15 c0       	rjmp	.+42     	; 0xdb6 <kernel_process_all_tasks+0x64>
			c = (Context*) n->data;
     d8c:	e8 80       	ld	r14, Y
     d8e:	f9 80       	ldd	r15, Y+1	; 0x01
			if (c->status == BLOCKED) {
     d90:	f7 01       	movw	r30, r14
     d92:	81 85       	ldd	r24, Z+9	; 0x09
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	59 f4       	brne	.+22     	; 0xdae <kernel_process_all_tasks+0x5c>
				n->priority = timer_time_remaining(&c->timer);
     d98:	c7 01       	movw	r24, r14
     d9a:	0c 96       	adiw	r24, 0x0c	; 12
     d9c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <timer_time_remaining>
     da0:	6c 83       	std	Y+4, r22	; 0x04
     da2:	7d 83       	std	Y+5, r23	; 0x05
				if (n->priority == 0)
     da4:	67 2b       	or	r22, r23
     da6:	19 f4       	brne	.+6      	; 0xdae <kernel_process_all_tasks+0x5c>
					c->status = READY;
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	f7 01       	movw	r30, r14
     dac:	81 87       	std	Z+9, r24	; 0x09
			}
			n = n->next;
     dae:	0a 80       	ldd	r0, Y+2	; 0x02
     db0:	db 81       	ldd	r29, Y+3	; 0x03
     db2:	c0 2d       	mov	r28, r0

	kernel_check_stack_overflow();

	for (i = 0; i < MAX_PRIORITY; i++) {
		n = contextList[i].head;
		for (j = 0; j < contextList[i].size; j++) {
     db4:	1f 5f       	subi	r17, 0xFF	; 255
     db6:	f6 01       	movw	r30, r12
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e4 58       	subi	r30, 0x84	; 132
     dc2:	fc 4c       	sbci	r31, 0xCC	; 204
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	18 17       	cp	r17, r24
     dc8:	08 f3       	brcs	.-62     	; 0xd8c <kernel_process_all_tasks+0x3a>
	if (scheduler.status != RUNNING)
		return;

	kernel_check_stack_overflow();

	for (i = 0; i < MAX_PRIORITY; i++) {
     dca:	0f 5f       	subi	r16, 0xFF	; 255
     dcc:	08 30       	cpi	r16, 0x08	; 8
     dce:	88 f2       	brcs	.-94     	; 0xd72 <kernel_process_all_tasks+0x20>
			}
			n = n->next;
		}
	}

	kernel_swap_task();
     dd0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <kernel_swap_task>
 }
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <kernel_find_highest_priority_ready_task>:

 Context* kernel_find_highest_priority_ready_task(void) {
	uint8_t i;
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <kernel_find_highest_priority_ready_task+0x2c>
		c = (Context*) contextList[i].head->data;
     dea:	e8 2f       	mov	r30, r24
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	e4 58       	subi	r30, 0x84	; 132
     df8:	fc 4c       	sbci	r31, 0xCC	; 204
     dfa:	01 90       	ld	r0, Z+
     dfc:	f0 81       	ld	r31, Z
     dfe:	e0 2d       	mov	r30, r0
     e00:	01 90       	ld	r0, Z+
     e02:	f0 81       	ld	r31, Z
     e04:	e0 2d       	mov	r30, r0
		if (c != NULL && c->status == READY)
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	19 f0       	breq	.+6      	; 0xe10 <kernel_find_highest_priority_ready_task+0x2a>
     e0a:	91 85       	ldd	r25, Z+9	; 0x09
     e0c:	92 30       	cpi	r25, 0x02	; 2
     e0e:	31 f0       	breq	.+12     	; 0xe1c <kernel_find_highest_priority_ready_task+0x36>

 Context* kernel_find_highest_priority_ready_task(void) {
	uint8_t i;
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	88 30       	cpi	r24, 0x08	; 8
     e14:	50 f3       	brcs	.-44     	; 0xdea <kernel_find_highest_priority_ready_task+0x4>
		c = (Context*) contextList[i].head->data;
		if (c != NULL && c->status == READY)
			return c;
	}
	return NULL;
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	08 95       	ret
	Context *c;

	for (i = 0; i < MAX_PRIORITY; i++) {
		c = (Context*) contextList[i].head->data;
		if (c != NULL && c->status == READY)
			return c;
     e1c:	8e 2f       	mov	r24, r30
     e1e:	9f 2f       	mov	r25, r31
	}
	return NULL;
 }
     e20:	08 95       	ret

00000e22 <kernel_catch_task_return>:
		#endif
		while(1);
	}
 }

 void kernel_catch_task_return(void) {
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	1f 92       	push	r1
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	Context *c;
	serial_send_string("\n\rTask caught in kernel catch function\n\r");
     e2c:	8c ed       	ldi	r24, 0xDC	; 220
     e2e:	90 e2       	ldi	r25, 0x20	; 32
     e30:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
	AVR_ENTER_CRITICAL_REGION();
     e34:	8f b7       	in	r24, 0x3f	; 63
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	f8 94       	cli
	SPL = defaultStackP & 0xff;
     e3a:	80 91 78 33 	lds	r24, 0x3378	; 0x803378 <defaultStackP>
     e3e:	90 91 79 33 	lds	r25, 0x3379	; 0x803379 <defaultStackP+0x1>
     e42:	8d bf       	out	0x3d, r24	; 61
	SPH = (defaultStackP >> 8) & 0xff;
     e44:	80 91 78 33 	lds	r24, 0x3378	; 0x803378 <defaultStackP>
     e48:	90 91 79 33 	lds	r25, 0x3379	; 0x803379 <defaultStackP+0x1>
     e4c:	9e bf       	out	0x3e, r25	; 62
	kernel_remove_task(activeContext);
     e4e:	80 91 9c 33 	lds	r24, 0x339C	; 0x80339c <activeContext>
     e52:	90 91 9d 33 	lds	r25, 0x339D	; 0x80339d <activeContext+0x1>
     e56:	0e 94 8c 05 	call	0xb18	; 0xb18 <kernel_remove_task>
	AVR_LEAVE_CRITICAL_REGION();
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	8f bf       	out	0x3f, r24	; 63

	activeContext = NULL;
     e5e:	10 92 9c 33 	sts	0x339C, r1	; 0x80339c <activeContext>
     e62:	10 92 9d 33 	sts	0x339D, r1	; 0x80339d <activeContext+0x1>
	c = kernel_find_highest_priority_ready_task();
     e66:	0e 94 f3 06 	call	0xde6	; 0xde6 <kernel_find_highest_priority_ready_task>
	if (c != NULL)
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	19 f0       	breq	.+6      	; 0xe74 <kernel_catch_task_return+0x52>
		kernel_swap_to_task(c);
     e6e:	0e 94 a8 05 	call	0xb50	; 0xb50 <kernel_swap_to_task>
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <kernel_catch_task_return+0x5e>
	else
		ptrStackP = &defaultStackP;
     e74:	88 e7       	ldi	r24, 0x78	; 120
     e76:	93 e3       	ldi	r25, 0x33	; 51
     e78:	80 93 7a 33 	sts	0x337A, r24	; 0x80337a <ptrStackP>
     e7c:	90 93 7b 33 	sts	0x337B, r25	; 0x80337b <ptrStackP+0x1>
	
	portRESTORE_CONTEXT();
     e80:	a0 91 7a 33 	lds	r26, 0x337A	; 0x80337a <ptrStackP>
     e84:	b0 91 7b 33 	lds	r27, 0x337B	; 0x80337b <ptrStackP+0x1>
     e88:	0d 90       	ld	r0, X+
     e8a:	1c 90       	ld	r1, X
     e8c:	0d be       	out	0x3d, r0	; 61
     e8e:	1e be       	out	0x3e, r1	; 62
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	3f 91       	pop	r19
     eaa:	2f 91       	pop	r18
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	5f 90       	pop	r5
     ec6:	4f 90       	pop	r4
     ec8:	3f 90       	pop	r3
     eca:	2f 90       	pop	r2
     ecc:	1f 90       	pop	r1
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0a be       	out	0x3a, r0	; 58
     ed6:	0f 90       	pop	r0
     ed8:	09 be       	out	0x39, r0	; 57
     eda:	0f 90       	pop	r0
     edc:	08 be       	out	0x38, r0	; 56
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
	asm volatile ("ret \n\t"); // need to ignore the function's default return pops
     ee4:	08 95       	ret
 }
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <kernel_enable_scheduler>:
	}
	return NULL;
 }

 void kernel_enable_scheduler(void) {
	scheduler.status = RUNNING;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 9e 33 	sts	0x339E, r24	; 0x80339e <scheduler>
     ef4:	08 95       	ret

00000ef6 <kernel_disable_scheduler>:
 }

 void kernel_disable_scheduler(void) {
	scheduler.status = STOPPED;
     ef6:	10 92 9e 33 	sts	0x339E, r1	; 0x80339e <scheduler>
     efa:	08 95       	ret

00000efc <kernel_no_return>:
 }

 void kernel_no_return(void) {
	asm volatile ("rjmp .-2 \n\t");
     efc:	ff cf       	rjmp	.-2      	; 0xefc <kernel_no_return>
     efe:	08 95       	ret

00000f00 <queue_add_with_priority>:
	}
}

 void* queue_peek(Queue *queue) {
	 return queue->head->data;
 }
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	7c 01       	movw	r14, r24
     f12:	6b 01       	movw	r12, r22
     f14:	ea 01       	movw	r28, r20
     f16:	89 2b       	or	r24, r25
     f18:	59 f4       	brne	.+22     	; 0xf30 <queue_add_with_priority+0x30>
     f1a:	28 e1       	ldi	r18, 0x18	; 24
     f1c:	31 e2       	ldi	r19, 0x21	; 33
     f1e:	42 e1       	ldi	r20, 0x12	; 18
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	66 e2       	ldi	r22, 0x26	; 38
     f24:	71 e2       	ldi	r23, 0x21	; 33
     f26:	8f e4       	ldi	r24, 0x4F	; 79
     f28:	91 e2       	ldi	r25, 0x21	; 33
     f2a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     f2e:	ff cf       	rjmp	.-2      	; 0xf2e <queue_add_with_priority+0x2e>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	d7 01       	movw	r26, r14
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 93       	st	X, r24
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 3a 01 	call	0x274	; 0x274 <internal_malloc>
     f40:	8c 01       	movw	r16, r24
     f42:	89 2b       	or	r24, r25
     f44:	59 f4       	brne	.+22     	; 0xf5c <queue_add_with_priority+0x5c>
     f46:	23 e3       	ldi	r18, 0x33	; 51
     f48:	31 e2       	ldi	r19, 0x21	; 33
     f4a:	45 e1       	ldi	r20, 0x15	; 21
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	66 e2       	ldi	r22, 0x26	; 38
     f50:	71 e2       	ldi	r23, 0x21	; 33
     f52:	8f e4       	ldi	r24, 0x4F	; 79
     f54:	91 e2       	ldi	r25, 0x21	; 33
     f56:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     f5a:	ff cf       	rjmp	.-2      	; 0xf5a <queue_add_with_priority+0x5a>
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	f8 01       	movw	r30, r16
     f60:	11 92       	st	Z+, r1
     f62:	8a 95       	dec	r24
     f64:	e9 f7       	brne	.-6      	; 0xf60 <queue_add_with_priority+0x60>
     f66:	d8 01       	movw	r26, r16
     f68:	cd 92       	st	X+, r12
     f6a:	dc 92       	st	X, r13
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	14 96       	adiw	r26, 0x04	; 4
     f70:	cd 93       	st	X+, r28
     f72:	dc 93       	st	X, r29
     f74:	15 97       	sbiw	r26, 0x05	; 5
     f76:	f7 01       	movw	r30, r14
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	82 83       	std	Z+2, r24	; 0x02
     f7e:	8f 3f       	cpi	r24, 0xFF	; 255
     f80:	59 f4       	brne	.+22     	; 0xf98 <queue_add_with_priority+0x98>
     f82:	2d e3       	ldi	r18, 0x3D	; 61
     f84:	31 e2       	ldi	r19, 0x21	; 33
     f86:	4a e1       	ldi	r20, 0x1A	; 26
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	66 e2       	ldi	r22, 0x26	; 38
     f8c:	71 e2       	ldi	r23, 0x21	; 33
     f8e:	8f e4       	ldi	r24, 0x4F	; 79
     f90:	91 e2       	ldi	r25, 0x21	; 33
     f92:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
     f96:	ff cf       	rjmp	.-2      	; 0xf96 <queue_add_with_priority+0x96>
     f98:	d7 01       	movw	r26, r14
     f9a:	ed 91       	ld	r30, X+
     f9c:	fc 91       	ld	r31, X
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	29 f0       	breq	.+10     	; 0xfac <queue_add_with_priority+0xac>
     fa2:	84 81       	ldd	r24, Z+4	; 0x04
     fa4:	95 81       	ldd	r25, Z+5	; 0x05
     fa6:	8c 17       	cp	r24, r28
     fa8:	9d 07       	cpc	r25, r29
     faa:	60 f0       	brcs	.+24     	; 0xfc4 <queue_add_with_priority+0xc4>
     fac:	e8 01       	movw	r28, r16
     fae:	ea 83       	std	Y+2, r30	; 0x02
     fb0:	fb 83       	std	Y+3, r31	; 0x03
     fb2:	f7 01       	movw	r30, r14
     fb4:	00 83       	st	Z, r16
     fb6:	11 83       	std	Z+1, r17	; 0x01
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <queue_add_with_priority+0xe2>
     fba:	df 01       	movw	r26, r30
     fbc:	02 80       	ldd	r0, Z+2	; 0x02
     fbe:	f3 81       	ldd	r31, Z+3	; 0x03
     fc0:	e0 2d       	mov	r30, r0
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <queue_add_with_priority+0xc6>
     fc4:	df 01       	movw	r26, r30
     fc6:	30 97       	sbiw	r30, 0x00	; 0
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <queue_add_with_priority+0xd4>
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	95 81       	ldd	r25, Z+5	; 0x05
     fce:	8c 17       	cp	r24, r28
     fd0:	9d 07       	cpc	r25, r29
     fd2:	98 f3       	brcs	.-26     	; 0xfba <queue_add_with_priority+0xba>
     fd4:	e8 01       	movw	r28, r16
     fd6:	ea 83       	std	Y+2, r30	; 0x02
     fd8:	fb 83       	std	Y+3, r31	; 0x03
     fda:	12 96       	adiw	r26, 0x02	; 2
     fdc:	0d 93       	st	X+, r16
     fde:	1c 93       	st	X, r17
     fe0:	13 97       	sbiw	r26, 0x03	; 3
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	08 95       	ret

00000ff4 <queue_remove>:
     ff4:	dc 01       	movw	r26, r24
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	9c 91       	ld	r25, X
     ffa:	12 97       	sbiw	r26, 0x02	; 2
     ffc:	99 23       	and	r25, r25
     ffe:	49 f1       	breq	.+82     	; 0x1052 <queue_remove+0x5e>
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	12 96       	adiw	r26, 0x02	; 2
    1004:	9c 93       	st	X, r25
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	ed 91       	ld	r30, X+
    100a:	fc 91       	ld	r31, X
    100c:	11 97       	sbiw	r26, 0x01	; 1
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	86 17       	cp	r24, r22
    1014:	97 07       	cpc	r25, r23
    1016:	51 f4       	brne	.+20     	; 0x102c <queue_remove+0x38>
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	8d 93       	st	X+, r24
    101e:	9c 93       	st	X, r25
    1020:	15 c0       	rjmp	.+42     	; 0x104c <queue_remove+0x58>
    1022:	df 01       	movw	r26, r30
    1024:	02 80       	ldd	r0, Z+2	; 0x02
    1026:	f3 81       	ldd	r31, Z+3	; 0x03
    1028:	e0 2d       	mov	r30, r0
    102a:	01 c0       	rjmp	.+2      	; 0x102e <queue_remove+0x3a>
    102c:	df 01       	movw	r26, r30
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	29 f0       	breq	.+10     	; 0x103c <queue_remove+0x48>
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	68 17       	cp	r22, r24
    1038:	79 07       	cpc	r23, r25
    103a:	99 f7       	brne	.-26     	; 0x1022 <queue_remove+0x2e>
    103c:	30 97       	sbiw	r30, 0x00	; 0
    103e:	49 f0       	breq	.+18     	; 0x1052 <queue_remove+0x5e>
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	8d 93       	st	X+, r24
    1048:	9c 93       	st	X, r25
    104a:	13 97       	sbiw	r26, 0x03	; 3
    104c:	cf 01       	movw	r24, r30
    104e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <free>
    1052:	08 95       	ret

00001054 <queue_sort>:
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	dc 01       	movw	r26, r24
    105e:	12 96       	adiw	r26, 0x02	; 2
    1060:	2c 91       	ld	r18, X
    1062:	12 97       	sbiw	r26, 0x02	; 2
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	08 f4       	brcc	.+2      	; 0x106a <queue_sort+0x16>
    1068:	5d c0       	rjmp	.+186    	; 0x1124 <queue_sort+0xd0>
    106a:	0d 90       	ld	r0, X+
    106c:	bc 91       	ld	r27, X
    106e:	a0 2d       	mov	r26, r0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	51 c0       	rjmp	.+162    	; 0x1118 <queue_sort+0xc4>
    1076:	04 81       	ldd	r16, Z+4	; 0x04
    1078:	15 81       	ldd	r17, Z+5	; 0x05
    107a:	c2 81       	ldd	r28, Z+2	; 0x02
    107c:	d3 81       	ldd	r29, Z+3	; 0x03
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	20 17       	cp	r18, r16
    1084:	31 07       	cpc	r19, r17
    1086:	80 f5       	brcc	.+96     	; 0x10e8 <queue_sort+0x94>
    1088:	41 15       	cp	r20, r1
    108a:	51 05       	cpc	r21, r1
    108c:	c1 f4       	brne	.+48     	; 0x10be <queue_sort+0x6a>
    108e:	dc 01       	movw	r26, r24
    1090:	0d 91       	ld	r16, X+
    1092:	1c 91       	ld	r17, X
    1094:	11 97       	sbiw	r26, 0x01	; 1
    1096:	cd 93       	st	X+, r28
    1098:	dc 93       	st	X, r29
    109a:	11 97       	sbiw	r26, 0x01	; 1
    109c:	02 80       	ldd	r0, Z+2	; 0x02
    109e:	f3 81       	ldd	r31, Z+3	; 0x03
    10a0:	e0 2d       	mov	r30, r0
    10a2:	22 81       	ldd	r18, Z+2	; 0x02
    10a4:	33 81       	ldd	r19, Z+3	; 0x03
    10a6:	e8 01       	movw	r28, r16
    10a8:	2a 83       	std	Y+2, r18	; 0x02
    10aa:	3b 83       	std	Y+3, r19	; 0x03
    10ac:	ed 91       	ld	r30, X+
    10ae:	fc 91       	ld	r31, X
    10b0:	11 97       	sbiw	r26, 0x01	; 1
    10b2:	02 83       	std	Z+2, r16	; 0x02
    10b4:	13 83       	std	Z+3, r17	; 0x03
    10b6:	0d 90       	ld	r0, X+
    10b8:	bc 91       	ld	r27, X
    10ba:	a0 2d       	mov	r26, r0
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <queue_sort+0x96>
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	cd 93       	st	X+, r28
    10c2:	dc 93       	st	X, r29
    10c4:	13 97       	sbiw	r26, 0x03	; 3
    10c6:	c2 81       	ldd	r28, Z+2	; 0x02
    10c8:	d3 81       	ldd	r29, Z+3	; 0x03
    10ca:	2a 81       	ldd	r18, Y+2	; 0x02
    10cc:	3b 81       	ldd	r19, Y+3	; 0x03
    10ce:	22 83       	std	Z+2, r18	; 0x02
    10d0:	33 83       	std	Z+3, r19	; 0x03
    10d2:	12 96       	adiw	r26, 0x02	; 2
    10d4:	cd 91       	ld	r28, X+
    10d6:	dc 91       	ld	r29, X
    10d8:	13 97       	sbiw	r26, 0x03	; 3
    10da:	ea 83       	std	Y+2, r30	; 0x02
    10dc:	fb 83       	std	Y+3, r31	; 0x03
    10de:	12 96       	adiw	r26, 0x02	; 2
    10e0:	0d 90       	ld	r0, X+
    10e2:	bc 91       	ld	r27, X
    10e4:	a0 2d       	mov	r26, r0
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <queue_sort+0x96>
    10e8:	df 01       	movw	r26, r30
    10ea:	12 96       	adiw	r26, 0x02	; 2
    10ec:	ed 91       	ld	r30, X+
    10ee:	fc 91       	ld	r31, X
    10f0:	13 97       	sbiw	r26, 0x03	; 3
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <queue_sort+0xaa>
    10f8:	fd 01       	movw	r30, r26
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	ec 01       	movw	r28, r24
    1100:	2a 81       	ldd	r18, Y+2	; 0x02
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	31 09       	sbc	r19, r1
    1108:	42 17       	cp	r20, r18
    110a:	53 07       	cpc	r21, r19
    110c:	0c f4       	brge	.+2      	; 0x1110 <queue_sort+0xbc>
    110e:	b3 cf       	rjmp	.-154    	; 0x1076 <queue_sort+0x22>
    1110:	a8 81       	ld	r26, Y
    1112:	b9 81       	ldd	r27, Y+1	; 0x01
    1114:	6f 5f       	subi	r22, 0xFF	; 255
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	fc 01       	movw	r30, r24
    111a:	22 81       	ldd	r18, Z+2	; 0x02
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	62 17       	cp	r22, r18
    1120:	73 07       	cpc	r23, r19
    1122:	54 f3       	brlt	.-44     	; 0x10f8 <queue_sort+0xa4>
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <queue_find_node>:

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;
    112e:	dc 01       	movw	r26, r24
    1130:	ed 91       	ld	r30, X+
    1132:	fc 91       	ld	r31, X

	while (n != NULL && n->data != data)
    1134:	03 c0       	rjmp	.+6      	; 0x113c <queue_find_node+0xe>
		n = n->next;
    1136:	02 80       	ldd	r0, Z+2	; 0x02
    1138:	f3 81       	ldd	r31, Z+3	; 0x03
    113a:	e0 2d       	mov	r30, r0
 }

 QueueNode* queue_find_node(Queue *queue, void* data) {
	QueueNode *n = queue->head;

	while (n != NULL && n->data != data)
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	29 f0       	breq	.+10     	; 0x114a <queue_find_node+0x1c>
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	86 17       	cp	r24, r22
    1146:	97 07       	cpc	r25, r23
    1148:	b1 f7       	brne	.-20     	; 0x1136 <queue_find_node+0x8>
		n = n->next;

	return n;
 }
    114a:	cf 01       	movw	r24, r30
    114c:	08 95       	ret

0000114e <bios_interrupt_init>:
	bios_interrupt_init();
	serial_init();
}

void bios_interrupt_init(void) {
	PMIC.CTRL = PMIC_LOLVLEX_bm;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1154:	78 94       	sei
    1156:	08 95       	ret

00001158 <bios_io_ports_init>:
}

void bios_io_ports_init(void) {
    1158:	ef 92       	push	r14
    115a:	0f 93       	push	r16
	PORT_ConfigurePins( &PORTB,
    115c:	e1 2c       	mov	r14, r1
    115e:	08 e1       	ldi	r16, 0x18	; 24
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	60 e4       	ldi	r22, 0x40	; 64
    1166:	80 e2       	ldi	r24, 0x20	; 32
    1168:	96 e0       	ldi	r25, 0x06	; 6
    116a:	0e 94 4b 09 	call	0x1296	; 0x1296 <PORT_ConfigurePins>
	PIN6_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTB, PIN6_bm);
    116e:	e0 e2       	ldi	r30, 0x20	; 32
    1170:	f6 e0       	ldi	r31, 0x06	; 6
    1172:	80 e4       	ldi	r24, 0x40	; 64
    1174:	80 83       	st	Z, r24
	(&PORTB)->OUT |= PIN6_bm;
    1176:	84 81       	ldd	r24, Z+4	; 0x04
    1178:	80 64       	ori	r24, 0x40	; 64
    117a:	84 83       	std	Z+4, r24	; 0x04

	PORT_ConfigurePins( &PORTC,
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	80 e4       	ldi	r24, 0x40	; 64
    1186:	96 e0       	ldi	r25, 0x06	; 6
    1188:	0e 94 4b 09 	call	0x1296	; 0x1296 <PORT_ConfigurePins>
	PIN3_bm,	// configure pin0, pin1, pin3, pin4, pin5, pin7.
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_TOTEM_gc,				// Totempole
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTC, PIN3_bm);
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>

	PORT_ConfigurePins( &PORTF,
    1192:	08 e1       	ldi	r16, 0x18	; 24
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	64 e0       	ldi	r22, 0x04	; 4
    119a:	80 ea       	ldi	r24, 0xA0	; 160
    119c:	96 e0       	ldi	r25, 0x06	; 6
    119e:	0e 94 4b 09 	call	0x1296	; 0x1296 <PORT_ConfigurePins>
	PIN2_bm,
	false,							// no slew rate control
	false,							// no inversion
	PORT_OPC_PULLUP_gc,
	PORT_ISC_BOTHEDGES_gc );
	PORT_SetDirection( &PORTF, PIN2_bm);
    11a2:	e0 ea       	ldi	r30, 0xA0	; 160
    11a4:	f6 e0       	ldi	r31, 0x06	; 6
    11a6:	84 e0       	ldi	r24, 0x04	; 4
    11a8:	80 83       	st	Z, r24
	(&PORTF)->OUT |= PIN2_bm;
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	84 60       	ori	r24, 0x04	; 4
    11ae:	84 83       	std	Z+4, r24	; 0x04
}
    11b0:	0f 91       	pop	r16
    11b2:	ef 90       	pop	r14
    11b4:	08 95       	ret

000011b6 <bios_clock_normal>:

void bios_clock_normal( void ) {
	CLKSYS_Enable( OSC_RC32MEN_bm | OSC_RC32KEN_bm);						// enabled RC32KHz internal oscillator as source for 32MHz calibrated source.
    11b6:	e0 e5       	ldi	r30, 0x50	; 80
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	86 60       	ori	r24, 0x06	; 6
    11be:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );		//The output cpu and peripheral clocks are the same as the original source.
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 14 09 	call	0x1228	; 0x1228 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );					// Wait for RC 32KHz stabilized
    11c8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    11cc:	82 ff       	sbrs	r24, 2
    11ce:	fc cf       	rjmp	.-8      	; 0x11c8 <bios_clock_normal+0x12>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    11d0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    11d4:	81 ff       	sbrs	r24, 1
    11d6:	fc cf       	rjmp	.-8      	; 0x11d0 <bios_clock_normal+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	0e 94 1a 09 	call	0x1234	; 0x1234 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_AutoCalibration_Enable( OSC_RC32MCREF_bm, 0 );				// Enabled CLKSYS auto calibration in order to work with Rev.I ATxmega192D3 chip.
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	0e 94 2f 09 	call	0x125e	; 0x125e <CLKSYS_AutoCalibration_Enable>
    11e6:	08 95       	ret

000011e8 <bios_init>:
void bios_io_ports_init(void);
void bios_timer_init(void);
void bios_interrupt_init(void);

void bios_init(void) {
	bios_io_ports_init();
    11e8:	0e 94 ac 08 	call	0x1158	; 0x1158 <bios_io_ports_init>
	bios_clock_normal();
    11ec:	0e 94 db 08 	call	0x11b6	; 0x11b6 <bios_clock_normal>
	tick_init();
    11f0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <tick_init>
	bios_interrupt_init();
    11f4:	0e 94 a7 08 	call	0x114e	; 0x114e <bios_interrupt_init>
	serial_init();
    11f8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <serial_init>
    11fc:	08 95       	ret

000011fe <CCPWrite>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    11fe:	0f 93       	push	r16
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	1f 92       	push	r1
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2f b7       	in	r18, 0x3f	; 63
    120c:	29 83       	std	Y+1, r18	; 0x01
    120e:	f8 94       	cli
    1210:	1b be       	out	0x3b, r1	; 59
    1212:	fc 01       	movw	r30, r24
    1214:	08 ed       	ldi	r16, 0xD8	; 216
    1216:	04 bf       	out	0x34, r16	; 52
    1218:	60 83       	st	Z, r22
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	8f bf       	out	0x3f, r24	; 63
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <CLKSYS_Prescalers_Config>:
    1228:	68 2b       	or	r22, r24
    122a:	81 e4       	ldi	r24, 0x41	; 65
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CCPWrite>
    1232:	08 95       	ret

00001234 <CLKSYS_Main_ClockSource_Select>:
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	c8 2f       	mov	r28, r24
    123c:	00 e4       	ldi	r16, 0x40	; 64
    123e:	10 e0       	ldi	r17, 0x00	; 0
    1240:	f8 01       	movw	r30, r16
    1242:	60 81       	ld	r22, Z
    1244:	68 7f       	andi	r22, 0xF8	; 248
    1246:	68 2b       	or	r22, r24
    1248:	80 e4       	ldi	r24, 0x40	; 64
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CCPWrite>
    1250:	f8 01       	movw	r30, r16
    1252:	80 81       	ld	r24, Z
    1254:	8c 23       	and	r24, r28
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    125e:	20 91 56 00 	lds	r18, 0x0056	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
    1262:	38 2f       	mov	r19, r24
    1264:	98 2f       	mov	r25, r24
    1266:	90 95       	com	r25
    1268:	92 23       	and	r25, r18
    126a:	61 11       	cpse	r22, r1
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <CLKSYS_AutoCalibration_Enable+0x12>
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	93 2b       	or	r25, r19
    1272:	90 93 56 00 	sts	0x0056, r25	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	31 f4       	brne	.+12     	; 0x1286 <CLKSYS_AutoCalibration_Enable+0x28>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    127a:	e8 e6       	ldi	r30, 0x68	; 104
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	80 83       	st	Z, r24
    1284:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	29 f4       	brne	.+10     	; 0x1294 <CLKSYS_AutoCalibration_Enable+0x36>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    128a:	e0 e6       	ldi	r30, 0x60	; 96
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	80 83       	st	Z, r24
    1294:	08 95       	ret

00001296 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    1296:	ef 92       	push	r14
    1298:	0f 93       	push	r16
    129a:	fc 01       	movw	r30, r24
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    129c:	0e 29       	or	r16, r14
    129e:	44 23       	and	r20, r20
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <PORT_ConfigurePins+0x10>
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <PORT_ConfigurePins+0x12>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 2b       	or	r16, r24
    12aa:	22 23       	and	r18, r18
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <PORT_ConfigurePins+0x1c>
    12ae:	80 e4       	ldi	r24, 0x40	; 64
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <PORT_ConfigurePins+0x1e>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	08 2b       	or	r16, r24
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    12b6:	9f b7       	in	r25, 0x3f	; 63

	cli();
    12b8:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    12ba:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	port->PIN0CTRL = temp;
    12be:	00 8b       	std	Z+16, r16	; 0x10

	/* Restore status register. */
	SREG = sreg;
    12c0:	9f bf       	out	0x3f, r25	; 63
}
    12c2:	0f 91       	pop	r16
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <serial_init>:

USART_data_t 	usart0_data; // RD1/TD1

void serial_init(void) {
	// PC3 (TXD0) as output.
	PORTC.DIRSET   = PIN3_bm;
    12c8:	e0 e4       	ldi	r30, 0x40	; 64
    12ca:	f6 e0       	ldi	r31, 0x06	; 6
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	81 83       	std	Z+1, r24	; 0x01
	// PC2 (RXD0) as input.
	PORTC.DIRCLR   = PIN2_bm;
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	82 83       	std	Z+2, r24	; 0x02

	USART_InterruptDriver_Initialize( &usart0_data, &usart0, USART_DREINTLVL_LO_gc);
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	60 ea       	ldi	r22, 0xA0	; 160
    12d8:	78 e0       	ldi	r23, 0x08	; 8
    12da:	8f e9       	ldi	r24, 0x9F	; 159
    12dc:	93 e3       	ldi	r25, 0x33	; 51
    12de:	0e 94 fe 09 	call	0x13fc	; 0x13fc <USART_InterruptDriver_Initialize>

	// 8 Data bits, No Parity, 2 Stop bits.
	USART_Format_Set( usart0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
    12e2:	e0 91 9f 33 	lds	r30, 0x339F	; 0x80339f <usart0_data>
    12e6:	f0 91 a0 33 	lds	r31, 0x33A0	; 0x8033a0 <usart0_data+0x1>
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	85 83       	std	Z+5, r24	; 0x05

	// Enable RXC interrupt.
	USART_RxdInterruptLevel_Set( usart0_data.usart, USART_RXCINTLVL_LO_gc);
    12ee:	83 81       	ldd	r24, Z+3	; 0x03
    12f0:	8f 7c       	andi	r24, 0xCF	; 207
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	83 83       	std	Z+3, r24	; 0x03
	//USART_TxdInterruptLevel_Set( usart0_data.usart, USART_TXCINTLVL_LO_gc);

	USART_Baudrate_Set( &usart0, SR_BAUD_9600_V , 0 );
    12f6:	a0 ea       	ldi	r26, 0xA0	; 160
    12f8:	b8 e0       	ldi	r27, 0x08	; 8
    12fa:	8f ec       	ldi	r24, 0xCF	; 207
    12fc:	16 96       	adiw	r26, 0x06	; 6
    12fe:	8c 93       	st	X, r24
    1300:	16 97       	sbiw	r26, 0x06	; 6
    1302:	17 96       	adiw	r26, 0x07	; 7
    1304:	1c 92       	st	X, r1

	// Enable both RX and TX.
	USART_Rx_Enable( usart0_data.usart );
    1306:	84 81       	ldd	r24, Z+4	; 0x04
    1308:	80 61       	ori	r24, 0x10	; 16
    130a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable( usart0_data.usart );
    130c:	84 81       	ldd	r24, Z+4	; 0x04
    130e:	88 60       	ori	r24, 0x08	; 8
    1310:	84 83       	std	Z+4, r24	; 0x04
    1312:	08 95       	ret

00001314 <serial_send_string>:

	/* Enable PMIC interrupt level low. */
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; i < strlen(str); i++)
    131e:	c0 e0       	ldi	r28, 0x00	; 0
    1320:	d0 e0       	ldi	r29, 0x00	; 0
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <serial_send_string+0x22>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
    1324:	f8 01       	movw	r30, r16
    1326:	ec 0f       	add	r30, r28
    1328:	fd 1f       	adc	r31, r29
    132a:	60 81       	ld	r22, Z
    132c:	8f e9       	ldi	r24, 0x9F	; 159
    132e:	93 e3       	ldi	r25, 0x33	; 51
    1330:	0e 94 18 0a 	call	0x1430	; 0x1430 <USART_TXBuffer_PutByte>
	//PMIC.CTRL |= PMIC_LOLVLEX_bm;
}

void serial_send_string(char *str) {
	int i;
	for (i = 0; i < strlen(str); i++)
    1334:	21 96       	adiw	r28, 0x01	; 1
    1336:	f8 01       	movw	r30, r16
    1338:	01 90       	ld	r0, Z+
    133a:	00 20       	and	r0, r0
    133c:	e9 f7       	brne	.-6      	; 0x1338 <serial_send_string+0x24>
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	e0 1b       	sub	r30, r16
    1342:	f1 0b       	sbc	r31, r17
    1344:	ce 17       	cp	r28, r30
    1346:	df 07       	cpc	r29, r31
    1348:	68 f3       	brcs	.-38     	; 0x1324 <serial_send_string+0x10>
		USART_TXBuffer_PutByte( &usart0_data, (uint8_t)str[i]);
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <__vector_25>:

void USARTC0_RXC_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_RXC_vect (void)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	0b b6       	in	r0, 0x3b	; 59
    1360:	0f 92       	push	r0
    1362:	2f 93       	push	r18
    1364:	3f 93       	push	r19
    1366:	4f 93       	push	r20
    1368:	5f 93       	push	r21
    136a:	6f 93       	push	r22
    136c:	7f 93       	push	r23
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	af 93       	push	r26
    1374:	bf 93       	push	r27
    1376:	ef 93       	push	r30
    1378:	ff 93       	push	r31
	USART_RXComplete( &usart0_data );
    137a:	8f e9       	ldi	r24, 0x9F	; 159
    137c:	93 e3       	ldi	r25, 0x33	; 51
    137e:	0e 94 38 0a 	call	0x1470	; 0x1470 <USART_RXComplete>
}
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0b be       	out	0x3b, r0	; 59
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_26>:

void USARTC0_DRE_vect (void) __attribute__ ((signal,__INTR_ATTRS));
void USARTC0_DRE_vect (void)
{
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	0b b6       	in	r0, 0x3b	; 59
    13b4:	0f 92       	push	r0
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
	USART_DataRegEmpty( &usart0_data );
    13ce:	8f e9       	ldi	r24, 0x9F	; 159
    13d0:	93 e3       	ldi	r25, 0x33	; 51
    13d2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <USART_DataRegEmpty>
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0b be       	out	0x3b, r0	; 59
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
    13fc:	fc 01       	movw	r30, r24
    13fe:	60 83       	st	Z, r22
    1400:	71 83       	std	Z+1, r23	; 0x01
    1402:	42 83       	std	Z+2, r20	; 0x02
    1404:	ec 5f       	subi	r30, 0xFC	; 252
    1406:	fd 4f       	sbci	r31, 0xFD	; 253
    1408:	10 82       	st	Z, r1
    140a:	31 97       	sbiw	r30, 0x01	; 1
    140c:	10 82       	st	Z, r1
    140e:	33 96       	adiw	r30, 0x03	; 3
    1410:	10 82       	st	Z, r1
    1412:	31 97       	sbiw	r30, 0x01	; 1
    1414:	10 82       	st	Z, r1
    1416:	08 95       	ret

00001418 <USART_TXBuffer_FreeSpace>:
    1418:	fc 01       	movw	r30, r24
    141a:	eb 5f       	subi	r30, 0xFB	; 251
    141c:	fd 4f       	sbci	r31, 0xFD	; 253
    141e:	20 81       	ld	r18, Z
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	31 96       	adiw	r30, 0x01	; 1
    1424:	90 81       	ld	r25, Z
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	29 13       	cpse	r18, r25
    142a:	01 c0       	rjmp	.+2      	; 0x142e <USART_TXBuffer_FreeSpace+0x16>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret

00001430 <USART_TXBuffer_PutByte>:
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ec 01       	movw	r28, r24
    1438:	16 2f       	mov	r17, r22
    143a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <USART_TXBuffer_FreeSpace>
    143e:	88 23       	and	r24, r24
    1440:	99 f0       	breq	.+38     	; 0x1468 <USART_TXBuffer_PutByte+0x38>
    1442:	de 01       	movw	r26, r28
    1444:	ab 5f       	subi	r26, 0xFB	; 251
    1446:	bd 4f       	sbci	r27, 0xFD	; 253
    1448:	9c 91       	ld	r25, X
    144a:	fe 01       	movw	r30, r28
    144c:	e9 0f       	add	r30, r25
    144e:	f1 1d       	adc	r31, r1
    1450:	ed 5f       	subi	r30, 0xFD	; 253
    1452:	fe 4f       	sbci	r31, 0xFE	; 254
    1454:	10 83       	st	Z, r17
    1456:	9f 5f       	subi	r25, 0xFF	; 255
    1458:	9c 93       	st	X, r25
    145a:	e8 81       	ld	r30, Y
    145c:	f9 81       	ldd	r31, Y+1	; 0x01
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	2a 81       	ldd	r18, Y+2	; 0x02
    1462:	9c 7f       	andi	r25, 0xFC	; 252
    1464:	92 2b       	or	r25, r18
    1466:	93 83       	std	Z+3, r25	; 0x03
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	08 95       	ret

00001470 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1470:	fc 01       	movw	r30, r24
    1472:	ed 5f       	subi	r30, 0xFD	; 253
    1474:	fd 4f       	sbci	r31, 0xFD	; 253
    1476:	20 81       	ld	r18, Z
    1478:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    147a:	31 96       	adiw	r30, 0x01	; 1
    147c:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    147e:	dc 01       	movw	r26, r24
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	11 97       	sbiw	r26, 0x01	; 1
    1486:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    1488:	23 17       	cp	r18, r19
    148a:	59 f0       	breq	.+22     	; 0x14a2 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    148c:	fc 01       	movw	r30, r24
    148e:	ed 5f       	subi	r30, 0xFD	; 253
    1490:	fd 4f       	sbci	r31, 0xFD	; 253
    1492:	30 81       	ld	r19, Z
    1494:	a3 0f       	add	r26, r19
    1496:	b1 1d       	adc	r27, r1
    1498:	13 96       	adiw	r26, 0x03	; 3
    149a:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    149c:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    14a4:	08 95       	ret

000014a6 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    14aa:	fc 01       	movw	r30, r24
    14ac:	ea 5f       	subi	r30, 0xFA	; 250
    14ae:	fd 4f       	sbci	r31, 0xFD	; 253
    14b0:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    14b2:	31 97       	sbiw	r30, 0x01	; 1
    14b4:	20 81       	ld	r18, Z
    14b6:	32 13       	cpse	r19, r18
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    14ba:	dc 01       	movw	r26, r24
    14bc:	ed 91       	ld	r30, X+
    14be:	fc 91       	ld	r31, X
    14c0:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    14c2:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    14c4:	83 83       	std	Z+3, r24	; 0x03
    14c6:	11 c0       	rjmp	.+34     	; 0x14ea <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    14c8:	fc 01       	movw	r30, r24
    14ca:	ea 5f       	subi	r30, 0xFA	; 250
    14cc:	fd 4f       	sbci	r31, 0xFD	; 253
    14ce:	20 81       	ld	r18, Z
    14d0:	dc 01       	movw	r26, r24
    14d2:	a2 0f       	add	r26, r18
    14d4:	b1 1d       	adc	r27, r1
    14d6:	ad 5f       	subi	r26, 0xFD	; 253
    14d8:	be 4f       	sbci	r27, 0xFE	; 254
    14da:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    14dc:	ec 01       	movw	r28, r24
    14de:	a8 81       	ld	r26, Y
    14e0:	b9 81       	ldd	r27, Y+1	; 0x01
    14e2:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	80 83       	st	Z, r24
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <main>:
#include "unittest.h"
#endif

int main(void)
{
	bios_init();
    14f0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <bios_init>
	kernel_init();
    14f4:	0e 94 25 04 	call	0x84a	; 0x84a <kernel_init>
	#if TEST_MODULES
		do_tests();
    14f8:	0e 94 a7 0c 	call	0x194e	; 0x194e <do_tests>
	#endif
	kernel_no_return();
    14fc:	0e 94 7e 07 	call	0xefc	; 0xefc <kernel_no_return>
}
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	08 95       	ret

00001506 <timer_set>:
 #define maxTimerVal ((uint32_t)(4294967295 / TIMER_PERIOD)) * TIMER_PERIOD

 uint32_t calc_time_elapsed(Timer *timer);

 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
    1506:	fc 01       	movw	r30, r24
    1508:	42 83       	std	Z+2, r20	; 0x02
    150a:	53 83       	std	Z+3, r21	; 0x03
	timer->start = current_ms;
    150c:	40 91 a6 35 	lds	r20, 0x35A6	; 0x8035a6 <current_ms>
    1510:	50 91 a7 35 	lds	r21, 0x35A7	; 0x8035a7 <current_ms+0x1>
    1514:	60 91 a8 35 	lds	r22, 0x35A8	; 0x8035a8 <current_ms+0x2>
    1518:	70 91 a9 35 	lds	r23, 0x35A9	; 0x8035a9 <current_ms+0x3>
    151c:	40 83       	st	Z, r20
    151e:	51 83       	std	Z+1, r21	; 0x01
    1520:	08 95       	ret

00001522 <calc_time_elapsed>:
	if (timer->interval > elapsedTime)
		return timer->interval - elapsedTime;
	return 0;
 }

 uint32_t calc_time_elapsed(Timer *timer) {
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	fc 01       	movw	r30, r24
	uint32_t curMs = current_ms;
    1528:	80 91 a6 35 	lds	r24, 0x35A6	; 0x8035a6 <current_ms>
    152c:	90 91 a7 35 	lds	r25, 0x35A7	; 0x8035a7 <current_ms+0x1>
    1530:	a0 91 a8 35 	lds	r26, 0x35A8	; 0x8035a8 <current_ms+0x2>
    1534:	b0 91 a9 35 	lds	r27, 0x35A9	; 0x8035a9 <current_ms+0x3>
	uint32_t elapsedTime;

	if (curMs >= timer->start) // timer has not wrapped around
    1538:	00 81       	ld	r16, Z
    153a:	11 81       	ldd	r17, Z+1	; 0x01
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	80 17       	cp	r24, r16
    1542:	91 07       	cpc	r25, r17
    1544:	a2 07       	cpc	r26, r18
    1546:	b3 07       	cpc	r27, r19
    1548:	38 f0       	brcs	.+14     	; 0x1558 <calc_time_elapsed+0x36>
		elapsedTime = curMs - timer->start;
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	60 1b       	sub	r22, r16
    1550:	71 0b       	sbc	r23, r17
    1552:	82 0b       	sbc	r24, r18
    1554:	93 0b       	sbc	r25, r19
    1556:	0a c0       	rjmp	.+20     	; 0x156c <calc_time_elapsed+0x4a>
	else // timer has wrapped around
		elapsedTime = maxTimerVal - (timer->start - curMs);
    1558:	80 1b       	sub	r24, r16
    155a:	91 0b       	sbc	r25, r17
    155c:	a2 0b       	sbc	r26, r18
    155e:	b3 0b       	sbc	r27, r19
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	64 53       	subi	r22, 0x34	; 52
    1566:	73 4f       	sbci	r23, 0xF3	; 243
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255

	return elapsedTime;
 }
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <timer_has_expired>:
 void timer_set(Timer *timer, uint32_t milliseconds) {
	timer->interval = milliseconds;
	timer->start = current_ms;
 }

 bool timer_has_expired(Timer *timer) {
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
	uint32_t elapsedTime = calc_time_elapsed(timer);
    1580:	0e 94 91 0a 	call	0x1522	; 0x1522 <calc_time_elapsed>
	return elapsedTime >= timer->interval;
    1584:	4a 81       	ldd	r20, Y+2	; 0x02
    1586:	5b 81       	ldd	r21, Y+3	; 0x03
    1588:	6a 01       	movw	r12, r20
    158a:	e1 2c       	mov	r14, r1
    158c:	f1 2c       	mov	r15, r1
    158e:	21 e0       	ldi	r18, 0x01	; 1
    1590:	6c 15       	cp	r22, r12
    1592:	7d 05       	cpc	r23, r13
    1594:	8e 05       	cpc	r24, r14
    1596:	9f 05       	cpc	r25, r15
    1598:	08 f4       	brcc	.+2      	; 0x159c <timer_has_expired+0x2a>
    159a:	20 e0       	ldi	r18, 0x00	; 0
 }
    159c:	82 2f       	mov	r24, r18
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	08 95       	ret

000015ac <timer_time_remaining>:

 uint32_t timer_time_remaining(Timer *timer) {
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
	 uint32_t elapsedTime = calc_time_elapsed(timer);
    15be:	0e 94 91 0a 	call	0x1522	; 0x1522 <calc_time_elapsed>

	if (timer->interval > elapsedTime)
    15c2:	2a 81       	ldd	r18, Y+2	; 0x02
    15c4:	3b 81       	ldd	r19, Y+3	; 0x03
    15c6:	89 01       	movw	r16, r18
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	60 17       	cp	r22, r16
    15ce:	71 07       	cpc	r23, r17
    15d0:	82 07       	cpc	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	48 f4       	brcc	.+18     	; 0x15e8 <timer_time_remaining+0x3c>
		return timer->interval - elapsedTime;
    15d6:	68 01       	movw	r12, r16
    15d8:	79 01       	movw	r14, r18
    15da:	c6 1a       	sub	r12, r22
    15dc:	d7 0a       	sbc	r13, r23
    15de:	e8 0a       	sbc	r14, r24
    15e0:	f9 0a       	sbc	r15, r25
    15e2:	c7 01       	movw	r24, r14
    15e4:	b6 01       	movw	r22, r12
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <timer_time_remaining+0x42>
	return 0;
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	cb 01       	movw	r24, r22
 }
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	08 95       	ret

00001600 <onTimerTick>:

	return elapsedTime;
 }

 void onTimerTick(void) {
	if (++timerVal >= maxTimerVal)
    1600:	80 91 aa 35 	lds	r24, 0x35AA	; 0x8035aa <timerVal>
    1604:	90 91 ab 35 	lds	r25, 0x35AB	; 0x8035ab <timerVal+0x1>
    1608:	a0 91 ac 35 	lds	r26, 0x35AC	; 0x8035ac <timerVal+0x2>
    160c:	b0 91 ad 35 	lds	r27, 0x35AD	; 0x8035ad <timerVal+0x3>
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	a1 1d       	adc	r26, r1
    1614:	b1 1d       	adc	r27, r1
    1616:	80 93 aa 35 	sts	0x35AA, r24	; 0x8035aa <timerVal>
    161a:	90 93 ab 35 	sts	0x35AB, r25	; 0x8035ab <timerVal+0x1>
    161e:	a0 93 ac 35 	sts	0x35AC, r26	; 0x8035ac <timerVal+0x2>
    1622:	b0 93 ad 35 	sts	0x35AD, r27	; 0x8035ad <timerVal+0x3>
    1626:	8c 3c       	cpi	r24, 0xCC	; 204
    1628:	9c 40       	sbci	r25, 0x0C	; 12
    162a:	a1 05       	cpc	r26, r1
    162c:	b1 05       	cpc	r27, r1
    162e:	40 f0       	brcs	.+16     	; 0x1640 <onTimerTick+0x40>
		timerVal = 0;
    1630:	10 92 aa 35 	sts	0x35AA, r1	; 0x8035aa <timerVal>
    1634:	10 92 ab 35 	sts	0x35AB, r1	; 0x8035ab <timerVal+0x1>
    1638:	10 92 ac 35 	sts	0x35AC, r1	; 0x8035ac <timerVal+0x2>
    163c:	10 92 ad 35 	sts	0x35AD, r1	; 0x8035ad <timerVal+0x3>
	current_ms = timerVal * TIMER_MS;
    1640:	20 91 aa 35 	lds	r18, 0x35AA	; 0x8035aa <timerVal>
    1644:	30 91 ab 35 	lds	r19, 0x35AB	; 0x8035ab <timerVal+0x1>
    1648:	40 91 ac 35 	lds	r20, 0x35AC	; 0x8035ac <timerVal+0x2>
    164c:	50 91 ad 35 	lds	r21, 0x35AD	; 0x8035ad <timerVal+0x3>
    1650:	a2 e3       	ldi	r26, 0x32	; 50
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	0e 94 bd 0c 	call	0x197a	; 0x197a <__muluhisi3>
    1658:	60 93 a6 35 	sts	0x35A6, r22	; 0x8035a6 <current_ms>
    165c:	70 93 a7 35 	sts	0x35A7, r23	; 0x8035a7 <current_ms+0x1>
    1660:	80 93 a8 35 	sts	0x35A8, r24	; 0x8035a8 <current_ms+0x2>
    1664:	90 93 a9 35 	sts	0x35A9, r25	; 0x8035a9 <current_ms+0x3>
    1668:	08 95       	ret

0000166a <test_tick>:
}

void test_mem_manager(void) {
	mem_manager_test();
	mem_manager_test2();
	testsPassed++;
    166a:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <tick_count>
    166e:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <tick_count+0x1>
    1672:	05 97       	sbiw	r24, 0x05	; 5
    1674:	d4 f3       	brlt	.-12     	; 0x166a <test_tick>
    1676:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <tick_count>
    167a:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <tick_count+0x1>
    167e:	05 97       	sbiw	r24, 0x05	; 5
    1680:	59 f0       	breq	.+22     	; 0x1698 <test_tick+0x2e>
    1682:	27 e6       	ldi	r18, 0x67	; 103
    1684:	31 e2       	ldi	r19, 0x21	; 33
    1686:	42 e8       	ldi	r20, 0x82	; 130
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	67 e7       	ldi	r22, 0x77	; 119
    168c:	71 e2       	ldi	r23, 0x21	; 33
    168e:	8e ec       	ldi	r24, 0xCE	; 206
    1690:	92 e2       	ldi	r25, 0x22	; 34
    1692:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
    1696:	ff cf       	rjmp	.-2      	; 0x1696 <test_tick+0x2c>
    1698:	80 91 ae 35 	lds	r24, 0x35AE	; 0x8035ae <testsPassed>
    169c:	90 91 af 35 	lds	r25, 0x35AF	; 0x8035af <testsPassed+0x1>
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	80 93 ae 35 	sts	0x35AE, r24	; 0x8035ae <testsPassed>
    16a6:	90 93 af 35 	sts	0x35AF, r25	; 0x8035af <testsPassed+0x1>
    16aa:	08 95       	ret

000016ac <test_create_task>:
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <test_create_task+0x6>
    16b2:	1f 92       	push	r1
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	0e 94 77 07 	call	0xeee	; 0xeee <kernel_enable_scheduler>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	31 e0       	ldi	r19, 0x01	; 1
    16c0:	47 e8       	ldi	r20, 0x87	; 135
    16c2:	51 e2       	ldi	r21, 0x21	; 33
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	85 e3       	ldi	r24, 0x35	; 53
    16c8:	9c e0       	ldi	r25, 0x0C	; 12
    16ca:	0e 94 c3 04 	call	0x986	; 0x986 <kernel_create_task>
    16ce:	89 2b       	or	r24, r25
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <test_create_task+0x3c>
    16d2:	20 e7       	ldi	r18, 0x70	; 112
    16d4:	30 e2       	ldi	r19, 0x20	; 32
    16d6:	48 e4       	ldi	r20, 0x48	; 72
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	67 e7       	ldi	r22, 0x77	; 119
    16dc:	71 e2       	ldi	r23, 0x21	; 33
    16de:	83 ee       	ldi	r24, 0xE3	; 227
    16e0:	92 e2       	ldi	r25, 0x22	; 34
    16e2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
    16e6:	ff cf       	rjmp	.-2      	; 0x16e6 <test_create_task+0x3a>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	41 e9       	ldi	r20, 0x91	; 145
    16ee:	51 e2       	ldi	r21, 0x21	; 33
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	85 ec       	ldi	r24, 0xC5	; 197
    16f4:	9b e0       	ldi	r25, 0x0B	; 11
    16f6:	0e 94 c3 04 	call	0x986	; 0x986 <kernel_create_task>
    16fa:	80 91 b2 35 	lds	r24, 0x35B2	; 0x8035b2 <threadFunctionCalled>
    16fe:	88 23       	and	r24, r24
    1700:	e1 f3       	breq	.-8      	; 0x16fa <test_create_task+0x4e>
    1702:	48 ee       	ldi	r20, 0xE8	; 232
    1704:	53 e0       	ldi	r21, 0x03	; 3
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    171a:	88 23       	and	r24, r24
    171c:	d1 f3       	breq	.-12     	; 0x1712 <test_create_task+0x66>
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	31 e0       	ldi	r19, 0x01	; 1
    1722:	43 ea       	ldi	r20, 0xA3	; 163
    1724:	51 e2       	ldi	r21, 0x21	; 33
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	83 ee       	ldi	r24, 0xE3	; 227
    172a:	9b e0       	ldi	r25, 0x0B	; 11
    172c:	0e 94 c3 04 	call	0x986	; 0x986 <kernel_create_task>
    1730:	80 91 ae 35 	lds	r24, 0x35AE	; 0x8035ae <testsPassed>
    1734:	90 91 af 35 	lds	r25, 0x35AF	; 0x8035af <testsPassed+0x1>
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	80 93 ae 35 	sts	0x35AE, r24	; 0x8035ae <testsPassed>
    173e:	90 93 af 35 	sts	0x35AF, r25	; 0x8035af <testsPassed+0x1>
    1742:	24 96       	adiw	r28, 0x04	; 4
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <_task_test_func2>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	00 d0       	rcall	.+0      	; 0x1754 <_task_test_func2+0x6>
    1754:	1f 92       	push	r1
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	48 ee       	ldi	r20, 0xE8	; 232
    175c:	53 e0       	ldi	r21, 0x03	; 3
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    1772:	88 23       	and	r24, r24
    1774:	d1 f3       	breq	.-12     	; 0x176a <_task_test_func2+0x1c>
    1776:	8d ea       	ldi	r24, 0xAD	; 173
    1778:	91 e2       	ldi	r25, 0x21	; 33
    177a:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    177e:	24 96       	adiw	r28, 0x04	; 4
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <_task_test_func3>:
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	00 d0       	rcall	.+0      	; 0x1790 <_task_test_func3+0x6>
    1790:	1f 92       	push	r1
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	48 ec       	ldi	r20, 0xC8	; 200
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    17ae:	88 23       	and	r24, r24
    17b0:	d1 f3       	breq	.-12     	; 0x17a6 <_task_test_func3+0x1c>
    17b2:	82 ed       	ldi	r24, 0xD2	; 210
    17b4:	91 e2       	ldi	r25, 0x21	; 33
    17b6:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    17ba:	24 96       	adiw	r28, 0x04	; 4
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <_task_test_post_func>:
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <_task_test_post_func+0x6>
    17cc:	1f 92       	push	r1
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	48 ec       	ldi	r20, 0xC8	; 200
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    17ea:	88 23       	and	r24, r24
    17ec:	d1 f3       	breq	.-12     	; 0x17e2 <_task_test_post_func+0x1c>
    17ee:	8d e0       	ldi	r24, 0x0D	; 13
    17f0:	92 e2       	ldi	r25, 0x22	; 34
    17f2:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    17f6:	24 96       	adiw	r28, 0x04	; 4
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <test_timer>:
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	00 d0       	rcall	.+0      	; 0x1808 <test_timer+0x6>
    1808:	1f 92       	push	r1
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	44 ef       	ldi	r20, 0xF4	; 244
    1810:	51 e0       	ldi	r21, 0x01	; 1
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    1826:	88 23       	and	r24, r24
    1828:	d1 f3       	breq	.-12     	; 0x181e <test_timer+0x1c>
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    1832:	81 11       	cpse	r24, r1
    1834:	0b c0       	rjmp	.+22     	; 0x184c <test_timer+0x4a>
    1836:	22 e3       	ldi	r18, 0x32	; 50
    1838:	32 e2       	ldi	r19, 0x22	; 34
    183a:	4b e7       	ldi	r20, 0x7B	; 123
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	67 e7       	ldi	r22, 0x77	; 119
    1840:	71 e2       	ldi	r23, 0x21	; 33
    1842:	88 ed       	ldi	r24, 0xD8	; 216
    1844:	92 e2       	ldi	r25, 0x22	; 34
    1846:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__m_assert>
    184a:	ff cf       	rjmp	.-2      	; 0x184a <test_timer+0x48>
    184c:	80 91 ae 35 	lds	r24, 0x35AE	; 0x8035ae <testsPassed>
    1850:	90 91 af 35 	lds	r25, 0x35AF	; 0x8035af <testsPassed+0x1>
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	80 93 ae 35 	sts	0x35AE, r24	; 0x8035ae <testsPassed>
    185a:	90 93 af 35 	sts	0x35AF, r25	; 0x8035af <testsPassed+0x1>
    185e:	24 96       	adiw	r28, 0x04	; 4
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <_task_test_func1>:
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	00 d0       	rcall	.+0      	; 0x1870 <_task_test_func1+0x6>
    1870:	1f 92       	push	r1
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	48 ee       	ldi	r20, 0xE8	; 232
    1878:	53 e0       	ldi	r21, 0x03	; 3
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 83 0a 	call	0x1506	; 0x1506 <timer_set>
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <_task_test_func1+0x26>
    1888:	86 e9       	ldi	r24, 0x96	; 150
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 76 06 	call	0xcec	; 0xcec <kernel_yield_from_task>
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	0e 94 b9 0a 	call	0x1572	; 0x1572 <timer_has_expired>
    1898:	88 23       	and	r24, r24
    189a:	b1 f3       	breq	.-20     	; 0x1888 <_task_test_func1+0x1e>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	31 e0       	ldi	r19, 0x01	; 1
    18a0:	4c e4       	ldi	r20, 0x4C	; 76
    18a2:	52 e2       	ldi	r21, 0x22	; 34
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	87 ea       	ldi	r24, 0xA7	; 167
    18a8:	9b e0       	ldi	r25, 0x0B	; 11
    18aa:	0e 94 c3 04 	call	0x986	; 0x986 <kernel_create_task>
    18ae:	88 e5       	ldi	r24, 0x58	; 88
    18b0:	92 e2       	ldi	r25, 0x22	; 34
    18b2:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 b2 35 	sts	0x35B2, r24	; 0x8035b2 <threadFunctionCalled>
    18bc:	24 96       	adiw	r28, 0x04	; 4
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <test_init>:
    18c8:	89 ed       	ldi	r24, 0xD9	; 217
    18ca:	90 e2       	ldi	r25, 0x20	; 32
    18cc:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    18d0:	08 95       	ret

000018d2 <test_tick_callback>:
	m_assert(tick_count == 5);
	testsPassed++;
}

void test_tick_callback(void) {
	tick_count++;
    18d2:	80 91 b0 35 	lds	r24, 0x35B0	; 0x8035b0 <tick_count>
    18d6:	90 91 b1 35 	lds	r25, 0x35B1	; 0x8035b1 <tick_count+0x1>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	80 93 b0 35 	sts	0x35B0, r24	; 0x8035b0 <tick_count>
    18e0:	90 93 b1 35 	sts	0x35B1, r25	; 0x8035b1 <tick_count+0x1>
	(&PORTB)->OUT ^= PIN6_bm;
    18e4:	e0 e2       	ldi	r30, 0x20	; 32
    18e6:	f6 e0       	ldi	r31, 0x06	; 6
    18e8:	94 81       	ldd	r25, Z+4	; 0x04
    18ea:	80 e4       	ldi	r24, 0x40	; 64
    18ec:	89 27       	eor	r24, r25
    18ee:	84 83       	std	Z+4, r24	; 0x04
    18f0:	08 95       	ret

000018f2 <test_print_results>:
}

void test_print_results(void) {
	serial_send_string("\n\rTests finished\r\n");
    18f2:	84 e9       	ldi	r24, 0x94	; 148
    18f4:	92 e2       	ldi	r25, 0x22	; 34
    18f6:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
	sprintf(gStrBuf, "Passed: %d\n\rFailed: %d\n\r\n\rResult: %s\n\r", testsPassed, NUM_TESTS - testsPassed, (testsPassed != NUM_TESTS ? "Fail" : "Pass"));
    18fa:	80 91 ae 35 	lds	r24, 0x35AE	; 0x8035ae <testsPassed>
    18fe:	90 91 af 35 	lds	r25, 0x35AF	; 0x8035af <testsPassed+0x1>
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	19 f0       	breq	.+6      	; 0x190e <test_print_results+0x1c>
    1908:	2a e8       	ldi	r18, 0x8A	; 138
    190a:	32 e2       	ldi	r19, 0x22	; 34
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <test_print_results+0x20>
    190e:	2f e8       	ldi	r18, 0x8F	; 143
    1910:	32 e2       	ldi	r19, 0x22	; 34
    1912:	3f 93       	push	r19
    1914:	2f 93       	push	r18
    1916:	23 e0       	ldi	r18, 0x03	; 3
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	28 1b       	sub	r18, r24
    191c:	39 0b       	sbc	r19, r25
    191e:	3f 93       	push	r19
    1920:	2f 93       	push	r18
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	87 ea       	ldi	r24, 0xA7	; 167
    1928:	92 e2       	ldi	r25, 0x22	; 34
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	85 ef       	ldi	r24, 0xF5	; 245
    1930:	92 e3       	ldi	r25, 0x32	; 50
    1932:	9f 93       	push	r25
    1934:	8f 93       	push	r24
    1936:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <sprintf>
	serial_send_string(gStrBuf);
    193a:	85 ef       	ldi	r24, 0xF5	; 245
    193c:	92 e3       	ldi	r25, 0x32	; 50
    193e:	0e 94 8a 09 	call	0x1314	; 0x1314 <serial_send_string>
    1942:	8d b7       	in	r24, 0x3d	; 61
    1944:	9e b7       	in	r25, 0x3e	; 62
    1946:	0a 96       	adiw	r24, 0x0a	; 10
    1948:	8d bf       	out	0x3d, r24	; 61
    194a:	9e bf       	out	0x3e, r25	; 62
    194c:	08 95       	ret

0000194e <do_tests>:
void test_init(void);
void test_print_results(void);

#define NUM_TESTS sizeof(testList) / sizeof(*testList)

void do_tests(void) {
    194e:	cf 93       	push	r28
	uint8_t i;
	test_init();
    1950:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <test_init>

	for (i = 0; i < NUM_TESTS; i++)
    1954:	c0 e0       	ldi	r28, 0x00	; 0
    1956:	0b c0       	rjmp	.+22     	; 0x196e <do_tests+0x20>
		testList[i]();
    1958:	ec 2f       	mov	r30, r28
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	ea 5f       	subi	r30, 0xFA	; 250
    1962:	ff 4d       	sbci	r31, 0xDF	; 223
    1964:	01 90       	ld	r0, Z+
    1966:	f0 81       	ld	r31, Z
    1968:	e0 2d       	mov	r30, r0
    196a:	19 95       	eicall

void do_tests(void) {
	uint8_t i;
	test_init();

	for (i = 0; i < NUM_TESTS; i++)
    196c:	cf 5f       	subi	r28, 0xFF	; 255
    196e:	c3 30       	cpi	r28, 0x03	; 3
    1970:	98 f3       	brcs	.-26     	; 0x1958 <do_tests+0xa>
		testList[i]();

	test_print_results();
    1972:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <test_print_results>
}
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <__muluhisi3>:
    197a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__umulhisi3>
    197e:	a5 9f       	mul	r26, r21
    1980:	90 0d       	add	r25, r0
    1982:	b4 9f       	mul	r27, r20
    1984:	90 0d       	add	r25, r0
    1986:	a4 9f       	mul	r26, r20
    1988:	80 0d       	add	r24, r0
    198a:	91 1d       	adc	r25, r1
    198c:	11 24       	eor	r1, r1
    198e:	08 95       	ret

00001990 <__umulhisi3>:
    1990:	a2 9f       	mul	r26, r18
    1992:	b0 01       	movw	r22, r0
    1994:	b3 9f       	mul	r27, r19
    1996:	c0 01       	movw	r24, r0
    1998:	a3 9f       	mul	r26, r19
    199a:	70 0d       	add	r23, r0
    199c:	81 1d       	adc	r24, r1
    199e:	11 24       	eor	r1, r1
    19a0:	91 1d       	adc	r25, r1
    19a2:	b2 9f       	mul	r27, r18
    19a4:	70 0d       	add	r23, r0
    19a6:	81 1d       	adc	r24, r1
    19a8:	11 24       	eor	r1, r1
    19aa:	91 1d       	adc	r25, r1
    19ac:	08 95       	ret

000019ae <malloc>:
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	91 05       	cpc	r25, r1
    19ba:	10 f4       	brcc	.+4      	; 0x19c0 <malloc+0x12>
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	e0 91 b5 35 	lds	r30, 0x35B5	; 0x8035b5 <__flp>
    19c4:	f0 91 b6 35 	lds	r31, 0x35B6	; 0x8035b6 <__flp+0x1>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	a0 e0       	ldi	r26, 0x00	; 0
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	19 f1       	breq	.+70     	; 0x1a1a <malloc+0x6c>
    19d4:	40 81       	ld	r20, Z
    19d6:	51 81       	ldd	r21, Z+1	; 0x01
    19d8:	02 81       	ldd	r16, Z+2	; 0x02
    19da:	13 81       	ldd	r17, Z+3	; 0x03
    19dc:	48 17       	cp	r20, r24
    19de:	59 07       	cpc	r21, r25
    19e0:	c8 f0       	brcs	.+50     	; 0x1a14 <malloc+0x66>
    19e2:	84 17       	cp	r24, r20
    19e4:	95 07       	cpc	r25, r21
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <malloc+0x54>
    19e8:	10 97       	sbiw	r26, 0x00	; 0
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <malloc+0x4a>
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	0c 93       	st	X, r16
    19f0:	12 97       	sbiw	r26, 0x02	; 2
    19f2:	13 96       	adiw	r26, 0x03	; 3
    19f4:	1c 93       	st	X, r17
    19f6:	27 c0       	rjmp	.+78     	; 0x1a46 <malloc+0x98>
    19f8:	00 93 b5 35 	sts	0x35B5, r16	; 0x8035b5 <__flp>
    19fc:	10 93 b6 35 	sts	0x35B6, r17	; 0x8035b6 <__flp+0x1>
    1a00:	22 c0       	rjmp	.+68     	; 0x1a46 <malloc+0x98>
    1a02:	21 15       	cp	r18, r1
    1a04:	31 05       	cpc	r19, r1
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <malloc+0x60>
    1a08:	42 17       	cp	r20, r18
    1a0a:	53 07       	cpc	r21, r19
    1a0c:	18 f4       	brcc	.+6      	; 0x1a14 <malloc+0x66>
    1a0e:	9a 01       	movw	r18, r20
    1a10:	bd 01       	movw	r22, r26
    1a12:	ef 01       	movw	r28, r30
    1a14:	df 01       	movw	r26, r30
    1a16:	f8 01       	movw	r30, r16
    1a18:	db cf       	rjmp	.-74     	; 0x19d0 <malloc+0x22>
    1a1a:	21 15       	cp	r18, r1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	f9 f0       	breq	.+62     	; 0x1a5e <malloc+0xb0>
    1a20:	28 1b       	sub	r18, r24
    1a22:	39 0b       	sbc	r19, r25
    1a24:	24 30       	cpi	r18, 0x04	; 4
    1a26:	31 05       	cpc	r19, r1
    1a28:	80 f4       	brcc	.+32     	; 0x1a4a <malloc+0x9c>
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	61 15       	cp	r22, r1
    1a30:	71 05       	cpc	r23, r1
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <malloc+0x8e>
    1a34:	fb 01       	movw	r30, r22
    1a36:	82 83       	std	Z+2, r24	; 0x02
    1a38:	93 83       	std	Z+3, r25	; 0x03
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <malloc+0x96>
    1a3c:	80 93 b5 35 	sts	0x35B5, r24	; 0x8035b5 <__flp>
    1a40:	90 93 b6 35 	sts	0x35B6, r25	; 0x8035b6 <__flp+0x1>
    1a44:	fe 01       	movw	r30, r28
    1a46:	32 96       	adiw	r30, 0x02	; 2
    1a48:	44 c0       	rjmp	.+136    	; 0x1ad2 <malloc+0x124>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	81 93       	st	Z+, r24
    1a52:	91 93       	st	Z+, r25
    1a54:	22 50       	subi	r18, 0x02	; 2
    1a56:	31 09       	sbc	r19, r1
    1a58:	28 83       	st	Y, r18
    1a5a:	39 83       	std	Y+1, r19	; 0x01
    1a5c:	3a c0       	rjmp	.+116    	; 0x1ad2 <malloc+0x124>
    1a5e:	20 91 b3 35 	lds	r18, 0x35B3	; 0x8035b3 <__brkval>
    1a62:	30 91 b4 35 	lds	r19, 0x35B4	; 0x8035b4 <__brkval+0x1>
    1a66:	23 2b       	or	r18, r19
    1a68:	41 f4       	brne	.+16     	; 0x1a7a <malloc+0xcc>
    1a6a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1a6e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1a72:	20 93 b3 35 	sts	0x35B3, r18	; 0x8035b3 <__brkval>
    1a76:	30 93 b4 35 	sts	0x35B4, r19	; 0x8035b4 <__brkval+0x1>
    1a7a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1a7e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	41 f4       	brne	.+16     	; 0x1a98 <malloc+0xea>
    1a88:	2d b7       	in	r18, 0x3d	; 61
    1a8a:	3e b7       	in	r19, 0x3e	; 62
    1a8c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1a90:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1a94:	24 1b       	sub	r18, r20
    1a96:	35 0b       	sbc	r19, r21
    1a98:	e0 91 b3 35 	lds	r30, 0x35B3	; 0x8035b3 <__brkval>
    1a9c:	f0 91 b4 35 	lds	r31, 0x35B4	; 0x8035b4 <__brkval+0x1>
    1aa0:	e2 17       	cp	r30, r18
    1aa2:	f3 07       	cpc	r31, r19
    1aa4:	a0 f4       	brcc	.+40     	; 0x1ace <malloc+0x120>
    1aa6:	2e 1b       	sub	r18, r30
    1aa8:	3f 0b       	sbc	r19, r31
    1aaa:	28 17       	cp	r18, r24
    1aac:	39 07       	cpc	r19, r25
    1aae:	78 f0       	brcs	.+30     	; 0x1ace <malloc+0x120>
    1ab0:	ac 01       	movw	r20, r24
    1ab2:	4e 5f       	subi	r20, 0xFE	; 254
    1ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab6:	24 17       	cp	r18, r20
    1ab8:	35 07       	cpc	r19, r21
    1aba:	48 f0       	brcs	.+18     	; 0x1ace <malloc+0x120>
    1abc:	4e 0f       	add	r20, r30
    1abe:	5f 1f       	adc	r21, r31
    1ac0:	40 93 b3 35 	sts	0x35B3, r20	; 0x8035b3 <__brkval>
    1ac4:	50 93 b4 35 	sts	0x35B4, r21	; 0x8035b4 <__brkval+0x1>
    1ac8:	81 93       	st	Z+, r24
    1aca:	91 93       	st	Z+, r25
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <malloc+0x124>
    1ace:	e0 e0       	ldi	r30, 0x00	; 0
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <free>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <free+0xa>
    1ae6:	81 c0       	rjmp	.+258    	; 0x1bea <free+0x10c>
    1ae8:	fc 01       	movw	r30, r24
    1aea:	32 97       	sbiw	r30, 0x02	; 2
    1aec:	12 82       	std	Z+2, r1	; 0x02
    1aee:	13 82       	std	Z+3, r1	; 0x03
    1af0:	a0 91 b5 35 	lds	r26, 0x35B5	; 0x8035b5 <__flp>
    1af4:	b0 91 b6 35 	lds	r27, 0x35B6	; 0x8035b6 <__flp+0x1>
    1af8:	10 97       	sbiw	r26, 0x00	; 0
    1afa:	81 f4       	brne	.+32     	; 0x1b1c <free+0x3e>
    1afc:	20 81       	ld	r18, Z
    1afe:	31 81       	ldd	r19, Z+1	; 0x01
    1b00:	82 0f       	add	r24, r18
    1b02:	93 1f       	adc	r25, r19
    1b04:	20 91 b3 35 	lds	r18, 0x35B3	; 0x8035b3 <__brkval>
    1b08:	30 91 b4 35 	lds	r19, 0x35B4	; 0x8035b4 <__brkval+0x1>
    1b0c:	28 17       	cp	r18, r24
    1b0e:	39 07       	cpc	r19, r25
    1b10:	51 f5       	brne	.+84     	; 0x1b66 <free+0x88>
    1b12:	e0 93 b3 35 	sts	0x35B3, r30	; 0x8035b3 <__brkval>
    1b16:	f0 93 b4 35 	sts	0x35B4, r31	; 0x8035b4 <__brkval+0x1>
    1b1a:	67 c0       	rjmp	.+206    	; 0x1bea <free+0x10c>
    1b1c:	ed 01       	movw	r28, r26
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	ce 17       	cp	r28, r30
    1b24:	df 07       	cpc	r29, r31
    1b26:	40 f4       	brcc	.+16     	; 0x1b38 <free+0x5a>
    1b28:	4a 81       	ldd	r20, Y+2	; 0x02
    1b2a:	5b 81       	ldd	r21, Y+3	; 0x03
    1b2c:	9e 01       	movw	r18, r28
    1b2e:	41 15       	cp	r20, r1
    1b30:	51 05       	cpc	r21, r1
    1b32:	f1 f0       	breq	.+60     	; 0x1b70 <free+0x92>
    1b34:	ea 01       	movw	r28, r20
    1b36:	f5 cf       	rjmp	.-22     	; 0x1b22 <free+0x44>
    1b38:	c2 83       	std	Z+2, r28	; 0x02
    1b3a:	d3 83       	std	Z+3, r29	; 0x03
    1b3c:	40 81       	ld	r20, Z
    1b3e:	51 81       	ldd	r21, Z+1	; 0x01
    1b40:	84 0f       	add	r24, r20
    1b42:	95 1f       	adc	r25, r21
    1b44:	c8 17       	cp	r28, r24
    1b46:	d9 07       	cpc	r29, r25
    1b48:	59 f4       	brne	.+22     	; 0x1b60 <free+0x82>
    1b4a:	88 81       	ld	r24, Y
    1b4c:	99 81       	ldd	r25, Y+1	; 0x01
    1b4e:	84 0f       	add	r24, r20
    1b50:	95 1f       	adc	r25, r21
    1b52:	02 96       	adiw	r24, 0x02	; 2
    1b54:	80 83       	st	Z, r24
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	82 83       	std	Z+2, r24	; 0x02
    1b5e:	93 83       	std	Z+3, r25	; 0x03
    1b60:	21 15       	cp	r18, r1
    1b62:	31 05       	cpc	r19, r1
    1b64:	29 f4       	brne	.+10     	; 0x1b70 <free+0x92>
    1b66:	e0 93 b5 35 	sts	0x35B5, r30	; 0x8035b5 <__flp>
    1b6a:	f0 93 b6 35 	sts	0x35B6, r31	; 0x8035b6 <__flp+0x1>
    1b6e:	3d c0       	rjmp	.+122    	; 0x1bea <free+0x10c>
    1b70:	e9 01       	movw	r28, r18
    1b72:	ea 83       	std	Y+2, r30	; 0x02
    1b74:	fb 83       	std	Y+3, r31	; 0x03
    1b76:	49 91       	ld	r20, Y+
    1b78:	59 91       	ld	r21, Y+
    1b7a:	c4 0f       	add	r28, r20
    1b7c:	d5 1f       	adc	r29, r21
    1b7e:	ec 17       	cp	r30, r28
    1b80:	fd 07       	cpc	r31, r29
    1b82:	61 f4       	brne	.+24     	; 0x1b9c <free+0xbe>
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	84 0f       	add	r24, r20
    1b8a:	95 1f       	adc	r25, r21
    1b8c:	02 96       	adiw	r24, 0x02	; 2
    1b8e:	e9 01       	movw	r28, r18
    1b90:	88 83       	st	Y, r24
    1b92:	99 83       	std	Y+1, r25	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	9b 83       	std	Y+3, r25	; 0x03
    1b9c:	e0 e0       	ldi	r30, 0x00	; 0
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	8d 91       	ld	r24, X+
    1ba4:	9c 91       	ld	r25, X
    1ba6:	13 97       	sbiw	r26, 0x03	; 3
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <free+0xd4>
    1bac:	fd 01       	movw	r30, r26
    1bae:	dc 01       	movw	r26, r24
    1bb0:	f7 cf       	rjmp	.-18     	; 0x1ba0 <free+0xc2>
    1bb2:	8d 91       	ld	r24, X+
    1bb4:	9c 91       	ld	r25, X
    1bb6:	11 97       	sbiw	r26, 0x01	; 1
    1bb8:	9d 01       	movw	r18, r26
    1bba:	2e 5f       	subi	r18, 0xFE	; 254
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	82 0f       	add	r24, r18
    1bc0:	93 1f       	adc	r25, r19
    1bc2:	20 91 b3 35 	lds	r18, 0x35B3	; 0x8035b3 <__brkval>
    1bc6:	30 91 b4 35 	lds	r19, 0x35B4	; 0x8035b4 <__brkval+0x1>
    1bca:	28 17       	cp	r18, r24
    1bcc:	39 07       	cpc	r19, r25
    1bce:	69 f4       	brne	.+26     	; 0x1bea <free+0x10c>
    1bd0:	30 97       	sbiw	r30, 0x00	; 0
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <free+0x100>
    1bd4:	10 92 b5 35 	sts	0x35B5, r1	; 0x8035b5 <__flp>
    1bd8:	10 92 b6 35 	sts	0x35B6, r1	; 0x8035b6 <__flp+0x1>
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <free+0x104>
    1bde:	12 82       	std	Z+2, r1	; 0x02
    1be0:	13 82       	std	Z+3, r1	; 0x03
    1be2:	a0 93 b3 35 	sts	0x35B3, r26	; 0x8035b3 <__brkval>
    1be6:	b0 93 b4 35 	sts	0x35B4, r27	; 0x8035b4 <__brkval+0x1>
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <memcpy>:
    1bf0:	fb 01       	movw	r30, r22
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <memcpy+0xa>
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	0d 92       	st	X+, r0
    1bfa:	41 50       	subi	r20, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	d8 f7       	brcc	.-10     	; 0x1bf6 <memcpy+0x6>
    1c00:	08 95       	ret

00001c02 <memset>:
    1c02:	dc 01       	movw	r26, r24
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <memset+0x6>
    1c06:	6d 93       	st	X+, r22
    1c08:	41 50       	subi	r20, 0x01	; 1
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	e0 f7       	brcc	.-8      	; 0x1c06 <memset+0x4>
    1c0e:	08 95       	ret

00001c10 <strcpy>:
    1c10:	fb 01       	movw	r30, r22
    1c12:	dc 01       	movw	r26, r24
    1c14:	01 90       	ld	r0, Z+
    1c16:	0d 92       	st	X+, r0
    1c18:	00 20       	and	r0, r0
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <strcpy+0x4>
    1c1c:	08 95       	ret

00001c1e <sprintf>:
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0e 89       	ldd	r16, Y+22	; 0x16
    1c32:	1f 89       	ldd	r17, Y+23	; 0x17
    1c34:	86 e0       	ldi	r24, 0x06	; 6
    1c36:	8c 83       	std	Y+4, r24	; 0x04
    1c38:	09 83       	std	Y+1, r16	; 0x01
    1c3a:	1a 83       	std	Y+2, r17	; 0x02
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f e7       	ldi	r25, 0x7F	; 127
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	ae 01       	movw	r20, r28
    1c46:	46 5e       	subi	r20, 0xE6	; 230
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	68 8d       	ldd	r22, Y+24	; 0x18
    1c4c:	79 8d       	ldd	r23, Y+25	; 0x19
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <vfprintf>
    1c56:	ef 81       	ldd	r30, Y+7	; 0x07
    1c58:	f8 85       	ldd	r31, Y+8	; 0x08
    1c5a:	e0 0f       	add	r30, r16
    1c5c:	f1 1f       	adc	r31, r17
    1c5e:	10 82       	st	Z, r1
    1c60:	2e 96       	adiw	r28, 0x0e	; 14
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <vfprintf>:
    1c70:	2f 92       	push	r2
    1c72:	3f 92       	push	r3
    1c74:	4f 92       	push	r4
    1c76:	5f 92       	push	r5
    1c78:	6f 92       	push	r6
    1c7a:	7f 92       	push	r7
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2b 97       	sbiw	r28, 0x0b	; 11
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	6c 01       	movw	r12, r24
    1ca0:	7b 01       	movw	r14, r22
    1ca2:	8a 01       	movw	r16, r20
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	16 82       	std	Z+6, r1	; 0x06
    1ca8:	17 82       	std	Z+7, r1	; 0x07
    1caa:	83 81       	ldd	r24, Z+3	; 0x03
    1cac:	81 ff       	sbrs	r24, 1
    1cae:	cc c1       	rjmp	.+920    	; 0x2048 <vfprintf+0x3d8>
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	3c 01       	movw	r6, r24
    1cb6:	f6 01       	movw	r30, r12
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	f7 01       	movw	r30, r14
    1cbc:	93 fd       	sbrc	r25, 3
    1cbe:	85 91       	lpm	r24, Z+
    1cc0:	93 ff       	sbrs	r25, 3
    1cc2:	81 91       	ld	r24, Z+
    1cc4:	7f 01       	movw	r14, r30
    1cc6:	88 23       	and	r24, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <vfprintf+0x5c>
    1cca:	ba c1       	rjmp	.+884    	; 0x2040 <vfprintf+0x3d0>
    1ccc:	85 32       	cpi	r24, 0x25	; 37
    1cce:	39 f4       	brne	.+14     	; 0x1cde <vfprintf+0x6e>
    1cd0:	93 fd       	sbrc	r25, 3
    1cd2:	85 91       	lpm	r24, Z+
    1cd4:	93 ff       	sbrs	r25, 3
    1cd6:	81 91       	ld	r24, Z+
    1cd8:	7f 01       	movw	r14, r30
    1cda:	85 32       	cpi	r24, 0x25	; 37
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <vfprintf+0x78>
    1cde:	b6 01       	movw	r22, r12
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    1ce6:	e7 cf       	rjmp	.-50     	; 0x1cb6 <vfprintf+0x46>
    1ce8:	91 2c       	mov	r9, r1
    1cea:	21 2c       	mov	r2, r1
    1cec:	31 2c       	mov	r3, r1
    1cee:	ff e1       	ldi	r31, 0x1F	; 31
    1cf0:	f3 15       	cp	r31, r3
    1cf2:	d8 f0       	brcs	.+54     	; 0x1d2a <vfprintf+0xba>
    1cf4:	8b 32       	cpi	r24, 0x2B	; 43
    1cf6:	79 f0       	breq	.+30     	; 0x1d16 <vfprintf+0xa6>
    1cf8:	38 f4       	brcc	.+14     	; 0x1d08 <vfprintf+0x98>
    1cfa:	80 32       	cpi	r24, 0x20	; 32
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <vfprintf+0xac>
    1cfe:	83 32       	cpi	r24, 0x23	; 35
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <vfprintf+0xba>
    1d02:	23 2d       	mov	r18, r3
    1d04:	20 61       	ori	r18, 0x10	; 16
    1d06:	1d c0       	rjmp	.+58     	; 0x1d42 <vfprintf+0xd2>
    1d08:	8d 32       	cpi	r24, 0x2D	; 45
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <vfprintf+0xb4>
    1d0c:	80 33       	cpi	r24, 0x30	; 48
    1d0e:	69 f4       	brne	.+26     	; 0x1d2a <vfprintf+0xba>
    1d10:	23 2d       	mov	r18, r3
    1d12:	21 60       	ori	r18, 0x01	; 1
    1d14:	16 c0       	rjmp	.+44     	; 0x1d42 <vfprintf+0xd2>
    1d16:	83 2d       	mov	r24, r3
    1d18:	82 60       	ori	r24, 0x02	; 2
    1d1a:	38 2e       	mov	r3, r24
    1d1c:	e3 2d       	mov	r30, r3
    1d1e:	e4 60       	ori	r30, 0x04	; 4
    1d20:	3e 2e       	mov	r3, r30
    1d22:	2a c0       	rjmp	.+84     	; 0x1d78 <vfprintf+0x108>
    1d24:	f3 2d       	mov	r31, r3
    1d26:	f8 60       	ori	r31, 0x08	; 8
    1d28:	1d c0       	rjmp	.+58     	; 0x1d64 <vfprintf+0xf4>
    1d2a:	37 fc       	sbrc	r3, 7
    1d2c:	2d c0       	rjmp	.+90     	; 0x1d88 <vfprintf+0x118>
    1d2e:	20 ed       	ldi	r18, 0xD0	; 208
    1d30:	28 0f       	add	r18, r24
    1d32:	2a 30       	cpi	r18, 0x0A	; 10
    1d34:	40 f0       	brcs	.+16     	; 0x1d46 <vfprintf+0xd6>
    1d36:	8e 32       	cpi	r24, 0x2E	; 46
    1d38:	b9 f4       	brne	.+46     	; 0x1d68 <vfprintf+0xf8>
    1d3a:	36 fc       	sbrc	r3, 6
    1d3c:	81 c1       	rjmp	.+770    	; 0x2040 <vfprintf+0x3d0>
    1d3e:	23 2d       	mov	r18, r3
    1d40:	20 64       	ori	r18, 0x40	; 64
    1d42:	32 2e       	mov	r3, r18
    1d44:	19 c0       	rjmp	.+50     	; 0x1d78 <vfprintf+0x108>
    1d46:	36 fe       	sbrs	r3, 6
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <vfprintf+0xe6>
    1d4a:	8a e0       	ldi	r24, 0x0A	; 10
    1d4c:	98 9e       	mul	r9, r24
    1d4e:	20 0d       	add	r18, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	92 2e       	mov	r9, r18
    1d54:	11 c0       	rjmp	.+34     	; 0x1d78 <vfprintf+0x108>
    1d56:	ea e0       	ldi	r30, 0x0A	; 10
    1d58:	2e 9e       	mul	r2, r30
    1d5a:	20 0d       	add	r18, r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	22 2e       	mov	r2, r18
    1d60:	f3 2d       	mov	r31, r3
    1d62:	f0 62       	ori	r31, 0x20	; 32
    1d64:	3f 2e       	mov	r3, r31
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <vfprintf+0x108>
    1d68:	8c 36       	cpi	r24, 0x6C	; 108
    1d6a:	21 f4       	brne	.+8      	; 0x1d74 <vfprintf+0x104>
    1d6c:	83 2d       	mov	r24, r3
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	38 2e       	mov	r3, r24
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <vfprintf+0x108>
    1d74:	88 36       	cpi	r24, 0x68	; 104
    1d76:	41 f4       	brne	.+16     	; 0x1d88 <vfprintf+0x118>
    1d78:	f7 01       	movw	r30, r14
    1d7a:	93 fd       	sbrc	r25, 3
    1d7c:	85 91       	lpm	r24, Z+
    1d7e:	93 ff       	sbrs	r25, 3
    1d80:	81 91       	ld	r24, Z+
    1d82:	7f 01       	movw	r14, r30
    1d84:	81 11       	cpse	r24, r1
    1d86:	b3 cf       	rjmp	.-154    	; 0x1cee <vfprintf+0x7e>
    1d88:	98 2f       	mov	r25, r24
    1d8a:	9f 7d       	andi	r25, 0xDF	; 223
    1d8c:	95 54       	subi	r25, 0x45	; 69
    1d8e:	93 30       	cpi	r25, 0x03	; 3
    1d90:	28 f4       	brcc	.+10     	; 0x1d9c <vfprintf+0x12c>
    1d92:	0c 5f       	subi	r16, 0xFC	; 252
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	9f e3       	ldi	r25, 0x3F	; 63
    1d98:	99 83       	std	Y+1, r25	; 0x01
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <vfprintf+0x146>
    1d9c:	83 36       	cpi	r24, 0x63	; 99
    1d9e:	31 f0       	breq	.+12     	; 0x1dac <vfprintf+0x13c>
    1da0:	83 37       	cpi	r24, 0x73	; 115
    1da2:	71 f0       	breq	.+28     	; 0x1dc0 <vfprintf+0x150>
    1da4:	83 35       	cpi	r24, 0x53	; 83
    1da6:	09 f0       	breq	.+2      	; 0x1daa <vfprintf+0x13a>
    1da8:	59 c0       	rjmp	.+178    	; 0x1e5c <vfprintf+0x1ec>
    1daa:	21 c0       	rjmp	.+66     	; 0x1dee <vfprintf+0x17e>
    1dac:	f8 01       	movw	r30, r16
    1dae:	80 81       	ld	r24, Z
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	0e 5f       	subi	r16, 0xFE	; 254
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	88 24       	eor	r8, r8
    1db8:	83 94       	inc	r8
    1dba:	91 2c       	mov	r9, r1
    1dbc:	53 01       	movw	r10, r6
    1dbe:	13 c0       	rjmp	.+38     	; 0x1de6 <vfprintf+0x176>
    1dc0:	28 01       	movw	r4, r16
    1dc2:	f2 e0       	ldi	r31, 0x02	; 2
    1dc4:	4f 0e       	add	r4, r31
    1dc6:	51 1c       	adc	r5, r1
    1dc8:	f8 01       	movw	r30, r16
    1dca:	a0 80       	ld	r10, Z
    1dcc:	b1 80       	ldd	r11, Z+1	; 0x01
    1dce:	36 fe       	sbrs	r3, 6
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <vfprintf+0x168>
    1dd2:	69 2d       	mov	r22, r9
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <vfprintf+0x16c>
    1dd8:	6f ef       	ldi	r22, 0xFF	; 255
    1dda:	7f ef       	ldi	r23, 0xFF	; 255
    1ddc:	c5 01       	movw	r24, r10
    1dde:	0e 94 47 10 	call	0x208e	; 0x208e <strnlen>
    1de2:	4c 01       	movw	r8, r24
    1de4:	82 01       	movw	r16, r4
    1de6:	f3 2d       	mov	r31, r3
    1de8:	ff 77       	andi	r31, 0x7F	; 127
    1dea:	3f 2e       	mov	r3, r31
    1dec:	16 c0       	rjmp	.+44     	; 0x1e1a <vfprintf+0x1aa>
    1dee:	28 01       	movw	r4, r16
    1df0:	22 e0       	ldi	r18, 0x02	; 2
    1df2:	42 0e       	add	r4, r18
    1df4:	51 1c       	adc	r5, r1
    1df6:	f8 01       	movw	r30, r16
    1df8:	a0 80       	ld	r10, Z
    1dfa:	b1 80       	ldd	r11, Z+1	; 0x01
    1dfc:	36 fe       	sbrs	r3, 6
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <vfprintf+0x196>
    1e00:	69 2d       	mov	r22, r9
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <vfprintf+0x19a>
    1e06:	6f ef       	ldi	r22, 0xFF	; 255
    1e08:	7f ef       	ldi	r23, 0xFF	; 255
    1e0a:	c5 01       	movw	r24, r10
    1e0c:	0e 94 3c 10 	call	0x2078	; 0x2078 <strnlen_P>
    1e10:	4c 01       	movw	r8, r24
    1e12:	f3 2d       	mov	r31, r3
    1e14:	f0 68       	ori	r31, 0x80	; 128
    1e16:	3f 2e       	mov	r3, r31
    1e18:	82 01       	movw	r16, r4
    1e1a:	33 fc       	sbrc	r3, 3
    1e1c:	1b c0       	rjmp	.+54     	; 0x1e54 <vfprintf+0x1e4>
    1e1e:	82 2d       	mov	r24, r2
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	88 16       	cp	r8, r24
    1e24:	99 06       	cpc	r9, r25
    1e26:	b0 f4       	brcc	.+44     	; 0x1e54 <vfprintf+0x1e4>
    1e28:	b6 01       	movw	r22, r12
    1e2a:	80 e2       	ldi	r24, 0x20	; 32
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    1e32:	2a 94       	dec	r2
    1e34:	f4 cf       	rjmp	.-24     	; 0x1e1e <vfprintf+0x1ae>
    1e36:	f5 01       	movw	r30, r10
    1e38:	37 fc       	sbrc	r3, 7
    1e3a:	85 91       	lpm	r24, Z+
    1e3c:	37 fe       	sbrs	r3, 7
    1e3e:	81 91       	ld	r24, Z+
    1e40:	5f 01       	movw	r10, r30
    1e42:	b6 01       	movw	r22, r12
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    1e4a:	21 10       	cpse	r2, r1
    1e4c:	2a 94       	dec	r2
    1e4e:	21 e0       	ldi	r18, 0x01	; 1
    1e50:	82 1a       	sub	r8, r18
    1e52:	91 08       	sbc	r9, r1
    1e54:	81 14       	cp	r8, r1
    1e56:	91 04       	cpc	r9, r1
    1e58:	71 f7       	brne	.-36     	; 0x1e36 <vfprintf+0x1c6>
    1e5a:	e8 c0       	rjmp	.+464    	; 0x202c <vfprintf+0x3bc>
    1e5c:	84 36       	cpi	r24, 0x64	; 100
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <vfprintf+0x1f4>
    1e60:	89 36       	cpi	r24, 0x69	; 105
    1e62:	41 f5       	brne	.+80     	; 0x1eb4 <vfprintf+0x244>
    1e64:	f8 01       	movw	r30, r16
    1e66:	37 fe       	sbrs	r3, 7
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <vfprintf+0x208>
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	0c 5f       	subi	r16, 0xFC	; 252
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	08 c0       	rjmp	.+16     	; 0x1e88 <vfprintf+0x218>
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	07 2e       	mov	r0, r23
    1e7e:	00 0c       	add	r0, r0
    1e80:	88 0b       	sbc	r24, r24
    1e82:	99 0b       	sbc	r25, r25
    1e84:	0e 5f       	subi	r16, 0xFE	; 254
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	f3 2d       	mov	r31, r3
    1e8a:	ff 76       	andi	r31, 0x6F	; 111
    1e8c:	3f 2e       	mov	r3, r31
    1e8e:	97 ff       	sbrs	r25, 7
    1e90:	09 c0       	rjmp	.+18     	; 0x1ea4 <vfprintf+0x234>
    1e92:	90 95       	com	r25
    1e94:	80 95       	com	r24
    1e96:	70 95       	com	r23
    1e98:	61 95       	neg	r22
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	f0 68       	ori	r31, 0x80	; 128
    1ea2:	3f 2e       	mov	r3, r31
    1ea4:	2a e0       	ldi	r18, 0x0A	; 10
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	a3 01       	movw	r20, r6
    1eaa:	0e 94 8e 10 	call	0x211c	; 0x211c <__ultoa_invert>
    1eae:	88 2e       	mov	r8, r24
    1eb0:	86 18       	sub	r8, r6
    1eb2:	45 c0       	rjmp	.+138    	; 0x1f3e <vfprintf+0x2ce>
    1eb4:	85 37       	cpi	r24, 0x75	; 117
    1eb6:	31 f4       	brne	.+12     	; 0x1ec4 <vfprintf+0x254>
    1eb8:	23 2d       	mov	r18, r3
    1eba:	2f 7e       	andi	r18, 0xEF	; 239
    1ebc:	b2 2e       	mov	r11, r18
    1ebe:	2a e0       	ldi	r18, 0x0A	; 10
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	25 c0       	rjmp	.+74     	; 0x1f0e <vfprintf+0x29e>
    1ec4:	93 2d       	mov	r25, r3
    1ec6:	99 7f       	andi	r25, 0xF9	; 249
    1ec8:	b9 2e       	mov	r11, r25
    1eca:	8f 36       	cpi	r24, 0x6F	; 111
    1ecc:	c1 f0       	breq	.+48     	; 0x1efe <vfprintf+0x28e>
    1ece:	18 f4       	brcc	.+6      	; 0x1ed6 <vfprintf+0x266>
    1ed0:	88 35       	cpi	r24, 0x58	; 88
    1ed2:	79 f0       	breq	.+30     	; 0x1ef2 <vfprintf+0x282>
    1ed4:	b5 c0       	rjmp	.+362    	; 0x2040 <vfprintf+0x3d0>
    1ed6:	80 37       	cpi	r24, 0x70	; 112
    1ed8:	19 f0       	breq	.+6      	; 0x1ee0 <vfprintf+0x270>
    1eda:	88 37       	cpi	r24, 0x78	; 120
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <vfprintf+0x276>
    1ede:	b0 c0       	rjmp	.+352    	; 0x2040 <vfprintf+0x3d0>
    1ee0:	e9 2f       	mov	r30, r25
    1ee2:	e0 61       	ori	r30, 0x10	; 16
    1ee4:	be 2e       	mov	r11, r30
    1ee6:	b4 fe       	sbrs	r11, 4
    1ee8:	0d c0       	rjmp	.+26     	; 0x1f04 <vfprintf+0x294>
    1eea:	fb 2d       	mov	r31, r11
    1eec:	f4 60       	ori	r31, 0x04	; 4
    1eee:	bf 2e       	mov	r11, r31
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <vfprintf+0x294>
    1ef2:	34 fe       	sbrs	r3, 4
    1ef4:	0a c0       	rjmp	.+20     	; 0x1f0a <vfprintf+0x29a>
    1ef6:	29 2f       	mov	r18, r25
    1ef8:	26 60       	ori	r18, 0x06	; 6
    1efa:	b2 2e       	mov	r11, r18
    1efc:	06 c0       	rjmp	.+12     	; 0x1f0a <vfprintf+0x29a>
    1efe:	28 e0       	ldi	r18, 0x08	; 8
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <vfprintf+0x29e>
    1f04:	20 e1       	ldi	r18, 0x10	; 16
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <vfprintf+0x29e>
    1f0a:	20 e1       	ldi	r18, 0x10	; 16
    1f0c:	32 e0       	ldi	r19, 0x02	; 2
    1f0e:	f8 01       	movw	r30, r16
    1f10:	b7 fe       	sbrs	r11, 7
    1f12:	07 c0       	rjmp	.+14     	; 0x1f22 <vfprintf+0x2b2>
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	0c 5f       	subi	r16, 0xFC	; 252
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <vfprintf+0x2be>
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 5f       	subi	r16, 0xFE	; 254
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	a3 01       	movw	r20, r6
    1f30:	0e 94 8e 10 	call	0x211c	; 0x211c <__ultoa_invert>
    1f34:	88 2e       	mov	r8, r24
    1f36:	86 18       	sub	r8, r6
    1f38:	fb 2d       	mov	r31, r11
    1f3a:	ff 77       	andi	r31, 0x7F	; 127
    1f3c:	3f 2e       	mov	r3, r31
    1f3e:	36 fe       	sbrs	r3, 6
    1f40:	0d c0       	rjmp	.+26     	; 0x1f5c <vfprintf+0x2ec>
    1f42:	23 2d       	mov	r18, r3
    1f44:	2e 7f       	andi	r18, 0xFE	; 254
    1f46:	a2 2e       	mov	r10, r18
    1f48:	89 14       	cp	r8, r9
    1f4a:	58 f4       	brcc	.+22     	; 0x1f62 <vfprintf+0x2f2>
    1f4c:	34 fe       	sbrs	r3, 4
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <vfprintf+0x2f6>
    1f50:	32 fc       	sbrc	r3, 2
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <vfprintf+0x2f6>
    1f54:	83 2d       	mov	r24, r3
    1f56:	8e 7e       	andi	r24, 0xEE	; 238
    1f58:	a8 2e       	mov	r10, r24
    1f5a:	05 c0       	rjmp	.+10     	; 0x1f66 <vfprintf+0x2f6>
    1f5c:	b8 2c       	mov	r11, r8
    1f5e:	a3 2c       	mov	r10, r3
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <vfprintf+0x2f8>
    1f62:	b8 2c       	mov	r11, r8
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <vfprintf+0x2f8>
    1f66:	b9 2c       	mov	r11, r9
    1f68:	a4 fe       	sbrs	r10, 4
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <vfprintf+0x31a>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e8 0d       	add	r30, r8
    1f70:	f1 1d       	adc	r31, r1
    1f72:	80 81       	ld	r24, Z
    1f74:	80 33       	cpi	r24, 0x30	; 48
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <vfprintf+0x310>
    1f78:	9a 2d       	mov	r25, r10
    1f7a:	99 7e       	andi	r25, 0xE9	; 233
    1f7c:	a9 2e       	mov	r10, r25
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <vfprintf+0x322>
    1f80:	a2 fe       	sbrs	r10, 2
    1f82:	06 c0       	rjmp	.+12     	; 0x1f90 <vfprintf+0x320>
    1f84:	b3 94       	inc	r11
    1f86:	b3 94       	inc	r11
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <vfprintf+0x322>
    1f8a:	8a 2d       	mov	r24, r10
    1f8c:	86 78       	andi	r24, 0x86	; 134
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <vfprintf+0x322>
    1f90:	b3 94       	inc	r11
    1f92:	a3 fc       	sbrc	r10, 3
    1f94:	11 c0       	rjmp	.+34     	; 0x1fb8 <vfprintf+0x348>
    1f96:	a0 fe       	sbrs	r10, 0
    1f98:	06 c0       	rjmp	.+12     	; 0x1fa6 <vfprintf+0x336>
    1f9a:	b2 14       	cp	r11, r2
    1f9c:	88 f4       	brcc	.+34     	; 0x1fc0 <vfprintf+0x350>
    1f9e:	28 0c       	add	r2, r8
    1fa0:	92 2c       	mov	r9, r2
    1fa2:	9b 18       	sub	r9, r11
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <vfprintf+0x352>
    1fa6:	b2 14       	cp	r11, r2
    1fa8:	60 f4       	brcc	.+24     	; 0x1fc2 <vfprintf+0x352>
    1faa:	b6 01       	movw	r22, r12
    1fac:	80 e2       	ldi	r24, 0x20	; 32
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    1fb4:	b3 94       	inc	r11
    1fb6:	f7 cf       	rjmp	.-18     	; 0x1fa6 <vfprintf+0x336>
    1fb8:	b2 14       	cp	r11, r2
    1fba:	18 f4       	brcc	.+6      	; 0x1fc2 <vfprintf+0x352>
    1fbc:	2b 18       	sub	r2, r11
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <vfprintf+0x354>
    1fc0:	98 2c       	mov	r9, r8
    1fc2:	21 2c       	mov	r2, r1
    1fc4:	a4 fe       	sbrs	r10, 4
    1fc6:	10 c0       	rjmp	.+32     	; 0x1fe8 <vfprintf+0x378>
    1fc8:	b6 01       	movw	r22, r12
    1fca:	80 e3       	ldi	r24, 0x30	; 48
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    1fd2:	a2 fe       	sbrs	r10, 2
    1fd4:	17 c0       	rjmp	.+46     	; 0x2004 <vfprintf+0x394>
    1fd6:	a1 fc       	sbrc	r10, 1
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <vfprintf+0x370>
    1fda:	88 e7       	ldi	r24, 0x78	; 120
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x374>
    1fe0:	88 e5       	ldi	r24, 0x58	; 88
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	0c c0       	rjmp	.+24     	; 0x2000 <vfprintf+0x390>
    1fe8:	8a 2d       	mov	r24, r10
    1fea:	86 78       	andi	r24, 0x86	; 134
    1fec:	59 f0       	breq	.+22     	; 0x2004 <vfprintf+0x394>
    1fee:	a1 fe       	sbrs	r10, 1
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <vfprintf+0x386>
    1ff2:	8b e2       	ldi	r24, 0x2B	; 43
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <vfprintf+0x388>
    1ff6:	80 e2       	ldi	r24, 0x20	; 32
    1ff8:	a7 fc       	sbrc	r10, 7
    1ffa:	8d e2       	ldi	r24, 0x2D	; 45
    1ffc:	b6 01       	movw	r22, r12
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    2004:	89 14       	cp	r8, r9
    2006:	38 f4       	brcc	.+14     	; 0x2016 <vfprintf+0x3a6>
    2008:	b6 01       	movw	r22, r12
    200a:	80 e3       	ldi	r24, 0x30	; 48
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    2012:	9a 94       	dec	r9
    2014:	f7 cf       	rjmp	.-18     	; 0x2004 <vfprintf+0x394>
    2016:	8a 94       	dec	r8
    2018:	f3 01       	movw	r30, r6
    201a:	e8 0d       	add	r30, r8
    201c:	f1 1d       	adc	r31, r1
    201e:	80 81       	ld	r24, Z
    2020:	b6 01       	movw	r22, r12
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    2028:	81 10       	cpse	r8, r1
    202a:	f5 cf       	rjmp	.-22     	; 0x2016 <vfprintf+0x3a6>
    202c:	22 20       	and	r2, r2
    202e:	09 f4       	brne	.+2      	; 0x2032 <vfprintf+0x3c2>
    2030:	42 ce       	rjmp	.-892    	; 0x1cb6 <vfprintf+0x46>
    2032:	b6 01       	movw	r22, r12
    2034:	80 e2       	ldi	r24, 0x20	; 32
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 52 10 	call	0x20a4	; 0x20a4 <fputc>
    203c:	2a 94       	dec	r2
    203e:	f6 cf       	rjmp	.-20     	; 0x202c <vfprintf+0x3bc>
    2040:	f6 01       	movw	r30, r12
    2042:	86 81       	ldd	r24, Z+6	; 0x06
    2044:	97 81       	ldd	r25, Z+7	; 0x07
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vfprintf+0x3dc>
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	9f ef       	ldi	r25, 0xFF	; 255
    204c:	2b 96       	adiw	r28, 0x0b	; 11
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	7f 90       	pop	r7
    206c:	6f 90       	pop	r6
    206e:	5f 90       	pop	r5
    2070:	4f 90       	pop	r4
    2072:	3f 90       	pop	r3
    2074:	2f 90       	pop	r2
    2076:	08 95       	ret

00002078 <strnlen_P>:
    2078:	fc 01       	movw	r30, r24
    207a:	05 90       	lpm	r0, Z+
    207c:	61 50       	subi	r22, 0x01	; 1
    207e:	70 40       	sbci	r23, 0x00	; 0
    2080:	01 10       	cpse	r0, r1
    2082:	d8 f7       	brcc	.-10     	; 0x207a <strnlen_P+0x2>
    2084:	80 95       	com	r24
    2086:	90 95       	com	r25
    2088:	8e 0f       	add	r24, r30
    208a:	9f 1f       	adc	r25, r31
    208c:	08 95       	ret

0000208e <strnlen>:
    208e:	fc 01       	movw	r30, r24
    2090:	61 50       	subi	r22, 0x01	; 1
    2092:	70 40       	sbci	r23, 0x00	; 0
    2094:	01 90       	ld	r0, Z+
    2096:	01 10       	cpse	r0, r1
    2098:	d8 f7       	brcc	.-10     	; 0x2090 <strnlen+0x2>
    209a:	80 95       	com	r24
    209c:	90 95       	com	r25
    209e:	8e 0f       	add	r24, r30
    20a0:	9f 1f       	adc	r25, r31
    20a2:	08 95       	ret

000020a4 <fputc>:
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	fb 01       	movw	r30, r22
    20ae:	23 81       	ldd	r18, Z+3	; 0x03
    20b0:	21 fd       	sbrc	r18, 1
    20b2:	03 c0       	rjmp	.+6      	; 0x20ba <fputc+0x16>
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	9f ef       	ldi	r25, 0xFF	; 255
    20b8:	2c c0       	rjmp	.+88     	; 0x2112 <fputc+0x6e>
    20ba:	22 ff       	sbrs	r18, 2
    20bc:	16 c0       	rjmp	.+44     	; 0x20ea <fputc+0x46>
    20be:	46 81       	ldd	r20, Z+6	; 0x06
    20c0:	57 81       	ldd	r21, Z+7	; 0x07
    20c2:	24 81       	ldd	r18, Z+4	; 0x04
    20c4:	35 81       	ldd	r19, Z+5	; 0x05
    20c6:	42 17       	cp	r20, r18
    20c8:	53 07       	cpc	r21, r19
    20ca:	44 f4       	brge	.+16     	; 0x20dc <fputc+0x38>
    20cc:	a0 81       	ld	r26, Z
    20ce:	b1 81       	ldd	r27, Z+1	; 0x01
    20d0:	9d 01       	movw	r18, r26
    20d2:	2f 5f       	subi	r18, 0xFF	; 255
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	20 83       	st	Z, r18
    20d8:	31 83       	std	Z+1, r19	; 0x01
    20da:	8c 93       	st	X, r24
    20dc:	26 81       	ldd	r18, Z+6	; 0x06
    20de:	37 81       	ldd	r19, Z+7	; 0x07
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	26 83       	std	Z+6, r18	; 0x06
    20e6:	37 83       	std	Z+7, r19	; 0x07
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <fputc+0x6e>
    20ea:	8b 01       	movw	r16, r22
    20ec:	ec 01       	movw	r28, r24
    20ee:	fb 01       	movw	r30, r22
    20f0:	00 84       	ldd	r0, Z+8	; 0x08
    20f2:	f1 85       	ldd	r31, Z+9	; 0x09
    20f4:	e0 2d       	mov	r30, r0
    20f6:	19 95       	eicall
    20f8:	89 2b       	or	r24, r25
    20fa:	e1 f6       	brne	.-72     	; 0x20b4 <fputc+0x10>
    20fc:	d8 01       	movw	r26, r16
    20fe:	16 96       	adiw	r26, 0x06	; 6
    2100:	8d 91       	ld	r24, X+
    2102:	9c 91       	ld	r25, X
    2104:	17 97       	sbiw	r26, 0x07	; 7
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	8d 93       	st	X+, r24
    210c:	9c 93       	st	X, r25
    210e:	17 97       	sbiw	r26, 0x07	; 7
    2110:	ce 01       	movw	r24, r28
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <__ultoa_invert>:
    211c:	fa 01       	movw	r30, r20
    211e:	aa 27       	eor	r26, r26
    2120:	28 30       	cpi	r18, 0x08	; 8
    2122:	51 f1       	breq	.+84     	; 0x2178 <__ultoa_invert+0x5c>
    2124:	20 31       	cpi	r18, 0x10	; 16
    2126:	81 f1       	breq	.+96     	; 0x2188 <__ultoa_invert+0x6c>
    2128:	e8 94       	clt
    212a:	6f 93       	push	r22
    212c:	6e 7f       	andi	r22, 0xFE	; 254
    212e:	6e 5f       	subi	r22, 0xFE	; 254
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	af 4f       	sbci	r26, 0xFF	; 255
    2138:	b1 e0       	ldi	r27, 0x01	; 1
    213a:	3e d0       	rcall	.+124    	; 0x21b8 <__ultoa_invert+0x9c>
    213c:	b4 e0       	ldi	r27, 0x04	; 4
    213e:	3c d0       	rcall	.+120    	; 0x21b8 <__ultoa_invert+0x9c>
    2140:	67 0f       	add	r22, r23
    2142:	78 1f       	adc	r23, r24
    2144:	89 1f       	adc	r24, r25
    2146:	9a 1f       	adc	r25, r26
    2148:	a1 1d       	adc	r26, r1
    214a:	68 0f       	add	r22, r24
    214c:	79 1f       	adc	r23, r25
    214e:	8a 1f       	adc	r24, r26
    2150:	91 1d       	adc	r25, r1
    2152:	a1 1d       	adc	r26, r1
    2154:	6a 0f       	add	r22, r26
    2156:	71 1d       	adc	r23, r1
    2158:	81 1d       	adc	r24, r1
    215a:	91 1d       	adc	r25, r1
    215c:	a1 1d       	adc	r26, r1
    215e:	20 d0       	rcall	.+64     	; 0x21a0 <__ultoa_invert+0x84>
    2160:	09 f4       	brne	.+2      	; 0x2164 <__ultoa_invert+0x48>
    2162:	68 94       	set
    2164:	3f 91       	pop	r19
    2166:	2a e0       	ldi	r18, 0x0A	; 10
    2168:	26 9f       	mul	r18, r22
    216a:	11 24       	eor	r1, r1
    216c:	30 19       	sub	r19, r0
    216e:	30 5d       	subi	r19, 0xD0	; 208
    2170:	31 93       	st	Z+, r19
    2172:	de f6       	brtc	.-74     	; 0x212a <__ultoa_invert+0xe>
    2174:	cf 01       	movw	r24, r30
    2176:	08 95       	ret
    2178:	46 2f       	mov	r20, r22
    217a:	47 70       	andi	r20, 0x07	; 7
    217c:	40 5d       	subi	r20, 0xD0	; 208
    217e:	41 93       	st	Z+, r20
    2180:	b3 e0       	ldi	r27, 0x03	; 3
    2182:	0f d0       	rcall	.+30     	; 0x21a2 <__ultoa_invert+0x86>
    2184:	c9 f7       	brne	.-14     	; 0x2178 <__ultoa_invert+0x5c>
    2186:	f6 cf       	rjmp	.-20     	; 0x2174 <__ultoa_invert+0x58>
    2188:	46 2f       	mov	r20, r22
    218a:	4f 70       	andi	r20, 0x0F	; 15
    218c:	40 5d       	subi	r20, 0xD0	; 208
    218e:	4a 33       	cpi	r20, 0x3A	; 58
    2190:	18 f0       	brcs	.+6      	; 0x2198 <__ultoa_invert+0x7c>
    2192:	49 5d       	subi	r20, 0xD9	; 217
    2194:	31 fd       	sbrc	r19, 1
    2196:	40 52       	subi	r20, 0x20	; 32
    2198:	41 93       	st	Z+, r20
    219a:	02 d0       	rcall	.+4      	; 0x21a0 <__ultoa_invert+0x84>
    219c:	a9 f7       	brne	.-22     	; 0x2188 <__ultoa_invert+0x6c>
    219e:	ea cf       	rjmp	.-44     	; 0x2174 <__ultoa_invert+0x58>
    21a0:	b4 e0       	ldi	r27, 0x04	; 4
    21a2:	a6 95       	lsr	r26
    21a4:	97 95       	ror	r25
    21a6:	87 95       	ror	r24
    21a8:	77 95       	ror	r23
    21aa:	67 95       	ror	r22
    21ac:	ba 95       	dec	r27
    21ae:	c9 f7       	brne	.-14     	; 0x21a2 <__ultoa_invert+0x86>
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	61 05       	cpc	r22, r1
    21b4:	71 05       	cpc	r23, r1
    21b6:	08 95       	ret
    21b8:	9b 01       	movw	r18, r22
    21ba:	ac 01       	movw	r20, r24
    21bc:	0a 2e       	mov	r0, r26
    21be:	06 94       	lsr	r0
    21c0:	57 95       	ror	r21
    21c2:	47 95       	ror	r20
    21c4:	37 95       	ror	r19
    21c6:	27 95       	ror	r18
    21c8:	ba 95       	dec	r27
    21ca:	c9 f7       	brne	.-14     	; 0x21be <__ultoa_invert+0xa2>
    21cc:	62 0f       	add	r22, r18
    21ce:	73 1f       	adc	r23, r19
    21d0:	84 1f       	adc	r24, r20
    21d2:	95 1f       	adc	r25, r21
    21d4:	a0 1d       	adc	r26, r0
    21d6:	08 95       	ret

000021d8 <_exit>:
    21d8:	f8 94       	cli

000021da <__stop_program>:
    21da:	ff cf       	rjmp	.-2      	; 0x21da <__stop_program>
